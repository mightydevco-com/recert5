%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1505.m00.i125.n039.S.c12.142672393 Boom, explosion and pow set.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: ??????? ??????
%%CreationDate: 5/14/2015
%%BoundingBox: 0 0 445 417
%%HiResBoundingBox: 0 0 444.0478 416.4187
%%CropBox: 0 0 444.0478 416.4187
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1505.m00.i125.n025.S.c12.140130823 Comic book explosion boom</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-05-14T09:44:03+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-05-14T09:44:03+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-05-14T09:44:03+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>240</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA8AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYqg&#xA;tYmEVmKmnqTQQ7df3syR/wDG2Y2qnww98oj5yAcjSxufujI/KJKNzJcdRt7uKeW5jjNWtZBDL0+0&#xA;Y0k/4jIMANs5QIAJ6i/tI/QrYWDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVUxcR/WTbnaQIJB7qSQafI9fmMh4g4uHrVs+A8PF0ulySxycuDBuLFWp2YdQcnbE&#xA;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&#xA;TcZtqoB4LtCfHPjqr+/q95wOA7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXmPn69bQPPVtq178Gj6&#xA;xYw6cLtjSOK7tJp5Y43Y0VDOl03Ek7lOPWmU5Qzjya1PW9PtbGWe4YRwotZJJgUjXwLFqD7uuUqn&#xA;HlHyXBILLXtU9droVntNOmCRxW5NRFI0YRZDN6RBIlZuDE8QDmRCFboJZvljF2KuxV2KuxV2KuxV&#xA;KYfLVinmq58yt8eoz2UOnRsRT07eKSSYqv8Axkklq3+qvhiy4zw10TbFigNd0Ow1vTW06/UvaSSQ&#xA;yyRj9r0JkmVT7FowD7YpjKjaT+evL36a/wAPDhz/AEbrVnqPStPq/M8vst05f24QyhKr9zJ8DBJv&#xA;L/liy0K71iSx+C21e8OoyW9PhS4kjSOYr7SGIPT+YtiylK68mE/nZ+Ui+cdNTVtHVYfNmmKTZS7K&#xA;LmMfEbaVjTr+wx+yfYnIyiJCjyc7s7Xz02QSHLqxr/nGbXbK9TV9PuYWtPMOnBLe4icFGa2SSRlS&#xA;RTvzt55ZV3+yrKvQDBjBEaPRyO2RGWTxIfRk39x6/re6ZN07sVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVUL+wsdQs5bK/t4ruznXhNbToskbr4MjAqR88VY7pH5W/l5pF7He6foFpDdQnlBLw5mJhsGiD&#xA;lhGfdaYBEJ4iynCh2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5n5z8kPo/nay/Mzy/GRd237jz&#xA;PYxD/evT3oskyqv2poFAen7YQDqACQW+GS48B+D0uOSOSNZI2DxuAyOpqCDuCCOoOBobxV2Kv//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:1d40ca48-a96f-164d-bf54-56781de9ff28</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:1d40ca48-a96f-164d-bf54-56781de9ff28</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:d9222f88-6e9e-6d45-86b0-219a9932f19f</stRef:instanceID>
            <stRef:documentID>xmp.did:d9222f88-6e9e-6d45-86b0-219a9932f19f</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1d40ca48-a96f-164d-bf54-56781de9ff28</stEvt:instanceID>
                  <stEvt:when>2015-05-14T09:44:03+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>480.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Áåëûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>×åðíûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -416.419 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 416.419 li
444.048 416.419 li
444.048 0 li
cp
clp
168.36 15.2957 mo
159.445 25.656 133.584 53.0876 129.61 35.6556 cv
130.664 40.2792 126.413 53.8237 120.849 52.79 cv
115.175 51.7359 111.396 42.4482 110.199 37.7063 cv
107.083 25.3687 109.349 12.5111 109.435 0 cv
108.173 9.08552 106.99 17.2019 105.841 24.366 cv
104.693 31.53 103.577 37.7417 102.104 42.4959 cv
101.32 48.2945 100.177 52.6355 93.7084 50.7256 cv
97.1701 61.192 95.2299 64.2594 86.4089 60.7023 cv
90.7605 66.3754 88.2314 65.4239 84.6702 62.2295 cv
83.2614 60.5844 81.0721 57.7809 78.6345 54.1267 cv
73.7595 46.8182 67.8915 36.1067 60.655 22.1276 cv
64.8176 34.0449 68.2104 44.1241 70.6625 52.5467 cv
73.1148 60.9695 74.6264 67.7354 73.864 70.8425 cv
75.4272 78.3172 74.7163 82.1329 66.1822 76.6817 cv
70.7304 87.1769 67.4553 88.4052 57.9648 84.9506 cv
57.9996 88.6372 51.8189 87.6409 44.0146 85.7138 cv
36.2104 83.7867 26.7825 80.9288 15.5603 77.3215 cv
28.5547 84.0637 38.9711 89.6963 46.8437 94.5546 cv
54.7164 99.4128 60.0452 103.497 49.5532 104.397 cv
65.6831 110.786 65.9923 113.991 48.7857 118.422 cv
61.6595 120.193 57.0173 123.191 49.0366 126.653 cv
42.8497 129.647 33.3243 133.106 21.3914 137.132 cv
31.9668 135.581 40.8704 134.424 48.0556 133.868 cv
55.2409 133.313 60.7076 133.359 55.6623 139.61 cv
68.1116 135.074 70.0487 136.741 61.7141 147.416 cv
70.3005 142.116 68.615 145.822 64.4393 151.483 cv
61.5285 155.691 56.1275 161.853 48.8222 169.453 cv
41.517 177.052 32.3075 186.088 21.1473 196.769 cv
42.7355 180.627 58.591 169.319 69.8637 163.28 cv
75.5 160.261 79.9905 158.559 82.6219 161.035 cv
86.9677 157.897 89.4541 158.937 90.8787 163.047 cv
92.7106 163.867 93.4806 167.758 93.5359 173.128 cv
93.6465 183.868 90.8989 200.525 86.4424 223.533 cv
91.0532 210.506 95.0614 199.635 98.645 190.884 cv
102.229 182.134 105.388 175.505 108.246 171.059 cv
111.213 166.415 113.879 163.955 112.966 171.539 cv
119.075 163.131 121.605 164.768 122.938 174.928 cv
126.883 172.067 129.632 177.73 132.668 185.368 cv
135.705 193.007 139.029 202.622 142.819 214.178 cv
140.833 201.991 139.313 191.744 138.394 183.342 cv
137.474 174.939 137.156 168.381 139.257 175.315 cv
137.992 158.76 139.147 155.698 147.464 173.271 cv
143.198 152.876 146.096 153.116 158.546 168.264 cv
153.904 156.707 158.815 160.058 165.18 165.235 cv
170.921 169.678 178.116 175.946 186.588 183.577 cv
177.939 172.7 171.13 163.786 169.608 159.54 cv
161.498 149.546 158.675 144.221 175.65 149.614 cv
157.326 136.827 158.8 134.758 179.929 138.091 cv
166.351 133.541 172.429 134.394 181.644 136.669 cv
189.498 138.686 200.49 142.126 214.092 146.693 cv
203.15 140.876 194.018 135.863 186.742 131.528 cv
179.467 127.194 174.049 123.538 180.549 118.627 cv
173.786 117.981 170.002 117.02 169.49 115.42 cv
168.732 113.653 171.245 111.245 177.075 107.704 cv
171.591 109.126 169.424 109.414 171.479 109.921 cv
169.867 108.456 172.477 107.209 176.547 105.562 cv
177.009 106.084 183.312 105.002 191.664 104.099 cv
200.017 103.195 210.419 102.471 222.919 101.801 cv
209.787 100.667 198.754 99.5871 189.816 98.4658 cv
185.346 97.9052 181.401 97.3341 178.057 96.6787 cv
174.699 96.0206 171.943 95.2781 176.597 95.6234 cv
164.535 93.5815 161.878 92.1441 177.425 89.1577 cv
160.745 88.8035 162.268 86.9001 177.717 83.9704 cv
168.288 83.18 171.624 81.5459 178.001 79.4831 cv
180.15 77.9287 185.34 75.9456 191.456 73.7597 cv
197.573 71.5739 204.616 69.1851 212.585 66.5652 cv
199.199 69.2303 187.896 71.3752 178.551 72.7992 cv
169.193 74.2259 161.794 74.9316 174.296 66.655 cv
150.64 74.5054 146.884 73.3734 164.762 51.4166 cv
142.754 68.8729 142.38 65.5045 154.048 42.5726 cv
144.752 56.1322 147.499 50.1285 152.574 40.9558 cv
155.851 35.0872 161.456 26.0497 168.36 15.2957 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 .47451 0 rgb
f
220.094 146.531 mo
208.214 139.771 198.268 133.978 193.249 129.45 cv
182.324 123.922 176.326 119.66 192.671 112.412 cv
188.335 114.334 174.227 112.763 174.173 107.104 cv
174.117 101.334 182.506 95.842 186.93 93.7561 cv
198.44 88.3288 211.493 88.083 223.788 85.7652 cv
214.629 86.271 206.437 86.6695 199.185 86.9179 cv
191.934 87.1663 185.624 87.2647 180.675 86.7321 cv
174.834 87.0757 170.354 86.7882 170.986 80.0731 cv
161.38 85.4804 157.997 84.1654 159.793 74.8255 cv
155.062 80.1856 155.51 77.5208 157.961 73.4124 cv
159.305 71.7139 161.635 69.027 164.753 65.933 cv
170.99 59.7451 180.375 51.9291 192.704 42.1427 cv
181.808 48.5165 172.568 53.7818 164.773 57.806 cv
156.978 61.8302 150.628 64.6131 147.433 64.4615 cv
140.397 67.4312 136.516 67.4663 140.227 58.0442 cv
130.801 64.5233 128.966 61.5452 130.534 51.5677 cv
126.922 52.31 126.713 46.053 127.106 38.0239 cv
127.498 29.9948 128.492 20.1936 129.877 8.48748 cv
125.756 22.5348 122.228 33.8391 118.973 42.4982 cv
115.717 51.1573 112.732 57.1712 109.834 47.0475 cv
106.662 64.1041 103.576 65.0232 95.9223 48.9879 cv
96.6565 61.9622 92.8236 57.982 87.8933 50.8147 cv
83.7665 45.3181 78.5423 36.6344 72.3 25.6966 cv
75.8527 35.7775 78.6985 44.293 80.6235 51.2378 cv
82.5485 58.1827 83.5528 63.5566 76.45 59.8056 cv
83.2924 71.152 82.0277 73.3733 69.9507 67.2441 cv
76.8019 74.6525 72.8408 73.7101 66.4834 70.6994 cv
61.7947 68.6509 54.7096 64.534 45.8488 58.8241 cv
36.988 53.1143 26.3515 45.8117 13.7256 36.9107 cv
33.714 54.9967 47.8558 68.3856 55.9471 78.2886 cv
59.9927 83.24 62.5258 87.3201 60.6013 90.378 cv
64.5157 94.0402 63.9725 96.6801 60.2123 98.8675 cv
59.759 100.823 56.0887 102.326 50.8293 103.411 cv
40.3105 105.582 23.4353 106.085 0 106.13 cv
13.6706 108.153 25.1089 109.999 34.3845 111.835 cv
43.6601 113.672 50.773 115.499 55.6847 117.45 cv
60.8123 119.47 63.7388 121.614 56.1206 122.175 cv
65.5445 126.555 64.4238 129.352 54.7095 132.612 cv
58.2743 135.934 53.2454 139.719 46.3321 144.166 cv
39.4188 148.613 30.6208 153.722 20.0081 159.661 cv
31.587 155.371 41.3508 151.911 49.4204 149.396 cv
57.4898 146.88 63.8649 145.308 57.4637 148.702 cv
73.4672 144.281 76.6944 144.826 61.0456 156.363 cv
80.2422 148.26 80.5626 151.15 68.0875 166.277 cv
78.5379 159.502 76.1926 164.965 72.3349 172.206 cv
69.0773 178.693 64.3074 186.958 58.4456 196.738 cv
67.4588 186.162 74.8997 177.767 78.7738 175.458 cv
87.0243 165.579 91.708 161.787 89.676 179.481 cv
98.7052 159.043 101.019 160.091 101.806 181.468 cv
103.663 167.268 103.994 173.397 103.53 182.877 cv
103.06 190.973 101.795 202.42 99.9255 216.646 cv
103.533 204.791 106.698 194.866 109.555 186.894 cv
112.411 178.921 114.958 172.902 121.027 178.337 cv
120.362 171.576 120.578 167.679 122.05 166.869 cv
123.639 165.785 126.484 167.789 131.079 172.83 cv
128.631 167.722 127.932 165.65 127.829 167.765 cv
128.957 165.901 130.681 168.223 133.08 171.901 cv
132.656 172.455 134.929 178.432 137.419 186.456 cv
139.91 194.479 142.618 204.549 145.677 216.687 cv
144.268 203.583 143.208 192.547 142.592 183.56 cv
142.284 179.066 142.087 175.085 142.088 171.676 cv
142.089 168.255 142.288 165.408 142.843 170.041 cv
142.53 157.812 143.431 154.928 149.347 169.613 cv
146.492 153.174 148.652 154.304 154.494 168.903 cv
153.459 159.497 155.703 162.457 158.953 168.32 cv
160.891 170.13 163.834 174.842 167.153 180.425 cv
170.473 186.008 174.17 192.461 178.272 199.779 cv
173.086 187.154 168.81 176.473 165.618 167.575 cv
162.42 158.666 160.307 151.54 170.83 162.22 cv
158.583 140.512 158.972 136.608 183.954 149.937 cv
162.596 131.691 165.83 130.677 190.576 137.724 cv
175.483 131.205 181.903 132.747 191.879 135.967 cv
198.268 138.055 208.214 141.821 220.094 146.531 cv
cp
.772549 .145098 .0509804 rgb
f
200.479 121.019 mo
145.021 113.822 143.473 119.189 188.972 148.628 cv
138.072 128.41 134.219 132.263 170.913 175.102 cv
124.998 137.664 119.631 139.212 136.4 224.06 cv
108.173 139.212 102.806 137.664 65.3548 189.298 cv
93.5851 132.263 89.7319 128.41 56.0338 169.125 cv
84.3307 119.189 82.7826 113.822 11.1172 115.603 cv
82.7826 102.364 84.3307 96.997 45.4681 73.075 cv
89.7319 87.7765 93.5851 83.9232 68.587 36.4188 cv
102.806 78.522 108.173 76.974 114.792 26.953 cv
119.631 76.9739 124.998 78.522 159.302 34.2863 cv
134.219 83.9232 138.072 87.7764 210.84 59.7215 cv
143.473 96.997 145.021 102.364 200.479 121.019 cv
cp
.109804 .054902 .00784314 rgb
f
128.187 195.733 mo
117.413 165.778 109.642 151.495 99.3575 151.495 cv
92.4983 151.495 85.5283 157.427 75.2296 170.342 cv
86.0944 146.835 85.9184 142.499 84.6007 140.377 cv
84.0225 139.445 83.0462 138.911 81.9234 138.911 cv
79.935 138.911 76.8289 140.14 66.238 151.847 cv
73.2774 138.076 76.313 128.453 72.5423 121.982 cv
68.5216 115.082 57.9699 112.452 32.7119 112.245 cv
61.1822 106.236 70.5623 101.892 71.7655 95.4477 cv
72.6986 90.4487 68.0575 85.3546 58.2702 78.5321 cv
65.2818 80.5215 70.9646 81.6975 75.1768 81.6975 cv
79.482 81.6975 82.3196 80.4641 83.8516 77.9267 cv
86.4936 73.5506 84.9672 66.2041 77.4393 50.379 cv
87.378 61.6737 94.2177 67.3857 99.814 67.3857 cv
106.906 67.3857 110.474 59.0693 113.484 41.771 cv
115.843 58.8576 119.033 67.0739 125.875 67.0739 cv
130.938 67.0739 137.207 62.1834 148.474 48.7726 cv
142.584 61.8517 140.673 69.6652 143.5 74.261 cv
145.137 76.9217 148.151 78.2153 152.715 78.2153 cv
159.744 78.2153 170.84 75.1429 186.539 69.5777 cv
165.3 82.2329 155.796 90.3718 156.486 97.9842 cv
157.088 104.609 164.908 109.542 181.607 115.876 cv
175.729 115.329 171.042 115.066 167.313 115.066 cv
158.788 115.066 154.746 116.44 153.795 119.659 cv
152.73 123.265 155.615 127.856 171.814 139.263 cv
160.98 135.403 154.315 133.735 150.129 133.735 cv
146.948 133.735 144.869 134.747 143.951 136.744 cv
142.219 140.508 145.325 147.018 155.844 160.356 cv
145.451 152.565 138.469 148.628 133.442 148.628 cv
131.021 148.628 129.057 149.525 127.603 151.294 cv
123.495 156.293 123.417 167.674 128.187 195.733 cv
cp
.94902 .847059 .0666667 rgb
f
66.0768 113.459 mo
68.0747 113.033 li
70.6497 112.484 72.1408 110.773 71.6393 108.421 cv
71.0812 105.801 69.2248 104.712 66.6503 105.261 cv
64.43 105.734 li
66.0768 113.459 li
cp
65.9972 99.3677 mo
76.2955 97.1718 79.1945 101.195 80.2737 106.256 cv
81.5228 112.116 76.8209 116.18 70.4733 117.533 cv
67.099 118.252 li
68.5656 125.133 li
71.2738 124.556 li
72.523 130.416 li
58.2293 133.463 li
56.9801 127.603 li
59.466 127.073 li
55.3398 107.719 li
52.854 108.249 li
51.6142 102.434 li
65.9972 99.3677 li
cp
0 0 0 rgb
f
103.344 107.788 mo
102.199 102.416 99.8161 98.4228 96.3978 99.1514 cv
93.6814 99.6845 92.649 103.989 93.8228 109.494 cv
95.0625 115.308 97.9346 118.548 100.776 117.942 cv
103.573 117.345 104.518 113.292 103.344 107.788 cv
cp
82.8588 111.831 mo
80.8145 102.242 85.7964 94.2646 94.9852 92.3052 cv
105.861 89.9869 112.313 95.4341 114.442 105.422 cv
116.581 115.453 112.294 122.772 102.262 124.911 cv
92.9842 126.888 85.2246 122.929 82.8588 111.831 cv
cp
f
130.675 107.53 mo
130.499 106.268 130.515 100.464 130.503 96.0569 cv
130.594 85.5963 li
139.827 83.6274 li
145.236 95.2832 li
146.472 98.0365 147.736 101.572 148.432 103.745 cv
148.653 103.697 li
148.405 101.662 148.176 96.8842 148.178 94.9343 cv
148.249 87.8652 li
145.807 88.3859 li
144.577 82.6154 li
157.272 79.9083 li
158.502 85.679 li
156.061 86.1995 li
154.832 112.868 li
144.311 115.111 li
139.396 105.113 li
138.674 103.69 137.628 101.175 137.112 99.8455 cv
136.935 99.8836 li
137.04 101.254 137.06 104.174 137.024 105.527 cv
136.587 116.757 li
126.289 118.953 li
115.043 94.9439 li
112.558 95.4739 li
111.328 89.7034 li
125.977 86.5805 li
127.207 92.351 li
124.632 92.9001 li
127.168 99.1353 li
128.111 101.162 129.992 106.283 130.454 107.578 cv
130.675 107.53 li
cp
f
167.784 100.454 mo
170.936 99.782 173.531 101.503 174.07 104.033 cv
174.6 106.519 173.003 109.041 169.762 109.732 cv
166.876 110.347 164.219 108.546 163.727 106.238 cv
163.254 104.018 164.588 101.136 167.784 100.454 cv
cp
158.255 79.6986 mo
168.864 77.4368 li
170.663 85.872 li
170.695 97.5593 li
164.835 98.809 li
160.053 88.1339 li
158.255 79.6986 li
cp
f
68.7529 110.963 mo
70.6046 110.568 li
72.9913 110.059 74.3736 108.475 73.9083 106.294 cv
73.3907 103.867 71.6708 102.858 69.2842 103.367 cv
67.2267 103.805 li
68.7529 110.963 li
cp
68.6792 97.904 mo
78.2234 95.8697 80.9107 99.5971 81.9103 104.287 cv
83.068 109.718 78.7101 113.485 72.8273 114.739 cv
69.7002 115.406 li
71.0599 121.782 li
73.569 121.248 li
74.7271 126.678 li
61.4806 129.502 li
60.3223 124.072 li
62.6258 123.581 li
58.8022 105.644 li
56.4987 106.135 li
55.3499 100.746 li
68.6792 97.904 li
cp
.858824 .145098 .0509804 rgb
f
103.286 105.708 mo
102.224 100.73 100.016 97.0303 96.8482 97.7055 cv
94.3297 98.1975 93.374 102.188 94.4616 107.289 cv
95.6109 112.678 98.2722 115.68 100.905 115.119 cv
103.497 114.567 104.373 110.809 103.286 105.708 cv
cp
84.3 109.455 mo
82.4059 100.569 87.0224 93.1758 95.5385 91.3603 cv
105.618 89.212 111.597 94.2593 113.57 103.516 cv
115.553 112.813 111.579 119.595 102.281 121.578 cv
93.6832 123.411 86.4928 119.74 84.3 109.455 cv
cp
f
128.608 105.472 mo
128.444 104.303 128.46 98.9226 128.448 94.8392 cv
128.532 85.1441 li
137.089 83.3196 li
142.101 94.122 li
143.247 96.672 144.42 99.9496 145.063 101.963 cv
145.269 101.92 li
145.038 100.033 144.827 95.6059 144.829 93.7975 cv
144.894 87.2472 li
142.631 87.7298 li
141.491 82.3812 li
153.257 79.8727 li
154.398 85.2213 li
152.135 85.7039 li
150.995 110.418 li
141.245 112.497 li
136.689 103.232 li
136.021 101.913 135.051 99.581 134.574 98.3509 cv
134.408 98.3859 li
134.507 99.6536 134.525 102.36 134.492 103.614 cv
134.086 114.023 li
124.542 116.058 li
114.122 93.8082 li
111.817 94.2991 li
110.677 88.9504 li
124.253 86.0563 li
125.393 91.4048 li
123.008 91.9136 li
125.357 97.6912 li
126.232 99.5703 127.975 104.316 128.401 105.516 cv
128.608 105.472 li
cp
f
162.99 98.9154 mo
165.911 98.2926 168.315 99.8877 168.815 102.232 cv
169.307 104.536 167.826 106.872 164.823 107.512 cv
162.15 108.083 159.686 106.415 159.23 104.275 cv
158.792 102.219 160.028 99.5472 162.99 98.9154 cv
cp
154.159 79.6808 mo
163.991 77.5842 li
165.658 85.4003 li
165.687 96.2334 li
160.257 97.3911 li
155.825 87.4968 li
154.159 79.6808 li
cp
f
192.317 380.801 mo
190.598 376.049 185.585 373.44 180.785 374.613 cv
178.734 373.899 176.435 373.856 174.233 374.652 cv
171.751 375.55 169.859 377.35 168.78 379.545 cv
168.049 379.672 167.318 379.852 166.596 380.113 cv
159.931 382.525 156.483 389.884 158.895 396.55 cv
161.307 403.215 168.665 406.664 175.331 404.252 cv
179.973 402.572 183.047 398.492 183.676 393.92 cv
184.596 393.865 185.524 393.685 186.435 393.355 cv
191.526 391.513 194.16 385.892 192.317 380.801 cv
cp
.109804 .054902 .00784314 rgb
f
84.967 361.293 mo
83.5451 358.412 81.1179 356.013 77.9094 354.703 cv
77.5675 354.563 77.2217 354.45 76.8758 354.34 cv
76.4421 351.412 74.5268 348.779 71.5872 347.579 cv
70.4391 347.111 69.2495 346.911 68.0846 346.943 cv
67.194 345.832 66.0196 344.925 64.6085 344.349 cv
60.1791 342.54 55.1227 344.665 53.3147 349.094 cv
52.8755 350.17 52.6726 351.282 52.6742 352.376 cv
51.5552 353.4 50.6322 354.672 50.021 356.169 cv
47.8142 361.574 50.4068 367.744 55.8118 369.951 cv
57.0423 370.454 58.3119 370.695 59.566 370.724 cv
60.6068 374.75 63.455 378.256 67.6015 379.949 cv
72.4448 381.927 77.7605 380.911 81.5116 377.773 cv
84.8386 377.681 87.9586 375.671 89.2973 372.391 cv
91.0467 368.106 89.1068 363.242 84.967 361.293 cv
cp
f
59.5661 266.174 mo
60.7925 263.517 60.6078 260.667 59.332 258.379 cv
59.4401 258.183 59.5497 257.988 59.6445 257.782 cv
60.7478 255.391 60.7057 252.846 59.7589 250.692 cv
60.1619 250.169 60.5172 249.602 60.8015 248.986 cv
62.8244 244.603 60.8191 239.657 56.3224 237.94 cv
52.917 236.639 49.0623 237.566 46.5118 239.995 cv
41.6764 240.043 36.9852 242.841 34.8781 247.407 cv
32.8019 251.905 33.8237 256.836 37.0572 260.016 cv
35.9354 264.042 37.8096 268.204 41.6701 270.005 cv
41.3164 270.531 40.9971 271.117 40.7013 271.758 cv
39.0224 275.396 40.6867 279.5 44.4186 280.925 cv
48.1506 282.351 52.5369 280.557 54.2159 276.919 cv
55.096 275.012 55.0822 272.881 54.3221 271.128 cv
56.5739 270.208 58.5001 268.484 59.5661 266.174 cv
cp
f
190.295 231.074 mo
191.457 226.872 188.992 222.524 184.79 221.362 cv
183.614 221.037 182.43 221.005 181.304 221.207 cv
180.319 219.217 178.533 217.636 176.229 216.991 cv
174.959 214.189 172.504 211.949 169.307 211.065 cv
163.592 209.485 157.679 212.835 156.096 218.548 cv
153.169 218.485 150.46 220.395 149.644 223.346 cv
148.68 226.833 150.725 230.442 154.213 231.406 cv
154.312 231.434 154.412 231.45 154.512 231.473 cv
154.224 234.311 156.006 237.027 158.848 237.813 cv
159.618 238.026 160.394 238.075 161.141 237.985 cv
162.051 240.016 163.826 241.64 166.138 242.28 cv
168.722 242.994 171.361 242.308 173.25 240.68 cv
173.786 241.042 174.385 241.328 175.042 241.51 cv
178.301 242.411 181.673 240.499 182.573 237.241 cv
182.609 237.113 182.632 236.985 182.659 236.857 cv
186.132 236.871 189.325 234.583 190.295 231.074 cv
cp
f
115.047 332.399 mo
115.088 332.327 115.126 332.252 115.167 332.179 cv
115.178 332.191 115.19 332.203 115.201 332.215 cv
115.148 332.275 115.099 332.339 115.047 332.399 cv
cp
187.951 325.305 mo
189.017 321.449 188.278 317.528 186.262 314.414 cv
187.996 312.783 189.328 310.683 190.009 308.221 cv
191.349 303.373 189.85 298.417 186.524 295.103 cv
186.618 294.805 186.713 294.508 186.797 294.204 cv
190.621 280.372 182.508 266.06 168.676 262.236 cv
165.329 261.311 161.955 261.09 158.707 261.475 cv
157.025 259.509 154.759 258.006 152.078 257.265 cv
150.739 256.895 149.392 256.741 148.072 256.782 cv
146.578 252.977 143.388 249.892 139.145 248.719 cv
134.92 247.551 130.617 248.546 127.385 251.02 cv
125.286 249.21 122.766 247.823 119.917 247.036 cv
109.617 244.188 98.9585 250.23 96.1111 260.53 cv
95.8533 261.463 95.6708 262.398 95.5553 263.33 cv
90.7707 263.401 86.4059 266.589 85.0665 271.434 cv
84.1277 274.83 84.8871 278.289 86.8217 280.924 cv
80.75 280.719 75.1009 284.66 73.4109 290.773 cv
72.1334 295.394 73.4398 300.11 76.4441 303.412 cv
73.6948 306.245 71.5962 309.787 70.4703 313.86 cv
66.8906 326.809 74.4859 340.208 87.4347 343.787 cv
88.7242 344.144 90.0178 344.385 91.306 344.525 cv
91.9095 349.816 95.6347 354.467 101.083 355.973 cv
105.588 357.218 110.189 356.015 113.477 353.169 cv
115.74 356.829 119.332 359.68 123.806 360.916 cv
130.531 362.775 137.42 360.489 141.759 355.602 cv
143.267 356.362 144.87 356.988 146.56 357.455 cv
160.391 361.279 174.704 353.166 178.528 339.334 cv
178.98 337.699 179.259 336.058 179.388 334.427 cv
183.423 333.025 186.726 329.734 187.951 325.305 cv
cp
f
144.797 346.488 mo
142.268 355.635 132.803 361 123.657 358.472 cv
114.51 355.943 109.145 346.478 111.673 337.332 cv
114.202 328.185 123.667 322.82 132.813 325.348 cv
141.96 327.877 147.325 337.342 144.797 346.488 cv
cp
.839216 .831373 .74902 rgb
f
176.806 337.51 mo
173.092 350.944 159.19 358.824 145.756 355.11 cv
132.322 351.396 124.442 337.495 128.155 324.061 cv
131.869 310.626 145.771 302.746 159.205 306.46 cv
172.64 310.174 180.52 324.075 176.806 337.51 cv
cp
f
184.838 293.676 mo
181.124 307.11 167.223 314.99 153.788 311.276 cv
140.354 307.562 132.474 293.661 136.188 280.227 cv
139.902 266.792 153.803 258.912 167.237 262.626 cv
180.672 266.34 188.552 280.241 184.838 293.676 cv
cp
f
155.644 301.204 mo
151.93 314.639 138.029 322.519 124.594 318.805 cv
111.16 315.091 103.28 301.19 106.994 287.755 cv
110.708 274.321 124.609 266.441 138.044 270.154 cv
151.478 273.868 159.358 287.77 155.644 301.204 cv
cp
f
117.661 344.558 mo
115.738 351.513 108.541 355.593 101.585 353.67 cv
94.6299 351.747 90.5501 344.55 92.4729 337.595 cv
94.3957 330.639 101.593 326.56 108.548 328.482 cv
115.504 330.405 119.583 337.602 117.661 344.558 cv
cp
f
147.667 265.572 mo
145.744 272.528 138.547 276.608 131.591 274.685 cv
124.636 272.762 120.556 265.565 122.479 258.609 cv
124.402 251.654 131.599 247.574 138.554 249.497 cv
145.51 251.42 149.59 258.617 147.667 265.572 cv
cp
f
160.228 273.873 mo
158.306 280.829 151.108 284.908 144.153 282.986 cv
137.198 281.063 133.118 273.866 135.041 266.91 cv
136.963 259.955 144.161 255.875 151.116 257.798 cv
158.071 259.721 162.151 266.918 160.228 273.873 cv
cp
f
187.957 307.29 mo
186.034 314.246 178.837 318.325 171.882 316.403 cv
164.926 314.48 160.846 307.283 162.769 300.327 cv
164.692 293.372 171.889 289.292 178.845 291.215 cv
185.8 293.138 189.88 300.335 187.957 307.29 cv
cp
f
185.958 323.884 mo
184.035 330.839 176.838 334.919 169.883 332.996 cv
162.927 331.073 158.847 323.876 160.77 316.921 cv
162.693 309.965 169.89 305.885 176.846 307.808 cv
183.801 309.731 187.881 316.928 185.958 323.884 cv
cp
f
137.633 325.381 mo
135.71 332.336 128.513 336.416 121.557 334.493 cv
114.602 332.57 110.522 325.373 112.445 318.417 cv
114.368 311.462 121.565 307.382 128.52 309.305 cv
135.476 311.228 139.556 318.425 137.633 325.381 cv
cp
f
115.921 293.751 mo
113.998 300.707 106.801 304.787 99.8458 302.864 cv
92.8904 300.941 88.8106 293.744 90.7334 286.788 cv
92.6562 279.833 99.8534 275.753 106.809 277.676 cv
113.764 279.599 117.844 286.796 115.921 293.751 cv
cp
f
132.986 270.985 mo
130.22 280.989 119.868 286.857 109.864 284.092 cv
99.8592 281.326 93.9911 270.974 96.7567 260.969 cv
99.5224 250.965 109.874 245.097 119.879 247.863 cv
129.883 250.628 135.751 260.98 132.986 270.985 cv
cp
f
99.8963 297.307 mo
97.9735 304.262 90.7763 308.342 83.821 306.419 cv
76.8656 304.496 72.7858 297.299 74.7086 290.344 cv
76.6314 283.388 83.8286 279.308 90.784 281.231 cv
97.7394 283.154 101.819 290.351 99.8963 297.307 cv
cp
f
106.732 277.283 mo
105.151 283 99.2358 286.353 93.519 284.773 cv
87.8022 283.193 84.449 277.277 86.0293 271.56 cv
87.6098 265.843 93.5253 262.49 99.2421 264.071 cv
104.959 265.651 108.312 271.566 106.732 277.283 cv
cp
f
117.397 325.358 mo
113.921 337.935 100.906 345.312 88.3295 341.835 cv
75.7527 338.358 68.3756 325.344 71.8524 312.767 cv
75.3293 300.19 88.3434 292.813 100.92 296.29 cv
113.497 299.767 120.874 312.781 117.397 325.358 cv
cp
f
130.799 266.767 mo
126.191 266.544 122.187 269.584 121.009 273.853 cv
123.542 271.751 126.837 270.552 130.383 270.723 cv
134.204 270.908 137.58 272.648 139.933 275.3 cv
139.393 270.685 135.594 266.998 130.799 266.767 cv
cp
111.064 277.324 mo
109.976 274.708 107.225 273.127 104.38 273.562 cv
104.035 270.375 101.799 267.563 98.5267 266.658 cv
94.2457 265.475 89.8006 267.995 88.6172 272.276 cv
88.3157 273.366 88.2571 274.467 88.4043 275.522 cv
88.4516 275.219 88.5122 274.915 88.5959 274.612 cv
89.7793 270.331 94.2245 267.811 98.5055 268.995 cv
100.989 269.681 102.873 271.468 103.791 273.681 cv
100.959 274.396 99.0629 276.953 99.0865 279.769 cv
100.284 278.019 102.114 276.695 104.341 276.175 cv
106.74 275.615 109.138 276.097 111.064 277.324 cv
cp
124.06 277.798 mo
120.013 275.967 115.232 277.769 113.401 281.815 cv
113.2 282.258 113.052 282.711 112.938 283.166 cv
112.817 283.14 112.697 283.111 112.574 283.089 cv
108.934 282.448 105.416 283.977 103.32 286.734 cv
105.832 284.954 109.018 284.129 112.285 284.704 cv
112.425 284.729 112.563 284.759 112.702 284.788 cv
112.699 284.856 112.689 284.923 112.688 284.99 cv
112.709 284.926 112.733 284.863 112.754 284.799 cv
115.824 285.467 118.37 287.28 120.039 289.704 cv
119.102 286.656 116.671 284.178 113.457 283.293 cv
115.531 279.839 119.919 278.402 123.677 280.103 cv
126.693 281.468 128.459 284.471 128.407 287.587 cv
129.637 283.748 127.82 279.5 124.06 277.798 cv
cp
98.8573 265.142 mo
101.224 256.58 110.115 251.54 118.676 253.907 cv
121.375 254.653 123.722 256.049 125.599 257.877 cv
125.392 258.342 125.206 258.82 125.067 259.325 cv
124.93 259.819 124.845 260.314 124.783 260.808 cv
125.156 259.962 125.635 259.188 126.197 258.491 cv
126.737 257.82 127.359 257.228 128.038 256.716 cv
130.523 254.843 133.812 254.094 137.037 254.986 cv
140.147 255.846 142.528 258.043 143.743 260.783 cv
140.857 261.956 138.521 264.397 137.629 267.626 cv
137.478 268.17 137.387 268.716 137.327 269.26 cv
138.703 266.257 141.413 264.151 144.525 263.457 cv
144.804 263.395 145.086 263.345 145.371 263.306 cv
146.72 263.121 148.124 263.192 149.518 263.577 cv
150.969 263.978 152.255 264.676 153.344 265.577 cv
149.191 266.978 145.487 269.569 142.75 273.058 cv
146.256 270.057 150.642 268.165 155.3 267.716 cv
156.068 267.642 156.842 267.606 157.622 267.612 cv
159.549 267.627 161.504 267.887 163.448 268.424 cv
174.826 271.569 181.754 282.944 179.595 294.342 cv
179.479 294.952 179.345 295.562 179.176 296.171 cv
179.114 296.395 179.043 296.614 178.975 296.835 cv
178.142 299.524 176.85 301.953 175.201 304.054 cv
177.226 302.321 178.955 300.218 180.277 297.815 cv
183.181 300.36 184.558 304.425 183.462 308.39 cv
183.07 309.807 182.398 311.071 181.526 312.146 cv
183.332 310.815 184.726 308.9 185.369 306.575 cv
186.557 302.279 184.843 297.865 181.426 295.396 cv
181.743 294.609 182.019 293.797 182.25 292.96 cv
185.564 280.974 178.508 268.527 166.522 265.214 cv
163.095 264.267 159.632 264.169 156.355 264.789 cv
155.022 262.712 152.961 261.093 150.401 260.386 cv
148.67 259.907 146.919 259.899 145.283 260.283 cv
144.601 256.47 141.815 253.184 137.839 252.085 cv
133.779 250.962 129.61 252.431 127.08 255.48 cv
125.068 253.131 122.363 251.335 119.163 250.45 cv
110.602 248.084 101.711 253.123 99.3444 261.685 cv
98.9941 262.952 98.81 264.226 98.7716 265.485 cv
98.8007 265.371 98.8257 265.256 98.8573 265.142 cv
cp
183.37 323.168 mo
184.895 317.651 181.648 311.921 176.13 310.396 cv
172.47 309.384 168.723 310.482 166.165 312.941 cv
168.533 311.493 171.464 310.98 174.344 311.776 cv
179.861 313.301 183.109 319.03 181.583 324.548 cv
181.07 326.405 180.073 327.995 178.776 329.243 cv
180.945 327.916 182.641 325.806 183.37 323.168 cv
cp
154.184 286.336 mo
153.519 282.926 151.022 279.995 147.46 278.97 cv
143.908 277.948 140.248 279.096 137.872 281.616 cv
140.559 280.112 143.814 279.628 147.001 280.545 cv
150.201 281.466 152.709 283.619 154.184 286.336 cv
cp
83.1136 282.843 mo
79.5589 283.856 77.0611 286.767 76.3788 290.163 cv
77.8623 287.465 80.3683 285.331 83.5584 284.422 cv
86.761 283.51 90.0283 284.01 92.7173 285.535 cv
90.3485 282.993 86.6786 281.828 83.1136 282.843 cv
cp
110.176 255.602 mo
106.621 256.615 104.123 259.526 103.441 262.922 cv
104.924 260.223 107.43 258.09 110.62 257.181 cv
113.823 256.269 117.09 256.769 119.779 258.294 cv
117.411 255.752 113.741 254.587 110.176 255.602 cv
cp
171.985 275.505 mo
175.048 279.119 175.629 284.005 173.921 288.104 cv
174.277 284.169 173.134 280.102 170.382 276.856 cv
167.64 273.623 163.834 271.832 159.911 271.53 cv
164.223 270.531 168.93 271.902 171.985 275.505 cv
cp
.882353 .933333 .937255 rgb
f
103.43 348.194 mo
99.3086 347.054 96.3147 343.841 95.2434 339.994 cv
98.5082 339.894 101.662 339.022 104.476 337.52 cv
105.284 338.22 106.181 338.844 107.169 339.362 cv
109.284 340.469 111.551 340.982 113.782 340.968 cv
113.676 342.598 113.841 344.206 114.262 345.733 cv
111.385 348.221 107.362 349.281 103.43 348.194 cv
cp
174.247 324.918 mo
174.596 327.763 174.41 330.718 173.6 333.647 cv
170.287 345.633 157.84 352.689 145.854 349.376 cv
144.328 348.954 142.885 348.382 141.531 347.684 cv
140.873 347.345 140.242 346.969 139.628 346.571 cv
135.546 343.928 132.47 340.052 130.78 335.602 cv
136.075 336.175 141.202 333.682 144.062 329.316 cv
139.808 332.399 134.245 333.593 128.787 332.084 cv
125.38 331.142 122.481 329.272 120.278 326.827 cv
124.346 327.613 128.623 326.81 132.147 324.509 cv
126.279 325.788 119.906 324.488 114.883 320.406 cv
110.812 317.099 108.346 312.549 107.583 307.747 cv
106.404 313.449 108.363 319.595 113.194 323.52 cv
114.99 324.979 117.007 325.981 119.104 326.553 cv
120.637 330.619 124.017 333.925 128.526 335.172 cv
129.166 335.348 129.807 335.468 130.447 335.553 cv
131.526 340.502 134.252 344.988 138.181 348.221 cv
134.607 351.72 129.32 353.284 124.162 351.858 cv
118.803 350.377 114.988 346.051 113.871 340.964 cv
117.477 340.917 120.983 339.489 123.591 336.917 cv
118.782 339.033 113.092 339.025 108.076 336.399 cv
104.012 334.27 101.108 330.798 99.6195 326.813 cv
99.6028 330.835 101.318 334.749 104.414 337.464 cv
100.883 338.121 97.1572 338.019 93.469 336.999 cv
81.4681 333.681 74.0344 321.918 75.7972 309.902 cv
75.2472 311.034 74.7872 312.227 74.4403 313.482 cv
71.3634 324.612 77.915 336.17 89.0449 339.247 cv
90.9536 339.775 92.874 340.013 94.7625 339.999 cv
94.2413 344.951 97.3454 349.713 102.301 351.083 cv
107.119 352.415 112.087 350.098 114.287 345.816 cv
115.618 350.541 119.305 354.483 124.372 355.884 cv
130.604 357.607 137.029 354.968 140.385 349.819 cv
142.224 350.99 144.263 351.912 146.472 352.522 cv
158.458 355.836 170.905 348.78 174.218 336.794 cv
175.332 332.766 175.269 328.687 174.247 324.918 cv
cp
.698039 .690196 .607843 rgb
f
86.982 310.433 mo
89.5244 313.816 93.8916 315.017 97.6861 313.699 cv
94.1462 313.595 90.6847 311.943 88.3919 308.892 cv
86.5339 306.419 85.7716 303.464 86.0195 300.608 cv
84.5318 303.702 84.7769 307.498 86.982 310.433 cv
cp
f
148.87 323.581 mo
153.081 323.158 156.37 320.043 157.207 316.115 cv
155.285 319.089 152.079 321.195 148.282 321.577 cv
145.204 321.887 142.282 321.009 139.967 319.319 cv
141.844 322.193 145.218 323.949 148.87 323.581 cv
cp
f
167.1 337.895 mo
171.414 332.159 171.312 324.478 167.376 318.919 cv
168.874 324.734 167.815 331.151 163.925 336.325 cv
160.773 340.517 156.32 343.152 151.55 344.095 cv
157.292 345.059 163.36 342.871 167.1 337.895 cv
cp
f
242.014 306.165 mo
242.443 302.036 240.661 298.195 237.633 295.794 cv
237.654 295.655 237.683 295.519 237.697 295.378 cv
238.176 290.77 235.017 286.628 230.541 285.794 cv
230.034 282.697 227.517 280.193 224.245 279.853 cv
220.327 279.446 216.82 282.293 216.413 286.211 cv
216.273 287.557 216.524 288.851 217.064 289.991 cv
214.197 291.848 212.162 294.934 211.782 298.595 cv
211.417 302.106 212.653 305.408 214.89 307.796 cv
214.385 308.663 214.047 309.644 213.937 310.706 cv
213.699 312.992 214.547 315.137 216.06 316.639 cv
216.051 316.708 216.035 316.773 216.028 316.842 cv
215.612 320.85 218.523 324.436 222.53 324.853 cv
226.538 325.269 230.124 322.358 230.541 318.351 cv
230.601 317.77 230.584 317.2 230.511 316.645 cv
236.377 316.587 241.393 312.139 242.014 306.165 cv
cp
.109804 .054902 .00784314 rgb
f
229.007 315.565 mo
222.894 314.93 218.454 309.459 219.089 303.346 cv
219.724 297.233 225.195 292.792 231.308 293.428 cv
237.421 294.063 241.862 299.534 241.227 305.647 cv
240.591 311.76 235.121 316.201 229.007 315.565 cv
cp
.839216 .831373 .74902 rgb
f
222.375 310.662 mo
216.261 310.027 211.821 304.556 212.456 298.443 cv
213.092 292.33 218.562 287.889 224.675 288.524 cv
230.789 289.16 235.229 294.631 234.594 300.744 cv
233.959 306.857 228.488 311.298 222.375 310.662 cv
cp
f
222.913 294.111 mo
219.184 293.724 216.476 290.387 216.863 286.657 cv
217.251 282.928 220.588 280.22 224.317 280.607 cv
228.046 280.995 230.755 284.332 230.367 288.061 cv
229.98 291.79 226.642 294.499 222.913 294.111 cv
cp
f
227.893 302.87 mo
223.278 302.39 219.925 298.259 220.405 293.644 cv
220.884 289.028 225.015 285.676 229.63 286.155 cv
234.246 286.635 237.599 290.766 237.119 295.381 cv
236.639 299.997 232.509 303.349 227.893 302.87 cv
cp
f
222.685 323.431 mo
218.871 323.034 216.101 319.621 216.497 315.808 cv
216.894 311.994 220.307 309.224 224.12 309.62 cv
227.934 310.016 230.704 313.429 230.308 317.243 cv
229.912 321.057 226.499 323.827 222.685 323.431 cv
cp
f
220.695 317.591 mo
216.881 317.195 214.111 313.782 214.507 309.968 cv
214.903 306.154 218.316 303.384 222.13 303.78 cv
225.944 304.177 228.714 307.59 228.318 311.404 cv
227.921 315.217 224.509 317.988 220.695 317.591 cv
cp
f
234.496 289.858 mo
233.252 288.326 231.487 287.37 229.525 287.167 cv
229.476 287.162 229.427 287.161 229.378 287.156 cv
229.336 285.907 228.898 284.709 228.096 283.722 cv
227.125 282.525 225.745 281.778 224.212 281.618 cv
223.696 281.565 223.178 281.58 222.672 281.663 cv
220.116 282.084 218.143 284.181 217.874 286.762 cv
217.792 287.55 217.873 288.329 218.1 289.063 cv
218.092 288.8 218.094 288.534 218.122 288.267 cv
218.391 285.686 220.364 283.589 222.92 283.168 cv
223.426 283.085 223.944 283.07 224.46 283.123 cv
225.993 283.283 227.373 284.03 228.344 285.227 cv
228.816 285.808 229.161 286.462 229.377 287.156 cv
228.766 287.105 228.154 287.126 227.556 287.224 cv
224.284 287.763 221.759 290.447 221.417 293.749 cv
221.32 294.681 221.403 295.603 221.645 296.48 cv
221.621 296.075 221.622 295.666 221.664 295.254 cv
222.007 291.951 224.532 289.268 227.804 288.729 cv
228.451 288.622 229.113 288.603 229.773 288.672 cv
231.735 288.875 233.5 289.831 234.744 291.363 cv
235.397 292.167 235.859 293.081 236.127 294.05 cv
236.034 292.525 235.478 291.068 234.496 289.858 cv
cp
.882353 .933333 .937255 rgb
f
239.912 303.703 mo
239.442 308.224 235.985 311.898 231.506 312.636 cv
230.62 312.782 229.712 312.809 228.809 312.715 cv
226.123 312.436 223.706 311.127 222.004 309.03 cv
221.08 307.892 220.438 306.594 220.078 305.217 cv
220.221 307.274 220.981 309.235 222.307 310.869 cv
224.009 312.966 226.426 314.275 229.112 314.554 cv
230.016 314.648 230.923 314.621 231.809 314.475 cv
236.289 313.737 239.745 310.064 240.215 305.542 cv
240.344 304.301 240.231 303.093 239.932 301.951 cv
239.972 302.526 239.974 303.11 239.912 303.703 cv
cp
.698039 .690196 .607843 rgb
f
228.911 314.797 mo
228.636 317.447 226.61 319.6 223.985 320.033 cv
223.465 320.118 222.934 320.134 222.404 320.079 cv
220.112 319.841 218.263 318.316 217.488 316.299 cv
217.369 319.391 219.67 322.095 222.79 322.42 cv
223.319 322.474 223.851 322.459 224.371 322.374 cv
226.996 321.941 229.021 319.788 229.297 317.138 cv
229.396 316.18 229.256 315.254 228.932 314.411 cv
228.927 314.54 228.925 314.668 228.911 314.797 cv
cp
f
224.402 294.326 mo
226.679 293.105 229.477 293.828 230.896 295.919 cv
230.798 295.516 230.654 295.118 230.449 294.736 cv
229.145 292.303 226.115 291.387 223.682 292.692 cv
221.248 293.997 220.333 297.027 221.637 299.46 cv
221.721 299.616 221.813 299.766 221.911 299.91 cv
221.385 297.75 222.351 295.425 224.402 294.326 cv
cp
.882353 .933333 .937255 rgb
f
176.296 223.941 mo
174.818 229.286 169.287 232.421 163.941 230.944 cv
158.596 229.466 155.461 223.935 156.938 218.589 cv
158.416 213.244 163.947 210.109 169.293 211.586 cv
174.638 213.064 177.773 218.595 176.296 223.941 cv
cp
.839216 .831373 .74902 rgb
f
162.715 226.333 mo
161.814 229.594 158.44 231.507 155.179 230.605 cv
151.919 229.704 150.006 226.33 150.907 223.069 cv
151.809 219.808 155.183 217.896 158.444 218.797 cv
161.704 219.699 163.617 223.073 162.715 226.333 cv
cp
f
181.029 226.447 mo
179.914 230.483 175.738 232.85 171.702 231.735 cv
167.666 230.619 165.299 226.443 166.415 222.407 cv
167.53 218.371 171.706 216.004 175.742 217.12 cv
179.778 218.236 182.145 222.412 181.029 226.447 cv
cp
f
175.224 235.73 mo
174.161 239.578 170.178 241.836 166.329 240.772 cv
162.481 239.708 160.223 235.726 161.287 231.877 cv
162.351 228.028 166.334 225.771 170.182 226.835 cv
174.031 227.899 176.288 231.881 175.224 235.73 cv
cp
f
181.697 236.06 mo
180.854 239.107 177.701 240.895 174.655 240.052 cv
171.608 239.21 169.821 236.057 170.663 233.01 cv
171.505 229.963 174.658 228.176 177.705 229.018 cv
180.752 229.861 182.539 233.014 181.697 236.06 cv
cp
f
188.916 230.295 mo
187.83 234.224 183.765 236.528 179.836 235.442 cv
175.907 234.356 173.603 230.29 174.689 226.361 cv
175.775 222.433 179.84 220.128 183.769 221.214 cv
187.698 222.3 190.003 226.366 188.916 230.295 cv
cp
f
166.37 232.709 mo
165.55 235.676 162.48 237.416 159.514 236.596 cv
156.547 235.776 154.807 232.706 155.627 229.739 cv
156.447 226.773 159.517 225.032 162.484 225.853 cv
165.45 226.673 167.191 229.742 166.37 232.709 cv
cp
f
185.315 233.094 mo
183.679 234.145 181.512 234.384 179.27 233.613 cv
179.787 233.351 180.279 232.973 180.763 232.477 cv
181.461 231.76 181.902 230.887 182.089 229.973 cv
181.859 230.451 181.55 230.901 181.159 231.301 cv
179.55 232.952 176.958 233.663 174.049 232.932 cv
176.042 234.036 177.552 234.287 178.874 233.787 cv
179.54 234.288 180.167 234.63 180.771 234.829 cv
179.961 237.406 177.24 238.903 174.616 238.177 cv
174.22 238.068 173.85 237.912 173.506 237.72 cv
173.467 237.699 173.427 237.677 173.388 237.654 cv
172.301 237.009 171.509 235.982 171.143 234.803 cv
171.212 236.082 171.77 237.281 172.676 238.16 cv
171.18 239.083 169.32 239.41 167.495 238.905 cv
165.628 238.389 164.174 237.109 163.374 235.497 cv
163.331 235.41 163.292 235.322 163.253 235.233 cv
163.859 235.528 164.566 235.68 165.386 235.718 cv
166.385 235.764 167.331 235.514 168.138 235.046 cv
167.628 235.191 167.086 235.259 166.528 235.233 cv
164.225 235.127 161.972 233.663 160.585 231.002 cv
161.013 232.907 161.671 234.132 162.637 234.857 cv
162.362 234.895 162.082 234.911 161.798 234.9 cv
161.427 234.887 161.053 234.832 160.68 234.729 cv
158.556 234.142 157.147 232.235 157.091 230.139 cv
158.896 230.044 160.56 229.05 161.491 227.488 cv
160.358 228.53 158.806 229.073 157.217 228.902 cv
157.056 228.885 156.894 228.862 156.733 228.83 cv
156.603 228.804 156.474 228.774 156.345 228.738 cv
153.45 227.938 151.746 224.932 152.546 222.037 cv
152.679 221.557 152.874 221.11 153.117 220.701 cv
152.394 221.367 151.842 222.235 151.561 223.25 cv
150.761 226.145 152.465 229.151 155.36 229.951 cv
155.65 230.032 155.942 230.085 156.232 230.116 cv
155.64 232.656 157.159 235.241 159.694 235.942 cv
160.503 236.166 161.32 236.17 162.086 235.994 cv
162.779 237.938 164.374 239.528 166.51 240.118 cv
168.882 240.774 171.313 240.028 172.928 238.387 cv
173.467 238.845 174.11 239.198 174.835 239.398 cv
177.517 240.14 180.301 238.561 181.043 235.88 cv
181.129 235.569 181.18 235.257 181.205 234.947 cv
182.375 235.201 183.481 234.911 184.665 234.15 cv
185.507 233.609 186.132 232.857 186.52 232.008 cv
186.188 232.422 185.786 232.791 185.315 233.094 cv
cp
.698039 .690196 .607843 rgb
f
175.791 219.612 mo
175.804 219.619 175.819 219.624 175.832 219.63 cv
177.082 220.24 178.09 221.202 178.763 222.359 cv
178.769 222.369 178.774 222.379 178.78 222.389 cv
178.19 222.316 177.6 222.341 177.029 222.452 cv
176.891 221.412 176.464 220.425 175.791 219.612 cv
cp
183.588 221.868 mo
182.413 221.543 181.222 221.556 180.119 221.844 cv
179.34 219.922 177.71 218.368 175.561 217.774 cv
175.464 217.747 175.366 217.722 175.268 217.7 cv
174.202 215.121 172.004 213.04 169.112 212.24 cv
164.135 210.865 158.968 213.794 157.592 218.77 cv
157.57 218.849 157.552 218.928 157.532 219.007 cv
155.926 218.877 154.431 219.658 153.595 220.944 cv
153.625 220.93 153.656 220.918 153.687 220.905 cv
154.683 220.054 155.999 219.588 157.388 219.694 cv
157.504 219.703 157.62 219.714 157.737 219.731 cv
157.812 219.742 157.887 219.756 157.961 219.77 cv
158.059 219.553 158.167 219.342 158.279 219.135 cv
160.315 215.405 164.723 213.415 168.991 214.595 cv
170.854 215.11 172.429 216.158 173.6 217.526 cv
173.805 217.767 173.997 218.018 174.178 218.278 cv
174.055 218.211 173.929 218.148 173.8 218.089 cv
171.778 217.171 169.499 217.56 167.901 218.893 cv
167.879 218.884 167.859 218.874 167.836 218.865 cv
164.609 217.617 161.09 218.451 158.757 220.71 cv
158.823 220.698 158.889 220.688 158.954 220.676 cv
161.475 219.356 164.529 219.086 167.392 220.193 cv
170.245 221.296 172.318 223.539 173.299 226.2 cv
173.082 223.491 171.582 220.98 169.184 219.531 cv
169.947 219.276 171.308 218.985 173.153 219.287 cv
174.902 219.574 176.219 220.94 176.868 222.483 cv
175.973 222.684 175.133 223.103 174.431 223.709 cv
174.474 223.703 174.517 223.699 174.561 223.694 cv
176.249 222.929 178.244 222.867 180.064 223.693 cv
181.878 224.517 183.143 226.052 183.682 227.819 cv
183.637 225.872 182.577 224.021 180.785 223.038 cv
181.598 222.951 182.44 223.01 183.275 223.241 cv
186.506 224.134 188.531 227.26 188.145 230.491 cv
188.188 230.367 188.227 230.242 188.263 230.114 cv
189.247 226.552 187.15 222.853 183.588 221.868 cv
cp
.882353 .933333 .937255 rgb
f
50.0394 253.647 mo
54.54 255.366 56.5471 260.316 54.5225 264.703 cv
52.4978 269.09 47.208 271.253 42.7074 269.534 cv
38.2068 267.815 36.1998 262.865 38.2244 258.478 cv
40.2491 254.091 45.5389 251.928 50.0394 253.647 cv
cp
.839216 .831373 .74902 rgb
f
54.7281 246.613 mo
59.2287 248.332 61.2359 253.282 59.2112 257.669 cv
57.1865 262.056 51.8967 264.219 47.3961 262.5 cv
42.8956 260.781 40.8885 255.831 42.9132 251.444 cv
44.9378 247.057 50.2276 244.894 54.7281 246.613 cv
cp
f
54.6538 254.586 mo
59.1544 256.305 61.1615 261.255 59.1368 265.642 cv
57.1121 270.029 51.8224 272.192 47.3218 270.473 cv
42.8212 268.754 40.8141 263.804 42.8388 259.417 cv
44.8635 255.03 50.1532 252.867 54.6538 254.586 cv
cp
f
50.5219 267.141 mo
54.1801 268.152 55.6487 272.394 54.0537 275.85 cv
52.4586 279.307 48.2914 281.01 44.7459 279.656 cv
41.2003 278.302 39.6191 274.402 41.2142 270.946 cv
42.8092 267.49 45.0652 265.632 50.5219 267.141 cv
cp
f
51.0459 241.53 mo
56.8985 243.765 59.5085 250.202 56.8756 255.906 cv
54.2427 261.611 47.364 264.424 41.5115 262.189 cv
35.659 259.953 33.049 253.517 35.6819 247.812 cv
38.3147 242.107 45.1935 239.294 51.0459 241.53 cv
cp
f
56.0551 238.818 mo
60.3271 240.449 62.2323 245.148 60.3104 249.312 cv
58.3886 253.476 53.3674 255.53 49.0953 253.898 cv
44.8232 252.266 42.918 247.568 44.8399 243.403 cv
46.7618 239.239 51.783 237.186 56.0551 238.818 cv
cp
f
55.9143 255.539 mo
58.1153 250.77 56.3073 245.362 51.709 242.96 cv
51.3577 242.776 50.989 242.61 50.6134 242.466 cv
49.7134 242.123 52.4482 240.272 55.6186 241.376 cv
59.0965 242.587 60.1206 246.867 58.5739 250.219 cv
58.559 250.251 58.5403 250.281 58.5251 250.312 cv
58.8446 249.888 59.124 249.432 59.349 248.945 cv
60.8958 245.592 59.626 241.791 56.3938 240.102 cv
56.1467 239.973 55.8869 239.856 55.6223 239.755 cv
52.6497 238.619 49.2576 239.534 47.1482 241.789 cv
42.99 241.663 38.8764 243.917 36.8887 247.71 cv
39.0235 244.739 42.5795 242.999 46.1903 243.049 cv
46.2541 243.05 46.3178 243.054 46.3816 243.056 cv
47.5459 243.092 48.7133 243.311 49.8382 243.741 cv
50.2138 243.884 50.5825 244.05 50.9339 244.234 cv
55.5322 246.636 57.3401 252.045 55.1392 256.813 cv
55.0646 256.974 54.9755 257.126 54.8935 257.282 cv
55.2829 256.74 55.628 256.159 55.9143 255.539 cv
cp
.882353 .933333 .937255 rgb
f
53.5207 275.896 mo
52.7054 276.752 51.6773 277.396 50.5122 277.749 cv
48.8357 278.257 47.0861 278.114 45.5878 277.345 cv
45.3684 277.232 45.1587 277.101 44.9534 276.97 cv
40.6101 274.195 44.0988 269.332 44.5804 269.404 cv
46.0252 269.621 47.5261 269.442 48.9394 268.864 cv
50.0303 268.418 50.9891 267.76 51.78 266.95 cv
51.2282 267.353 50.6265 267.699 49.9746 267.966 cv
48.0061 268.771 45.8654 268.81 43.9455 268.077 cv
43.6648 267.969 43.3895 267.846 43.1269 267.708 cv
40.0734 266.113 38.6749 262.74 39.5633 259.509 cv
39.8705 259.722 40.1897 259.924 40.5321 260.103 cv
44.0564 261.944 48.3776 261.341 51.4199 258.91 cv
48.2836 260.132 44.6867 260.078 41.6024 258.466 cv
38.3951 256.79 36.4571 253.803 36.0604 250.536 cv
35.3574 253.733 36.4607 257.019 39.0207 259.102 cv
39.0004 259.143 38.9752 259.181 38.9557 259.223 cv
37.3144 262.781 38.6625 266.815 42.0917 268.607 cv
42.3542 268.744 42.6296 268.868 42.9103 268.975 cv
42.9843 269.003 43.0607 269.023 43.1355 269.049 cv
42.8098 269.4 42.5109 269.781 42.2612 270.206 cv
40.6022 273.036 41.3364 276.509 43.9699 278.284 cv
44.1715 278.42 44.3848 278.546 44.6042 278.659 cv
46.1026 279.428 47.8521 279.571 49.5287 279.063 cv
51.206 278.554 52.6105 277.454 53.4839 275.966 cv
53.4974 275.943 53.5076 275.919 53.5207 275.896 cv
cp
.698039 .690196 .607843 rgb
f
49.1385 248.218 mo
51.7584 248.627 53.4909 250.877 53.2151 253.376 cv
53.4073 253 53.5596 252.6 53.6533 252.176 cv
54.2491 249.477 52.462 246.936 49.6616 246.5 cv
46.8612 246.063 44.108 247.897 43.5121 250.595 cv
43.4737 250.769 43.446 250.942 43.4271 251.114 cv
44.4569 249.098 46.7782 247.851 49.1385 248.218 cv
cp
.882353 .933333 .937255 rgb
f
182.638 387.043 mo
184.843 393.138 181.69 399.867 175.595 402.072 cv
169.501 404.277 162.772 401.124 160.567 395.03 cv
158.361 388.935 161.514 382.206 167.609 380.001 cv
173.704 377.796 180.432 380.948 182.638 387.043 cv
cp
.839216 .831373 .74902 rgb
f
191.127 380.63 mo
192.811 385.285 190.403 390.424 185.748 392.109 cv
181.093 393.793 175.954 391.385 174.269 386.73 cv
172.585 382.075 174.993 376.936 179.648 375.251 cv
184.303 373.567 189.442 375.975 191.127 380.63 cv
cp
f
186.07 380.386 mo
187.755 385.041 185.347 390.181 180.692 391.865 cv
176.036 393.549 170.897 391.141 169.213 386.486 cv
167.529 381.831 169.937 376.692 174.592 375.008 cv
179.247 373.323 184.386 375.731 186.07 380.386 cv
cp
f
174.338 398.596 mo
169.372 400.393 163.908 398.103 161.638 393.463 cv
161.725 393.819 161.829 394.174 161.957 394.527 cv
163.881 399.845 169.774 402.606 175.092 400.682 cv
179.234 399.183 181.812 395.277 181.847 391.11 cv
181.526 391.073 181.21 391.012 180.898 390.934 cv
180.22 394.343 177.837 397.33 174.338 398.596 cv
cp
.698039 .690196 .607843 rgb
f
187.763 378.177 mo
187.963 378.533 188.144 378.903 188.287 379.299 cv
189.691 383.18 187.676 387.48 183.795 388.884 cv
183.105 389.134 182.403 389.273 181.705 389.315 cv
181.808 389.915 181.852 390.515 181.847 391.11 cv
182.961 391.241 184.12 391.126 185.245 390.718 cv
189.126 389.314 191.141 385.014 189.737 381.133 cv
189.313 379.963 188.623 378.966 187.763 378.177 cv
cp
f
176.183 387.349 mo
177.212 389.176 178.943 390.443 180.898 390.934 cv
181.004 390.401 181.074 389.86 181.094 389.312 cv
179.269 389.271 177.518 388.573 176.183 387.349 cv
cp
f
181.094 389.312 mo
181.074 389.86 181.004 390.401 180.898 390.934 cv
181.21 391.012 181.526 391.073 181.847 391.11 cv
181.852 390.515 181.808 389.915 181.705 389.315 cv
181.5 389.327 181.298 389.317 181.094 389.312 cv
cp
f
63.7946 350.513 mo
68.8456 352.575 71.2684 358.341 69.2061 363.392 cv
67.1439 368.443 61.3774 370.866 56.3265 368.804 cv
51.2755 366.741 48.8527 360.975 50.9149 355.924 cv
52.9772 350.873 58.7436 348.45 63.7946 350.513 cv
cp
.839216 .831373 .74902 rgb
f
76.9769 354.554 mo
83.4919 357.214 86.6171 364.652 83.957 371.167 cv
81.297 377.682 73.8591 380.807 67.3441 378.147 cv
60.829 375.487 57.7039 368.049 60.3639 361.534 cv
63.024 355.019 70.4618 351.894 76.9769 354.554 cv
cp
f
71.0687 347.897 mo
75.208 349.587 77.1938 354.312 75.5042 358.451 cv
73.8147 362.59 69.0895 364.575 64.9502 362.886 cv
60.8109 361.196 58.8251 356.471 60.5147 352.332 cv
62.2043 348.193 66.9294 346.207 71.0687 347.897 cv
cp
f
83.1833 360.53 mo
87.3225 362.22 89.3084 366.945 87.6188 371.084 cv
85.9293 375.223 81.204 377.208 77.0648 375.519 cv
72.9255 373.829 70.9397 369.104 72.6293 364.965 cv
74.3189 360.826 79.044 358.84 83.1833 360.53 cv
cp
f
64.5471 344.878 mo
68.6863 346.568 70.6722 351.293 68.9826 355.432 cv
67.293 359.571 62.5677 361.556 58.4285 359.867 cv
54.2893 358.177 52.3035 353.451 53.993 349.313 cv
55.6826 345.174 60.4078 343.188 64.5471 344.878 cv
cp
f
82.2124 371.597 mo
81.0247 373.159 79.4525 374.397 77.5952 375.177 cv
74.8024 376.351 71.7203 376.366 68.9156 375.221 cv
67.9543 374.828 67.0557 374.311 66.2449 373.682 cv
64.6098 372.414 63.4101 370.751 62.6824 368.912 cv
65.5335 370.249 68.9385 369.777 71.314 367.686 cv
68.4242 368.93 64.9643 368.609 62.3024 366.545 cv
59.6403 364.48 58.4684 361.209 58.9542 358.101 cv
57.546 360.872 57.8963 364.217 59.8086 366.636 cv
59.1717 366.537 58.5411 366.373 57.9291 366.123 cv
57.2105 365.83 56.5394 365.443 55.9329 364.972 cv
52.9406 362.652 51.8519 358.58 53.2851 355.07 cv
53.4705 354.616 53.6982 354.188 53.9525 353.78 cv
53.2181 354.543 52.6244 355.443 52.212 356.453 cv
50.7788 359.964 51.8675 364.036 54.8598 366.356 cv
55.4663 366.827 56.1373 367.214 56.8559 367.507 cv
58.1795 368.047 59.5856 368.24 60.9679 368.089 cv
61.4036 370.884 62.8648 373.498 65.2029 375.311 cv
66.0136 375.94 66.9122 376.458 67.8735 376.85 cv
70.6783 377.995 73.7604 377.98 76.5532 376.806 cv
79.0182 375.771 80.9946 373.941 82.2124 371.597 cv
cp
.698039 .690196 .607843 rgb
f
138.49 281.314 mo
137.811 281.014 li
146.022 262.474 152.362 243.404 154.06 236.353 cv
154.783 236.527 li
153.078 243.605 146.721 262.734 138.49 281.314 cv
cp
.109804 .054902 .00784314 rgb
f
142.785 278.038 mo
142.128 277.688 li
146.607 269.314 156.376 250.301 160.697 241.193 cv
161.368 241.511 li
157.044 250.629 147.266 269.658 142.785 278.038 cv
cp
f
147.303 274.687 mo
146.674 274.29 li
153.938 262.778 165.885 247.331 168.984 243.892 cv
169.536 244.39 li
166.45 247.815 154.546 263.207 147.303 274.687 cv
cp
f
103.333 291.082 mo
84.8308 282.793 65.7885 276.371 58.7417 274.645 cv
58.9187 273.923 li
65.9899 275.655 85.0919 282.096 103.637 290.404 cv
103.333 291.082 li
cp
f
107.401 287.186 mo
95.7274 280.88 69.362 266.97 63.9785 264.388 cv
64.3002 263.718 li
69.6911 266.303 96.0747 280.223 107.755 286.532 cv
107.401 287.186 li
cp
f
104.978 280.9 mo
93.2319 273.419 66.8883 254.078 63.674 251.158 cv
64.1741 250.608 li
67.3759 253.517 93.6528 272.806 105.377 280.273 cv
104.978 280.9 li
cp
f
167.95 303.687 mo
167.859 302.949 li
185.566 300.751 200.666 296.556 212.74 290.479 cv
213.075 291.143 li
200.924 297.258 185.742 301.479 167.95 303.687 cv
cp
f
162.542 306.851 mo
162.599 306.11 li
172.731 306.889 188.307 304.918 199.681 303.478 cv
203.391 303.009 206.594 302.604 209.05 302.363 cv
209.123 303.103 li
206.677 303.342 203.478 303.747 199.774 304.216 cv
188.369 305.659 172.749 307.636 162.542 306.851 cv
cp
f
168.719 309.488 mo
168.756 308.745 li
191.288 309.84 209.317 313.271 211.298 313.659 cv
211.155 314.387 li
209.179 314.002 191.2 310.58 168.719 309.488 cv
cp
f
181.061 371.325 mo
171.787 362.49 161.869 352.407 151.557 334.982 cv
152.197 334.603 li
162.468 351.96 171.954 361.623 181.574 370.787 cv
181.061 371.325 li
cp
f
168.537 372.494 mo
167.341 370.349 165.692 367.578 163.783 364.369 cv
157.905 354.489 149.854 340.959 146.497 331.288 cv
147.199 331.043 li
150.531 340.644 158.56 354.136 164.422 363.989 cv
166.334 367.202 167.985 369.978 169.186 372.133 cv
168.537 372.494 li
cp
f
159.004 378.866 mo
158.567 376.895 154.505 359.004 146.546 338.004 cv
147.241 337.741 li
155.219 358.79 159.291 376.729 159.729 378.705 cv
159.004 378.866 li
cp
f
87.7144 361.784 mo
87.0316 361.492 li
90.4349 353.548 98.6304 337.758 105.689 325.544 cv
106.333 325.917 li
99.2867 338.108 91.1083 353.863 87.7144 361.784 cv
cp
f
81.7661 350.827 mo
81.1847 350.363 li
83.7341 347.162 86.2874 343.476 88.991 339.572 cv
92.9783 333.815 97.4973 327.29 103.396 320.248 cv
103.966 320.725 li
98.0888 327.741 93.5798 334.252 89.6015 339.996 cv
86.8913 343.909 84.3308 347.606 81.7661 350.827 cv
cp
f
70.0473 345.593 mo
69.9599 345.568 69.8988 345.512 69.8602 345.463 cv
69.7517 345.327 69.6907 345.251 69.9965 344.899 cv
69.9958 344.899 li
69.9965 344.899 li
70.3904 344.447 71.3931 343.539 73.6882 341.459 cv
77.873 337.668 85.6615 330.614 96.3842 320.582 cv
96.8925 321.124 li
86.1657 331.16 78.3739 338.218 74.1875 342.01 cv
72.027 343.967 70.5994 345.26 70.4558 345.437 cv
70.3647 345.363 li
70.4604 345.482 li
70.2842 345.605 70.1481 345.621 70.0473 345.593 cv
cp
f
277.106 66.6743 mo
276.543 63.63 277.382 54.0732 277.897 50.6247 cv
279.086 47.4306 277.326 43.4655 274.759 41.0594 cv
272.06 38.5295 268.136 38.2155 265.053 39.9888 cv
260.43 38.1861 254.946 39.3645 251.336 43.3957 cv
248.473 46.5934 247.464 50.8379 248.243 54.7305 cv
246.941 55.3004 245.727 56.1491 244.703 57.2919 cv
240.928 61.5084 241.138 67.9914 245.171 71.7721 cv
247.128 73.6064 249.626 74.4591 252.11 74.3782 cv
256.176 74.6987 264.222 74.8999 268.995 77.7899 cv
266.66 75.6839 266.837 74.076 268.065 73.2361 cv
269.293 72.3961 274.007 73.5672 276.411 76.0253 cv
273.246 71.3163 270.827 66.2719 271.498 64.5633 cv
272.181 62.8257 276.166 64.7981 277.106 66.6743 cv
cp
f
434.988 96.0034 mo
434.685 92.6813 432.62 90.0485 429.846 88.9613 cv
429.523 86.1127 426.292 83.9969 423.529 84.3776 cv
421.775 84.6194 419.584 85.3306 418.092 88.7314 cv
415.991 93.5214 412.934 96.2483 408.399 98.8644 cv
412.724 99.5027 414.294 98.2146 414.375 98.9523 cv
414.508 100.159 408.832 101.376 408.197 101.343 cv
412.848 101.551 416.466 102.708 422.121 109.066 cv
422.138 109.087 422.158 109.105 422.175 109.125 cv
422.282 109.246 422.385 109.355 422.494 109.481 cv
422.493 109.469 422.491 109.455 422.49 109.443 cv
423.518 110.468 424.958 111.028 426.513 110.813 cv
429.29 110.431 431.328 107.779 431.065 104.892 cv
431.05 104.737 431.006 104.596 430.979 104.447 cv
433.642 102.664 435.302 99.4387 434.988 96.0034 cv
cp
f
433.989 95.5173 mo
433.507 92.442 431.355 90.0465 428.602 89.1013 cv
428.128 86.4659 425.641 84.6747 422.982 85.0911 cv
421.293 85.3554 419.94 86.4456 419.267 87.8856 cv
419.266 87.8842 li
416.912 92.8607 413.065 95.9744 408.353 98.7788 cv
411.734 98.6188 415.735 96.0615 415.617 98.3808 cv
415.561 99.5036 412.596 100.58 408.197 101.342 cv
412.721 101.43 416.397 102.161 422.242 107.93 cv
422.26 107.949 422.28 107.965 422.298 107.984 cv
422.408 108.094 422.515 108.193 422.627 108.306 cv
422.625 108.295 422.623 108.282 422.622 108.272 cv
423.676 109.199 425.106 109.685 426.602 109.451 cv
429.275 109.032 431.102 106.526 430.684 103.853 cv
430.661 103.71 430.61 103.58 430.576 103.442 cv
433.058 101.727 434.487 98.6973 433.989 95.5173 cv
cp
.882353 .933333 .937255 rgb
f
417.625 97.0626 mo
417.447 95.0528 411.848 98.352 408.353 98.7788 cv
411.41 99.3616 415.735 96.0615 415.617 98.3808 cv
415.561 99.5036 411.619 100.749 408.197 101.343 cv
412.661 101.285 417.935 100.559 417.625 97.0626 cv
cp
.552941 .662745 .666667 rgb
f
424.842 89.5282 mo
424.321 89.6098 423.81 89.7468 423.323 89.9351 cv
422.114 90.4029 421.086 91.1759 420.305 92.1389 cv
420.153 90.3193 421.222 88.5708 422.941 87.9057 cv
423.217 87.7989 423.508 87.7211 423.804 87.6746 cv
425.434 87.4194 426.991 88.1541 427.873 89.4274 cv
427.869 89.3952 427.867 89.3631 427.862 89.3309 cv
427.507 87.0619 425.371 85.5046 423.102 85.8598 cv
422.806 85.9064 422.516 85.9842 422.239 86.091 cv
420.427 86.792 419.33 88.6964 419.631 90.6194 cv
419.722 91.1995 419.937 91.7374 420.246 92.2171 cv
419.006 93.785 418.408 95.8382 418.732 97.906 cv
418.878 98.8384 419.201 99.6985 419.651 100.468 cv
419.467 99.9893 419.327 99.4863 419.244 98.9597 cv
418.714 95.5751 420.645 92.2228 423.835 90.9888 cv
424.322 90.8005 424.833 90.6636 425.354 90.5819 cv
428.416 90.1026 431.333 91.6055 432.813 94.1307 cv
431.597 90.9817 428.31 88.9854 424.842 89.5282 cv
cp
1 1 1 rgb
f
429.412 101.989 mo
429.309 102.029 429.202 102.059 429.096 102.092 cv
429.082 102.073 429.07 102.053 429.056 102.034 cv
429.064 102.055 429.069 102.077 429.076 102.098 cv
428.842 102.171 428.604 102.233 428.36 102.271 cv
427.393 102.422 426.427 102.292 425.552 101.91 cv
425.589 101.939 425.624 101.969 425.662 101.997 cv
426.627 102.7 427.808 102.986 428.988 102.801 cv
429.077 102.787 429.164 102.765 429.252 102.746 cv
429.259 102.786 429.271 102.824 429.277 102.865 cv
429.575 104.767 428.49 106.651 426.697 107.344 cv
426.424 107.45 426.137 107.527 425.844 107.573 cv
424.756 107.743 423.668 107.48 422.778 106.831 cv
422.48 106.614 422.219 106.359 421.994 106.079 cv
422.274 106.819 422.761 107.463 423.416 107.941 cv
424.305 108.589 425.394 108.852 426.481 108.682 cv
426.774 108.636 427.062 108.559 427.335 108.453 cv
429.128 107.76 430.212 105.876 429.915 103.974 cv
429.843 103.518 429.69 103.091 429.481 102.695 cv
429.628 102.654 429.773 102.608 429.915 102.553 cv
431.86 101.801 433.037 99.7563 432.714 97.6922 cv
432.699 97.5931 432.671 97.4985 432.649 97.4017 cv
432.585 99.4058 431.327 101.248 429.412 101.989 cv
cp
.552941 .662745 .666667 rgb
f
412.516 114.41 mo
412.516 109.831 409.613 105.948 405.571 104.51 cv
405.574 104.382 405.59 104.258 405.59 104.129 cv
405.59 96.7325 399.658 90.7364 392.34 90.7364 cv
388.674 90.7364 385.356 92.2425 382.957 94.6751 cv
382.022 91.1803 379.731 88.2537 376.68 86.5128 cv
376.691 86.2019 376.704 85.8913 376.704 85.5778 cv
376.704 71.2911 365.246 59.7096 351.113 59.7096 cv
347.692 59.7096 344.432 60.3931 341.449 61.6236 cv
339.337 60.1837 336.792 59.3426 334.052 59.3426 cv
332.684 59.3426 331.364 59.5528 330.122 59.942 cv
327.705 56.6875 323.868 54.5726 319.532 54.5726 cv
315.208 54.5726 311.379 56.6761 308.961 59.9156 cv
306.494 58.7369 303.748 58.0583 300.838 58.0583 cv
290.313 58.0583 281.781 66.683 281.781 77.322 cv
281.781 78.2854 281.874 79.2246 282.009 80.15 cv
277.666 81.4245 274.454 85.3544 274.189 90.0879 cv
274.025 90.0818 273.865 90.0629 273.699 90.0629 cv
267.865 90.0629 262.923 93.8792 261.154 99.1729 cv
260.83 99.1421 260.503 99.1226 260.17 99.1226 cv
254.431 99.1226 249.779 103.825 249.779 109.627 cv
249.779 113.025 251.382 116.037 253.858 117.957 cv
253.82 118.415 253.789 118.875 253.789 119.342 cv
253.789 128.271 260.949 135.508 269.782 135.508 cv
272.708 135.508 275.443 134.701 277.802 133.313 cv
279.381 140.563 285.765 145.991 293.412 145.991 cv
294.702 145.991 295.949 145.82 297.151 145.528 cv
298.611 149.545 302.417 152.417 306.897 152.417 cv
312.636 152.417 317.289 147.714 317.289 141.912 cv
317.289 141.586 317.269 141.265 317.24 140.946 cv
322.073 139.415 326.13 136.118 328.678 131.803 cv
331.149 133.384 334.069 134.313 337.21 134.313 cv
340.412 134.313 343.387 133.352 345.888 131.714 cv
345.705 132.494 345.598 133.303 345.598 134.14 cv
345.598 139.941 350.25 144.644 355.99 144.644 cv
359.159 144.644 361.992 143.205 363.898 140.943 cv
366.418 142.618 369.429 143.6 372.67 143.6 cv
378.678 143.6 383.907 140.246 386.64 135.293 cv
387.066 135.328 387.494 135.359 387.929 135.359 cv
394.781 135.359 400.609 130.996 402.886 124.875 cv
408.268 124.479 412.516 119.951 412.516 114.41 cv
cp
.109804 .054902 .00784314 rgb
f
409.93 112.595 mo
409.93 108.235 407.136 104.538 403.245 103.168 cv
403.248 103.047 403.263 102.928 403.263 102.806 cv
403.263 95.7633 397.554 90.0541 390.511 90.0541 cv
386.982 90.0541 383.789 91.4881 381.48 93.8044 cv
380.58 90.4767 378.375 87.6903 375.439 86.0326 cv
375.45 85.7367 375.462 85.4409 375.462 85.1424 cv
375.462 71.5394 364.434 60.5121 350.831 60.5121 cv
347.539 60.5121 344.401 61.1629 341.531 62.3346 cv
339.498 60.9635 337.048 60.1627 334.411 60.1627 cv
333.094 60.1627 331.824 60.3628 330.629 60.7334 cv
328.303 57.6347 324.609 55.621 320.436 55.621 cv
316.275 55.621 312.59 57.6238 310.262 60.7083 cv
307.888 59.5859 305.245 58.9399 302.444 58.9399 cv
292.314 58.9399 284.102 67.1517 284.102 77.2817 cv
284.102 78.199 284.192 79.0933 284.322 79.9744 cv
280.142 81.1879 277.05 84.9296 276.796 89.4367 cv
276.638 89.4309 276.483 89.4129 276.324 89.4129 cv
270.709 89.4129 265.952 93.0466 264.25 98.0869 cv
263.938 98.0575 263.623 98.0391 263.303 98.0391 cv
257.78 98.0391 253.302 102.517 253.302 108.04 cv
253.302 111.276 254.845 114.144 257.228 115.973 cv
257.191 116.408 257.161 116.846 257.161 117.291 cv
257.161 125.792 264.053 132.684 272.554 132.684 cv
275.37 132.684 278.002 131.914 280.273 130.594 cv
281.793 137.496 287.937 142.665 295.297 142.665 cv
296.538 142.665 297.739 142.502 298.896 142.224 cv
300.3 146.049 303.964 148.783 308.276 148.783 cv
313.799 148.783 318.277 144.305 318.277 138.781 cv
318.277 138.471 318.258 138.165 318.231 137.861 cv
322.882 136.403 326.787 133.264 329.239 129.156 cv
331.617 130.661 334.428 131.545 337.451 131.545 cv
340.532 131.545 343.396 130.63 345.803 129.071 cv
345.627 129.813 345.524 130.584 345.524 131.381 cv
345.524 136.904 350.002 141.382 355.525 141.382 cv
358.576 141.382 361.303 140.012 363.137 137.859 cv
365.562 139.453 368.46 140.388 371.579 140.388 cv
377.362 140.388 382.394 137.194 385.025 132.479 cv
385.435 132.511 385.847 132.541 386.266 132.541 cv
392.86 132.541 398.469 128.387 400.661 122.559 cv
405.841 122.182 409.93 117.871 409.93 112.595 cv
cp
.882353 .933333 .937255 rgb
f
317.632 73.8825 mo
313.24 74.8712 310.264 78.7725 310.266 83.0939 cv
312.101 80.4578 314.889 78.4732 318.27 77.7123 cv
321.912 76.8924 325.54 77.6519 328.443 79.5346 cv
326.735 75.3332 322.202 72.8537 317.632 73.8825 cv
cp
301.814 88.9456 mo
300.11 86.7673 297.111 85.9952 294.548 87.1441 cv
293.395 84.2365 290.56 82.1727 287.247 82.1727 cv
282.912 82.1727 279.386 85.699 279.386 90.0334 cv
279.386 91.1378 279.617 92.1884 280.03 93.1427 cv
279.996 92.845 279.973 92.5436 279.973 92.2367 cv
279.973 87.9022 283.499 84.376 287.834 84.376 cv
290.349 84.376 292.586 85.5667 294.025 87.4098 cv
291.546 88.8187 290.428 91.7171 291.182 94.3595 cv
291.854 92.4026 293.231 90.6811 295.19 89.6129 cv
297.302 88.4621 299.683 88.292 301.814 88.9456 cv
cp
287.163 80.6601 mo
287.163 71.9912 294.216 64.9386 302.885 64.9386 cv
305.617 64.9386 308.188 65.6412 310.428 66.8727 cv
310.355 67.3636 310.305 67.8618 310.305 68.3729 cv
310.305 68.873 310.353 69.3608 310.424 69.8417 cv
310.554 68.9496 310.804 68.0962 311.151 67.2946 cv
311.485 66.5231 311.915 65.8043 312.421 65.146 cv
314.272 62.7383 317.171 61.1789 320.436 61.1789 cv
323.585 61.1789 326.396 62.6264 328.252 64.8882 cv
325.842 66.742 324.28 69.6457 324.28 72.9146 cv
324.28 73.4657 324.336 74.0028 324.421 74.5303 cv
324.934 71.3472 326.936 68.6623 329.683 67.2003 cv
329.929 67.0691 330.181 66.9486 330.439 66.8378 cv
331.66 66.3136 332.999 66.0143 334.411 66.0143 cv
335.879 66.0143 337.271 66.3364 338.53 66.9013 cv
334.988 69.2987 332.177 72.6995 330.51 76.6928 cv
333.027 72.9579 336.661 70.0384 340.926 68.4041 cv
341.629 68.1349 342.348 67.9 343.083 67.7029 cv
344.9 67.216 346.806 66.9513 348.775 66.9513 cv
360.295 66.9513 369.77 75.8497 370.703 87.1329 cv
370.753 87.7365 370.785 88.3452 370.785 88.9615 cv
370.785 89.1887 370.775 89.4135 370.768 89.6391 cv
370.684 92.3842 370.1 95.0055 369.096 97.411 cv
370.549 95.2541 371.629 92.8265 372.247 90.2219 cv
375.641 91.8608 377.994 95.3269 377.994 99.3413 cv
377.994 100.776 377.69 102.14 377.149 103.378 cv
378.501 101.656 379.315 99.4923 379.315 97.1381 cv
379.315 92.7886 376.555 89.0815 372.699 87.648 cv
372.793 86.8256 372.841 85.9896 372.841 85.1425 cv
372.841 73.0062 362.968 63.1324 350.831 63.1324 cv
347.362 63.1324 344.079 63.9409 341.157 65.3771 cv
339.364 63.7698 337.003 62.7829 334.411 62.7829 cv
332.659 62.7829 331.009 63.2307 329.57 64.017 cv
327.937 60.6075 324.462 58.2411 320.436 58.2411 cv
316.325 58.2411 312.786 60.7065 311.199 64.2329 cv
308.695 62.5468 305.683 61.5602 302.444 61.5602 cv
293.775 61.5602 286.723 68.613 286.723 77.2817 cv
286.723 78.5648 286.881 79.811 287.172 81.0057 cv
287.169 80.8903 287.163 80.776 287.163 80.6601 cv
cp
401.799 101.842 mo
401.799 96.2557 397.254 91.7107 391.668 91.7107 cv
387.961 91.7107 384.722 93.7178 382.956 96.6963 cv
384.806 94.7184 387.43 93.4733 390.346 93.4733 cv
395.932 93.4733 400.477 98.0183 400.477 103.605 cv
400.477 105.485 399.953 107.241 399.058 108.751 cv
400.753 106.939 401.799 104.513 401.799 101.842 cv
cp
344.718 86.2099 mo
343.206 83.1748 340.095 81.0669 336.477 81.0289 cv
332.87 80.991 329.726 83.0228 328.146 86.0115 cv
330.283 83.8976 333.219 82.5959 336.456 82.6299 cv
339.705 82.6641 342.624 84.0372 344.718 86.2099 cv
cp
270.282 92.9291 mo
267.202 94.806 265.609 98.1939 265.851 101.566 cv
266.544 98.6416 268.347 95.9833 271.111 94.299 cv
273.887 92.6081 277.09 92.2285 280.016 92.9641 cv
277.127 91.189 273.372 91.047 270.282 92.9291 cv
cp
295.329 68.7435 mo
292.249 70.6202 290.656 74.0081 290.898 77.3801 cv
291.591 74.4559 293.394 71.7975 296.158 70.1133 cv
298.934 68.4223 302.137 68.0427 305.063 68.7784 cv
302.174 67.0032 298.419 66.8613 295.329 68.7435 cv
cp
358.646 71.3924 mo
362.467 73.9947 364.284 78.4406 363.743 82.7402 cv
363.055 78.9463 360.922 75.4182 357.489 73.0804 cv
354.07 70.7516 350.024 70.0568 346.255 70.7929 cv
350.052 68.7322 354.836 68.7975 358.646 71.3924 cv
cp
1 1 1 rgb
f
319.882 139.717 mo
319.915 139.646 319.945 139.573 319.979 139.503 cv
319.965 139.494 319.951 139.487 319.937 139.478 cv
319.918 139.557 319.902 139.638 319.882 139.717 cv
cp
.698039 .690196 .607843 rgb
f
350.06 124.94 mo
352.471 126.501 355.392 127.316 358.479 127.069 cv
361.259 126.847 363.766 125.793 365.795 124.179 cv
364.193 124.861 362.458 125.304 360.626 125.45 cv
357.247 125.72 354.031 124.952 351.271 123.428 cv
351.291 123.401 351.312 123.376 351.331 123.348 cv
351.304 123.371 351.273 123.391 351.246 123.414 cv
348.04 121.637 345.455 118.837 343.985 115.405 cv
344.512 119.247 346.627 122.518 349.597 124.621 cv
348.393 125.422 347.094 126.118 345.688 126.663 cv
340.629 128.624 335.271 128.432 330.61 126.545 cv
331.209 126.232 331.783 125.852 332.312 125.385 cv
334.089 123.814 335.042 121.665 335.152 119.471 cv
334.579 120.403 333.867 121.27 333.005 122.033 cv
329.067 125.514 323.398 125.761 319.213 122.995 cv
319.52 123.576 319.891 124.135 320.347 124.65 cv
321.909 126.416 324.044 127.374 326.226 127.496 cv
322.344 132.888 316.058 136.076 309.439 136.017 cv
311.814 136.693 314.224 136.801 316.531 136.443 cv
316.173 138.556 315.073 140.549 313.263 141.987 cv
309.364 145.083 303.694 144.432 300.598 140.533 cv
300.373 140.25 300.176 139.954 299.992 139.654 cv
303.66 137.803 306.143 134.216 306.625 130.174 cv
304.96 133.022 302.168 135.2 298.692 135.963 cv
292.09 137.413 285.563 133.235 284.113 126.633 cv
283.971 125.987 283.891 125.342 283.857 124.703 cv
285.247 124.909 286.707 124.776 288.113 124.239 cv
290.328 123.393 291.976 121.717 292.851 119.702 cv
291.987 120.373 291.016 120.934 289.94 121.345 cv
285.03 123.219 279.636 121.456 276.691 117.395 cv
276.774 118.048 276.925 118.701 277.17 119.343 cv
278.025 121.582 279.728 123.244 281.772 124.114 cv
279.83 125.419 277.505 126.194 274.988 126.194 cv
268.229 126.194 262.749 120.714 262.749 113.955 cv
262.749 112.546 262.999 111.198 263.437 109.938 cv
262.432 111.028 261.62 112.299 261.059 113.697 cv
257.753 112.76 255.412 109.881 255.09 106.54 cv
254.901 106.98 254.755 107.446 254.672 107.94 cv
254.108 111.302 256.375 114.485 259.737 115.049 cv
260.028 115.098 260.315 115.112 260.6 115.118 cv
260.338 116.111 260.187 117.149 260.187 118.224 cv
260.187 124.984 265.667 130.464 272.427 130.464 cv
276.887 130.464 280.775 128.07 282.911 124.504 cv
282.94 124.511 282.969 124.521 282.998 124.528 cv
282.218 126.641 282.008 128.989 282.526 131.353 cv
283.976 137.955 290.503 142.132 297.106 140.683 cv
297.855 140.518 298.569 140.281 299.25 139.993 cv
299.483 141.472 300.078 142.913 301.076 144.169 cv
304.172 148.068 309.842 148.719 313.741 145.623 cv
316.595 143.357 317.696 139.713 316.872 136.393 cv
321.833 135.518 326.258 132.411 328.701 127.777 cv
333.024 130.565 338.563 131.328 343.729 129.326 cv
346.246 128.35 348.375 126.82 350.06 124.94 cv
cp
.552941 .662745 .666667 rgb
f
408.718 112.841 mo
408.112 114.089 407.301 115.262 406.277 116.308 cv
402.189 120.486 396.018 121.385 391.03 118.979 cv
393.408 121.055 396.47 121.912 399.414 121.562 cv
398.649 122.811 397.718 123.985 396.594 125.033 cv
393.63 127.799 389.926 129.269 386.173 129.476 cv
386.686 128.988 387.152 128.436 387.543 127.807 cv
388.794 125.793 389.09 123.461 388.567 121.327 cv
388.285 122.384 387.852 123.419 387.245 124.397 cv
384.472 128.862 379.111 130.724 374.308 129.275 cv
374.769 129.744 375.286 130.172 375.87 130.535 cv
377.956 131.831 380.385 132.102 382.581 131.5 cv
382.237 131.889 381.877 132.267 381.49 132.629 cv
376.496 137.288 369.408 138.269 363.516 135.723 cv
363.916 135.171 364.26 134.582 364.531 133.959 cv
363.581 134.696 362.514 135.313 361.332 135.764 cv
355.936 137.824 350.008 135.887 346.772 131.424 cv
346.863 132.141 347.029 132.859 347.299 133.565 cv
349.134 138.371 354.518 140.78 359.324 138.945 cv
360.952 138.324 362.292 137.289 363.295 136.013 cv
368.457 140.016 375.886 139.833 380.816 135.232 cv
382.127 134.009 383.131 132.585 383.84 131.055 cv
383.892 131.032 383.941 131.002 383.992 130.978 cv
388.131 131.825 392.594 130.741 395.92 127.637 cv
397.769 125.912 399.009 123.79 399.663 121.528 cv
401.928 121.205 404.109 120.167 405.835 118.404 cv
407.389 116.816 408.343 114.872 408.718 112.841 cv
cp
f
228.807 102.245 mo
249.893 105.49 li
245.894 99.1064 li
271.779 107.057 li
237.473 90.4523 li
243.574 101.354 li
228.807 102.245 li
cp
.772549 .145098 .0509804 rgb
f
380.128 42.5983 mo
371.057 58.8072 li
377.482 57.4904 li
363.111 76.1794 li
387.105 53.2588 li
376.356 54.913 li
380.128 42.5983 li
cp
f
392.621 156.995 mo
382.393 141.49 li
380.61 147.801 li
370.615 126.449 li
379.946 158.293 li
383.417 147.986 li
392.621 156.995 li
cp
f
292.191 184.62 mo
299.532 160.926 li
291.507 164.432 li
305.081 136.026 li
280.114 172.635 li
293.694 167.486 li
292.191 184.62 li
cp
f
312.993 31.0031 mo
316.354 49.2707 li
320.46 44.157 li
321.323 67.7166 li
325.169 34.7575 li
317.949 42.8911 li
312.993 31.0031 li
cp
f
261.004 162.624 mo
267.364 150.879 li
262.758 151.89 li
272.904 138.31 li
255.881 155.029 li
263.593 153.732 li
261.004 162.624 li
cp
.94902 .847059 .0666667 rgb
f
416.522 76.5462 mo
406.627 80.9422 li
410.085 82.5716 li
396.851 86.2738 li
416.054 83.9581 li
410.46 80.9756 li
416.522 76.5462 li
cp
f
349.013 35.1473 mo
347.454 45.8613 li
350.676 43.8057 li
346.748 56.9745 li
355.033 39.4965 li
349.527 42.6372 li
349.013 35.1473 li
cp
f
365.367 166.11 mo
360.487 156.445 li
359.03 159.98 li
354.677 146.945 li
357.941 166.01 li
360.643 160.275 li
365.367 166.11 li
cp
f
428.32 136.125 mo
418.12 132.494 li
419.504 136.057 li
407.362 129.622 li
422.875 141.175 li
420.875 135.159 li
428.32 136.125 li
cp
f
277.275 66.7076 mo
275.752 62.024 276.538 54.6847 277.03 51.4742 cv
278.169 48.515 277.486 45.0343 275.029 42.7344 cv
272.445 40.3161 268.688 39.9428 265.737 41.5361 cv
261.311 39.7579 256.062 40.7465 252.607 44.438 cv
249.866 47.3664 248.9 51.3103 249.645 54.9621 cv
248.399 55.4678 247.236 56.2357 246.257 57.2822 cv
242.643 61.1434 242.844 67.2032 246.705 70.8169 cv
248.578 72.5701 250.969 73.4176 253.347 73.3928 cv
257.24 73.7753 264.426 74.9929 268.995 77.7899 cv
264.805 74.566 265.174 71.1913 266.35 70.4318 cv
267.526 69.6724 274.331 73.9909 276.633 76.3361 cv
273.603 71.873 268.094 65.0901 270.298 62.7354 cv
272.502 60.3808 276.376 64.9361 277.275 66.7076 cv
cp
.882353 .933333 .937255 rgb
f
265.843 43.0573 mo
261.805 41.132 256.814 41.9304 253.598 45.3664 cv
250.88 48.2706 250.127 52.3163 251.279 55.8554 cv
249.785 56.2221 248.376 57.0056 247.248 58.2104 cv
244.152 61.5187 244.324 66.7293 247.633 69.8257 cv
248.05 70.216 248.497 70.5537 248.967 70.8405 cv
245.825 67.7267 245.705 62.6456 248.747 59.3956 cv
249.648 58.4328 250.73 57.742 251.89 57.3136 cv
251.992 57.2759 252.098 57.2549 252.201 57.2209 cv
251.777 58.1813 251.648 59.2452 251.84 60.3008 cv
252.094 61.6937 252.874 62.9046 254.038 63.7102 cv
254.1 63.7531 254.165 63.7894 254.229 63.8293 cv
253.544 63.0954 253.079 62.1825 252.895 61.1712 cv
252.641 59.7783 252.945 58.37 253.751 57.2057 cv
253.9 56.99 254.066 56.7844 254.244 56.5943 cv
255.971 54.7488 258.809 54.4045 260.935 55.7446 cv
260.677 55.4677 260.39 55.2141 260.071 54.9933 cv
257.926 53.5094 254.968 53.8235 253.189 55.724 cv
253.048 55.8748 252.922 56.0416 252.798 56.2094 cv
252.764 56.0196 252.732 55.8294 252.707 55.6381 cv
252.324 52.6308 253.222 49.483 255.452 47.101 cv
257.934 44.449 261.472 43.3771 264.814 43.9088 cv
264.77 43.953 264.723 43.9921 264.68 44.0378 cv
262.169 46.7212 262.309 50.9469 264.992 53.4583 cv
265.089 53.5495 265.193 53.6297 265.294 53.7138 cv
263.61 51.1972 263.806 47.7587 265.962 45.4547 cv
266.296 45.0977 266.663 44.7905 267.05 44.524 cv
267.245 44.3894 267.447 44.2678 267.653 44.1566 cv
269.993 42.8908 272.949 43.1169 275.08 44.8874 cv
274.803 44.473 274.48 44.081 274.101 43.726 cv
271.797 41.5701 268.36 41.3737 265.843 43.0573 cv
cp
1 1 1 rgb
f
277.275 66.7076 mo
275.357 59.5658 269.464 55.6778 267.26 58.0324 cv
265.057 60.3871 266.782 65.9989 269.812 70.4621 cv
267.51 68.1169 263.916 65.8289 262.74 66.5884 cv
261.564 67.3478 260.431 73.0295 268.995 77.7899 cv
265.169 74.674 265.174 71.1913 266.35 70.4318 cv
267.526 69.6724 274.331 73.9909 276.633 76.3361 cv
273.603 71.873 268.094 65.0901 270.298 62.7355 cv
272.502 60.3808 276.376 64.9361 277.275 66.7076 cv
cp
.552941 .662745 .666667 rgb
f
342.677 170.751 mo
342.678 170.751 342.688 170.751 342.688 170.751 cv
340.58 165.655 336.406 148.901 335.435 141.057 cv
335.489 142.523 333.811 154.681 332.842 155.38 cv
331.973 156.009 330.931 153.504 330.741 148.909 cv
330.741 148.909 329.172 159.391 326.56 159.537 cv
324.82 159.633 324.148 154.375 324.697 151.837 cv
322.499 158.529 316.121 163.833 313.801 168.091 cv
312.302 170.841 311.575 175.92 313.961 180.019 cv
316.987 185.217 323.694 187 328.94 184.001 cv
330.468 183.128 331.693 181.94 332.602 180.575 cv
334.789 181.757 337.522 181.823 339.838 180.5 cv
343.29 178.527 344.519 174.214 342.677 170.751 cv
cp
.109804 .054902 .00784314 rgb
f
341.479 169.548 mo
341.489 169.548 li
339.522 164.75 336.341 148.443 335.435 141.057 cv
335.826 147.791 333.447 159.117 332.419 158.683 cv
331.391 158.249 330.639 153.111 330.741 148.909 cv
329.847 155.644 328.567 161.727 326.126 161.729 cv
323.685 161.731 324.192 154.128 324.704 151.738 cv
322.654 158.039 318.512 162.854 315.775 166.507 cv
315.778 166.51 315.782 166.512 315.785 166.514 cv
313.044 169.717 312.462 174.415 314.688 178.274 cv
317.512 183.169 323.769 184.848 328.663 182.024 cv
330.088 181.202 331.231 180.084 332.079 178.798 cv
334.119 179.911 336.67 179.974 338.83 178.728 cv
342.05 176.87 343.197 172.809 341.479 169.548 cv
cp
.882353 .933333 .937255 rgb
f
340.756 172.36 mo
340.376 173.778 339.465 174.964 338.193 175.697 cv
337.767 175.943 337.314 176.13 336.845 176.254 cv
335.173 176.696 333.44 176.297 332.12 175.292 cv
332.347 174.378 332.423 173.451 332.359 172.535 cv
332.308 172.902 332.243 173.268 332.145 173.631 cv
332.025 174.079 331.863 174.507 331.679 174.923 cv
331.497 175.338 331.288 175.737 331.046 176.115 cv
330.294 177.29 329.27 178.278 328.027 178.995 cv
327.344 179.389 326.616 179.69 325.862 179.888 cv
322.02 180.903 317.947 179.204 315.958 175.757 cv
315.278 174.578 314.896 173.286 314.804 171.968 cv
314.536 173.902 314.906 175.858 315.897 177.577 cv
317.886 181.024 321.959 182.724 325.802 181.709 cv
326.555 181.51 327.283 181.209 327.966 180.816 cv
329.609 179.868 330.867 178.446 331.619 176.743 cv
332.975 178.022 334.919 178.567 336.785 178.075 cv
337.254 177.951 337.707 177.763 338.132 177.518 cv
339.405 176.784 340.315 175.599 340.696 174.18 cv
340.889 173.459 340.933 172.722 340.833 172.004 cv
340.81 172.122 340.788 172.242 340.756 172.36 cv
cp
.552941 .662745 .666667 rgb
f
324.704 151.738 mo
321.756 159.778 322.662 168.684 325.104 168.682 cv
327.545 168.68 329.748 162.158 330.642 155.423 cv
330.54 159.625 331.139 164.984 332.167 165.417 cv
333.196 165.851 337.244 153.221 335.435 141.057 cv
335.697 147.357 333.447 159.116 332.419 158.683 cv
331.391 158.249 330.638 153.111 330.741 148.909 cv
329.847 155.644 328.567 161.727 326.126 161.729 cv
323.685 161.731 324.192 154.128 324.704 151.738 cv
cp
f
336.45 243.8 mo
318.44 210.374 li
321.832 246.978 li
309.716 220.036 li
313.346 247.431 li
285.24 232.298 li
298.552 262.62 li
277.723 254.223 li
290.572 272.845 li
240.138 272.389 li
282.651 285.057 li
260.81 293.061 li
280.671 299.579 li
245.775 321.877 li
280.341 316.412 li
264.568 330.02 li
281.991 331.925 li
261.978 366.05 li
291.233 347.767 li
285.866 368.232 li
300.804 355.359 li
296.362 395.34 li
312.026 366.58 li
313.429 384.519 li
327.869 367.241 li
330.509 393.975 li
339.661 366.687 li
343.381 400.906 li
347.939 364.776 li
366.485 395.625 li
361.864 367.901 li
403.121 416.419 li
383.786 374.165 li
395.86 393.315 li
391.899 361.63 li
425.895 371.201 li
400.811 348.097 li
430.516 343.807 li
409.066 330.957 li
442.398 325.654 li
409.552 317.385 li
441.077 311.131 li
417.249 305.77 li
444.048 302.55 li
411.042 294.298 li
441.737 274.825 li
407.742 280.766 li
431.836 261.953 li
402.131 265.914 li
436.457 223.007 li
388.697 258.007 li
401.471 223.337 li
370.116 252.052 li
367.145 218.716 li
355.923 242.81 li
347.256 195.966 li
336.45 243.8 li
cp
.215686 .00784314 .117647 rgb
f
358.491 360.94 mo
363.579 388.486 li
347.459 362.195 li
343.527 383.553 li
340 363.124 li
330.955 387.12 li
328.937 360.821 li
314.308 381.634 li
313.857 360.299 li
312.068 359.917 li
298.099 389.468 li
303.382 350.141 li
287.866 365.014 li
294.882 342.757 li
265.232 362.725 li
286.602 329.484 li
267.197 329.129 li
285.486 314.572 li
284.711 312.916 li
251.115 319.82 li
286.688 298.854 li
264.27 292.994 li
290.201 285.137 li
248.202 273.625 li
295.828 275.372 li
280.692 256.433 li
302.766 265.331 li
287.484 234.692 li
315.999 251.294 li
313.762 233.593 li
321 247.414 li
322.768 246.892 li
319.853 215.443 li
337.504 251.846 li
347.176 201.375 li
355.099 250.538 li
366.547 228.851 li
368.123 257.967 li
396.69 230.995 li
383.345 263.105 li
427.853 230.409 li
396.648 269.267 li
425.17 265.086 li
402.773 281.885 li
403.511 283.559 li
432.545 278.081 li
404.035 296.494 li
433.985 302.163 li
408.975 304.624 li
408.863 306.476 li
428.073 310.733 li
402.132 318.426 li
431.758 324.986 li
401.796 331.299 li
422.106 341.548 li
395.641 347.032 li
414.642 364.845 li
387.564 357.78 li
390.892 381.464 li
378.632 364.231 li
395.598 403.435 li
358.491 360.94 li
cp
.658824 .0117647 .129412 rgb
f
338.058 256.435 mo
324.744 234.246 li
324.744 254.771 li
317.533 244.786 li
318.642 256.99 li
299.227 248.669 li
306.439 269.193 li
293.125 265.31 li
300.337 278.624 li
270.382 277.514 li
294.235 288.054 li
279.812 293.046 li
292.016 300.258 li
263.725 316.345 li
292.571 313.016 li
283.695 324.111 li
292.571 327.439 li
272.601 358.503 li
299.782 340.198 li
298.118 352.401 li
307.548 346.854 li
300.804 379.123 li
316.978 353.511 li
318.642 366.824 li
330.291 356.284 li
333.065 374.035 li
340.276 359.058 li
343.605 366.824 li
347.488 357.394 li
357.473 374.035 li
358.027 356.839 li
392.42 396.224 li
373.56 357.394 li
382.99 364.605 li
382.99 352.401 li
408.507 359.058 li
390.756 342.416 li
407.397 337.979 li
396.858 328.548 li
417.382 324.111 li
397.967 316.899 li
409.616 309.133 li
400.741 305.805 li
421.82 302.477 li
398.522 297.484 li
425.148 280.288 li
395.748 285.835 li
410.171 272.522 li
391.865 273.076 li
416.828 240.903 li
380.216 266.42 li
386.873 245.341 li
365.794 262.537 li
362.465 242.567 li
354.144 255.325 li
348.043 218.714 li
338.058 256.435 li
cp
.890196 .192157 .152941 rgb
f
332.911 334.069 mo
332.946 333.995 332.978 333.919 333.013 333.845 cv
333.024 333.857 333.037 333.867 333.049 333.879 cv
333.001 333.941 332.957 334.006 332.911 334.069 cv
cp
403.476 322.253 mo
404.255 318.423 403.272 314.652 401.099 311.753 cv
402.678 310.047 403.835 307.911 404.333 305.467 cv
405.312 300.652 403.519 295.923 400.055 292.917 cv
400.126 292.621 400.199 292.325 400.261 292.023 cv
403.056 278.287 394.188 264.886 380.452 262.09 cv
377.128 261.413 373.826 261.426 370.687 262.019 cv
368.915 260.216 366.606 258.904 363.944 258.362 cv
362.614 258.092 361.29 258.033 360.008 258.161 cv
358.295 254.554 354.98 251.762 350.766 250.904 cv
346.57 250.05 342.444 251.31 339.461 253.937 cv
337.294 252.315 334.745 251.133 331.916 250.557 cv
321.687 248.475 311.707 255.079 309.625 265.308 cv
309.437 266.234 309.322 267.157 309.272 268.073 cv
304.614 268.464 300.575 271.865 299.596 276.677 cv
298.91 280.049 299.882 283.368 301.945 285.806 cv
296.014 286.015 290.774 290.235 289.539 296.306 cv
288.604 300.895 290.195 305.402 293.344 308.418 cv
290.856 311.363 289.049 314.956 288.226 319 cv
285.608 331.859 293.911 344.405 306.77 347.023 cv
308.05 347.284 309.327 347.431 310.592 347.482 cv
311.536 352.597 315.478 356.878 320.888 357.979 cv
325.363 358.89 329.766 357.408 332.778 354.414 cv
335.229 357.828 338.922 360.364 343.365 361.269 cv
350.042 362.628 356.602 359.936 360.501 354.883 cv
362.022 355.522 363.626 356.024 365.304 356.366 cv
379.04 359.161 392.441 350.293 395.237 336.557 cv
395.568 334.934 395.73 333.315 395.745 331.718 cv
399.583 330.08 402.581 326.651 403.476 322.253 cv
cp
.109804 .054902 .00784314 rgb
f
362.849 345.797 mo
361 354.881 352.137 360.745 343.054 358.896 cv
333.971 357.047 328.106 348.185 329.955 339.102 cv
331.804 330.018 340.666 324.154 349.75 326.003 cv
358.833 327.852 364.698 336.714 362.849 345.797 cv
cp
.972549 .729412 .0196078 rgb
f
393.437 334.895 mo
390.721 348.236 377.704 356.85 364.363 354.134 cv
351.022 351.419 342.408 338.402 345.124 325.061 cv
347.839 311.72 360.856 303.106 374.197 305.822 cv
387.538 308.537 396.152 321.554 393.437 334.895 cv
cp
f
398.316 291.64 mo
395.6 304.981 382.584 313.595 369.242 310.879 cv
355.901 308.164 347.288 295.147 350.003 281.806 cv
352.719 268.465 365.735 259.851 379.076 262.567 cv
392.418 265.282 401.031 278.299 398.316 291.64 cv
cp
f
370.374 300.94 mo
367.658 314.281 354.641 322.895 341.3 320.179 cv
327.959 317.464 319.345 304.447 322.061 291.106 cv
324.776 277.765 337.793 269.151 351.134 271.867 cv
364.475 274.582 373.089 287.599 370.374 300.94 cv
cp
f
336.276 345.741 mo
334.87 352.648 328.131 357.108 321.223 355.702 cv
314.316 354.296 309.857 347.557 311.263 340.65 cv
312.669 333.742 319.408 329.283 326.315 330.689 cv
333.222 332.095 337.682 338.834 336.276 345.741 cv
cp
f
360.204 266.754 mo
358.798 273.661 352.059 278.121 345.151 276.715 cv
338.244 275.309 333.785 268.57 335.191 261.663 cv
336.597 254.756 343.336 250.296 350.243 251.702 cv
357.15 253.108 361.61 259.847 360.204 266.754 cv
cp
f
373.003 273.998 mo
371.597 280.905 364.858 285.365 357.951 283.959 cv
351.043 282.553 346.584 275.814 347.99 268.907 cv
349.396 262 356.135 257.54 363.042 258.946 cv
369.949 260.352 374.409 267.091 373.003 273.998 cv
cp
f
402.271 304.697 mo
400.865 311.604 394.126 316.064 387.219 314.658 cv
380.311 313.252 375.852 306.513 377.258 299.606 cv
378.664 292.699 385.403 288.239 392.31 289.645 cv
399.217 291.051 403.677 297.79 402.271 304.697 cv
cp
f
401.439 321.001 mo
400.033 327.908 393.294 332.368 386.387 330.962 cv
379.479 329.556 375.02 322.817 376.426 315.91 cv
377.832 309.003 384.571 304.543 391.478 305.949 cv
398.385 307.355 402.845 314.094 401.439 321.001 cv
cp
f
354.448 325.71 mo
353.042 332.617 346.303 337.077 339.396 335.671 cv
332.489 334.265 328.029 327.526 329.435 320.619 cv
330.841 313.712 337.58 309.252 344.487 310.658 cv
351.394 312.064 355.854 318.803 354.448 325.71 cv
cp
f
331.164 296.349 mo
329.758 303.256 323.019 307.715 316.112 306.309 cv
309.204 304.904 304.745 298.164 306.151 291.257 cv
307.557 284.35 314.296 279.891 321.203 281.297 cv
328.11 282.702 332.57 289.442 331.164 296.349 cv
cp
f
346.261 273.016 mo
344.239 282.951 334.546 289.365 324.611 287.343 cv
314.676 285.321 308.262 275.628 310.284 265.693 cv
312.306 255.758 321.999 249.343 331.934 251.365 cv
341.869 253.388 348.284 263.081 346.261 273.016 cv
cp
f
315.787 300.891 mo
314.381 307.798 307.642 312.258 300.735 310.852 cv
293.828 309.446 289.368 302.707 290.774 295.799 cv
292.18 288.892 298.919 284.433 305.826 285.839 cv
312.733 287.245 317.193 293.984 315.787 300.891 cv
cp
f
321.101 280.919 mo
319.946 286.596 314.407 290.262 308.73 289.106 cv
303.053 287.95 299.387 282.411 300.543 276.734 cv
301.698 271.057 307.237 267.392 312.914 268.547 cv
318.591 269.703 322.257 275.242 321.101 280.919 cv
cp
f
334.728 327.049 mo
332.186 339.538 320 347.602 307.51 345.06 cv
295.021 342.518 286.957 330.332 289.499 317.842 cv
292.041 305.353 304.227 297.289 316.716 299.831 cv
329.206 302.373 337.27 314.559 334.728 327.049 cv
cp
f
343.847 269.052 mo
339.342 269.145 335.644 272.377 334.784 276.616 cv
337.11 274.397 340.24 273.007 343.708 272.936 cv
347.444 272.859 350.85 274.328 353.322 276.754 cv
352.485 272.292 348.535 268.956 343.847 269.052 cv
cp
325.326 280.668 mo
324.09 278.191 321.303 276.835 318.56 277.451 cv
318.009 274.369 315.641 271.779 312.391 271.117 cv
308.14 270.252 303.978 273.006 303.113 277.257 cv
302.892 278.34 302.909 279.417 303.123 280.435 cv
303.149 280.137 303.188 279.836 303.249 279.536 cv
304.114 275.285 308.276 272.53 312.528 273.395 cv
314.994 273.897 316.95 275.512 317.994 277.607 cv
315.282 278.494 313.606 281.113 313.819 283.855 cv
314.868 282.07 316.562 280.656 318.697 280 cv
320.997 279.293 323.367 279.601 325.326 280.668 cv
cp
338.022 280.255 mo
333.955 278.743 329.417 280.821 327.905 284.887 cv
327.739 285.332 327.626 285.783 327.545 286.235 cv
327.425 286.217 327.306 286.196 327.185 286.184 cv
323.595 285.804 320.269 287.53 318.412 290.358 cv
320.741 288.454 323.79 287.436 327.012 287.777 cv
327.15 287.791 327.287 287.812 327.424 287.831 cv
327.425 287.897 327.421 287.963 327.424 288.028 cv
327.44 287.965 327.459 287.901 327.476 287.838 cv
330.511 288.282 333.115 289.878 334.904 292.127 cv
333.786 289.221 331.251 286.97 328.059 286.323 cv
329.848 282.818 334.027 281.122 337.804 282.527 cv
340.834 283.654 342.757 286.462 342.916 289.502 cv
343.856 285.678 341.8 281.661 338.022 280.255 cv
cp
312.611 269.617 mo
314.342 261.115 322.667 255.606 331.169 257.337 cv
333.849 257.882 336.23 259.084 338.181 260.739 cv
338.011 261.206 337.863 261.685 337.76 262.186 cv
337.661 262.676 337.611 263.165 337.584 263.65 cv
337.89 262.801 338.305 262.014 338.805 261.297 cv
339.287 260.607 339.853 259.988 340.481 259.444 cv
342.776 257.452 345.93 256.501 349.133 257.153 cv
352.222 257.782 354.69 259.763 356.059 262.351 cv
353.325 263.688 351.212 266.224 350.56 269.43 cv
350.45 269.971 350.398 270.509 350.376 271.043 cv
351.515 268.024 354.014 265.79 357 264.904 cv
357.268 264.825 357.539 264.757 357.814 264.7 cv
359.116 264.43 360.489 264.403 361.874 264.685 cv
363.314 264.978 364.614 265.572 365.737 266.377 cv
361.784 268.022 358.348 270.796 355.916 274.38 cv
359.13 271.219 363.277 269.081 367.786 268.33 cv
368.529 268.206 369.281 268.119 370.042 268.073 cv
371.921 267.958 373.844 268.079 375.774 268.472 cv
387.072 270.771 394.588 281.39 393.251 292.642 cv
393.18 293.244 393.09 293.848 392.966 294.452 cv
392.921 294.675 392.866 294.893 392.815 295.113 cv
392.184 297.789 391.088 300.243 389.623 302.402 cv
391.479 300.577 393.023 298.411 394.149 295.98 cv
397.15 298.265 398.766 302.134 397.964 306.071 cv
397.678 307.479 397.108 308.756 396.331 309.862 cv
398 308.443 399.231 306.483 399.701 304.174 cv
400.569 299.909 398.602 295.722 395.106 293.546 cv
395.362 292.758 395.577 291.948 395.746 291.117 cv
398.168 279.214 390.456 267.56 378.553 265.137 cv
375.151 264.444 371.769 264.582 368.617 265.407 cv
367.179 263.473 365.061 262.033 362.519 261.516 cv
360.8 261.166 359.093 261.276 357.525 261.76 cv
356.604 258.09 353.668 255.076 349.72 254.272 cv
345.688 253.451 341.724 255.162 339.464 258.304 cv
337.345 256.151 334.588 254.582 331.411 253.935 cv
322.909 252.205 314.584 257.714 312.854 266.216 cv
312.598 267.474 312.504 268.728 312.551 269.958 cv
312.572 269.844 312.588 269.731 312.611 269.617 cv
cp
398.869 320.478 mo
399.984 314.999 396.434 309.634 390.955 308.519 cv
387.319 307.779 383.742 309.101 381.415 311.669 cv
383.625 310.099 386.447 309.402 389.306 309.984 cv
394.785 311.099 398.336 316.464 397.22 321.943 cv
396.845 323.787 395.981 325.404 394.801 326.707 cv
396.825 325.268 398.336 323.098 398.869 320.478 cv
cp
367.95 286.55 mo
367.074 283.271 364.443 280.583 360.903 279.823 cv
357.373 279.066 353.884 280.431 351.738 283.047 cv
354.255 281.4 357.394 280.71 360.562 281.389 cv
363.743 282.072 366.331 284.001 367.95 286.55 cv
cp
298.46 287.926 mo
295.064 289.151 292.826 292.156 292.39 295.511 cv
293.654 292.782 295.952 290.534 299 289.434 cv
302.059 288.33 305.277 288.597 308 289.903 cv
305.52 287.585 301.866 286.696 298.46 287.926 cv
cp
322.999 259.56 mo
319.603 260.786 317.365 263.79 316.929 267.146 cv
318.193 264.416 320.491 262.169 323.539 261.069 cv
326.598 259.965 329.816 260.232 332.539 261.537 cv
330.059 259.22 326.405 258.331 322.999 259.56 cv
cp
384.569 274.798 mo
387.797 278.113 388.691 282.836 387.302 286.945 cv
387.385 283.087 385.997 279.201 383.097 276.222 cv
380.208 273.256 376.38 271.767 372.535 271.736 cv
376.671 270.473 381.35 271.492 384.569 274.798 cv
cp
1 .898039 .4 rgb
f
322.653 350.241 mo
318.56 349.408 315.426 346.478 314.124 342.801 cv
317.299 342.484 320.313 341.423 322.954 339.769 cv
323.789 340.397 324.704 340.945 325.703 341.383 cv
327.838 342.32 330.081 342.668 332.254 342.503 cv
332.261 344.099 332.53 345.655 333.042 347.115 cv
330.407 349.733 326.558 351.036 322.653 350.241 cv
cp
390.096 322.797 mo
390.628 325.545 390.645 328.438 390.053 331.347 cv
387.63 343.25 375.976 350.962 364.073 348.54 cv
362.558 348.231 361.113 347.771 359.747 347.182 cv
359.083 346.896 358.442 346.572 357.817 346.226 cv
353.662 343.924 350.403 340.354 348.458 336.132 cv
353.656 336.334 358.485 333.56 360.978 329.113 cv
357.04 332.403 351.699 333.94 346.279 332.837 cv
342.895 332.148 339.944 330.521 337.633 328.287 cv
341.651 328.779 345.765 327.709 349.044 325.23 cv
343.412 326.87 337.114 326.032 331.944 322.393 cv
327.755 319.444 325.046 315.176 323.98 310.548 cv
323.214 316.184 325.536 322.041 330.508 325.541 cv
332.357 326.842 334.389 327.682 336.471 328.098 cv
338.239 331.958 341.754 334.952 346.232 335.864 cv
346.868 335.993 347.5 336.066 348.13 336.106 cv
349.514 340.857 352.472 345.045 356.518 347.931 cv
353.271 351.581 348.224 353.46 343.102 352.417 cv
337.78 351.334 333.771 347.376 332.341 342.494 cv
335.852 342.206 339.172 340.578 341.541 337.897 cv
336.997 340.282 331.452 340.657 326.387 338.435 cv
322.283 336.634 319.22 333.445 317.502 329.662 cv
317.756 333.583 319.691 337.282 322.89 339.719 cv
319.493 340.597 315.856 340.748 312.193 340.002 cv
300.276 337.576 292.241 326.613 293.15 314.786 cv
292.691 315.925 292.323 317.119 292.069 318.365 cv
289.819 329.418 296.981 340.24 308.033 342.49 cv
309.929 342.876 311.816 342.979 313.655 342.838 cv
313.481 347.699 316.826 352.13 321.747 353.132 cv
326.532 354.106 331.217 351.514 333.073 347.194 cv
334.687 351.709 338.546 355.302 343.577 356.327 cv
349.766 357.586 355.849 354.582 358.774 349.34 cv
360.645 350.356 362.694 351.118 364.887 351.565 cv
376.789 353.987 388.444 346.275 390.867 334.372 cv
391.681 330.371 391.346 326.401 390.096 322.797 cv
cp
.776471 .160784 .0235294 rgb
f
304.085 314.55 mo
306.79 317.676 311.127 318.553 314.736 317.014 cv
311.279 317.15 307.795 315.773 305.355 312.954 cv
303.379 310.669 302.437 307.841 302.487 305.041 cv
301.245 308.156 301.739 311.839 304.085 314.55 cv
cp
.87451 .184314 .0901961 rgb
f
365.278 323.201 mo
369.353 322.505 372.348 319.249 372.899 315.365 cv
371.226 318.392 368.244 320.66 364.569 321.288 cv
361.591 321.796 358.685 321.138 356.314 319.646 cv
358.337 322.321 361.743 323.805 365.278 323.201 cv
cp
f
384.005 335.923 mo
387.822 330.043 387.206 322.566 382.997 317.413 cv
384.849 322.979 384.248 329.304 380.805 334.607 cv
378.016 338.904 373.853 341.771 369.268 343.011 cv
374.929 343.564 380.694 341.023 384.005 335.923 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: (??????? ??????) ()
%%Title: (1505.m00.i125.n039.S.c12.142672393 Boom, explosion and pow set.eps)
%%CreationDate: 5/14/2015 1:01 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",K=^)h:ddFZ;kNW!h0A'Yt<+TWXJ8GEU(`Nkf]J!AX!bAZ@9D<Z`^>FD!NQ@8T+AfVhDBt4=a#7I>jVmG(O]aIrlh+#T=K\3s
%fDiOSZJF$)G#V(\<bg%5J,F(ok#qMQe@JU.XaJ;^9fqaPIZVuqR!.i3`B3>2#o-djedJ$`WRfpEedJ<TCSP482d=J)N?@t"C,^W3
%:\(LZV+RT`=),F303ljcR;M[X=0@d.ok$)=:3gQ3$_:dVq/qVPU'C*CQi"hX<@U$\[G*MrC)b]9%^ssK>uE-O2uE-/YO#'!l[A?3
%U45'!l[JDQ>Q/d8a26/pkKln7gQQLc99"<Th_*Mre.KrsrgTa>WGLfUhl3to4K2X=qQW2M65/si]`q)4r0Bj*Yk^N,r$T846+8!5
%DpcT)He#:uKV)8e8SRF%Im8iTPZ4=#dk3dajotWS#:Q#%6"4tt9%?BWh_+He.W)"r,F*<6TD1':A_J6/\ENd'cV#j9g.d?/b'!J\
%42c'7DN=omJ!N`W/Z52*o#4MUlu],X4tQ_hG#S\`Y[r\&3gEV7FfjGrAWqj8fneI1YuIE2p0Q'Fo"=@p=n:II`_jHq<b`<Deghd-
%_f@62U1Z,@eXcW!&h)0dSa84+[A3R;*pB>!?:m3Yp;bQ].^Zf,ja(@X2F!]01i8rf]H/rs@rq@#6MHr1ZZ9o.0q`sfP\l5#X'%(K
%B\-=b5lTalUk@<l0`#9K9(Qr09=8Hs[Q<9tNH'N7hE=9YS$h6F]o!84iRd`8%>%]W;Els5Hb]&+C8002F5_`2QZ[VJ>XQDYr9L1A
%$]as3*I>6GXEPT;[F=sos-h1HlR/OYRo5qcDpjpe;gTnLka/j0/9>LiW0o;8)t\Kd:-)a"bRJ9Jk1M;^j=.dc^IJ5MH(S3',Y>0?
%.G_*(=fTsjZ%f)]Or!dBq-(M#iWn9DGKPE`P<>sGY=V\E[GN9FPDH&$bJLB#SP/A-:a,N\8QS"8g6F"p/Dk:D<Gu2O_ht:<:Bi1\
%o^JU)/t?9des-.m%I`K7kG0%h[:62K(@l6ZS[%ldQDDKZI&0_)CZZT!j[*^qfkI"TNp?:0\+KdJ]04-*nKY]7E#S+AZaNr!q-<=;
%<4L^,#rm3CKR<%!25hmK3)7.T$aWtePDHf)'lU0ppfF&#I]%RVL_pYP<);eEEi[o24^PEiS5V%>8r#W7m8>.]FBIJ;%9fP+8)8;C
%`BUb&^Uk:ugM+2fAjYde;f7qJ]NMEr@"tNgch!,/Y>A3iYh,[t9R8:n[h]d8C,F\.LPKfV83jRkTIb58:+aq5mrin]P4cXUB?LGq
%'D^dO+cfZ%Zi@1/C@lJ-(8+eol*O)/a;1^`VV01#Y#@;5=,P7#NGGKBdPe(gmR-p&rdee4_c^be0"#dl:"IVdX8JBhFA/5If2Sa2
%X&=S]rZS$SeLCDX_%clsHW./N,a8#(>\p#[R#%_#g64NMQ-[b1$"aiN]WLGJg&?r@Xi'=Fb3[E67tM'@e\8.gB"!ab3L9?[ELfmc
%Y<P#grR'3$4aa^"@Y.1GdR(5GN1,Q=GFBo?8Ce-EiG0TT%:+s2j0pq?iDXHV>+J7u#)t+heo]F2\^W[j]g=g\B.4-O`[frtS8.`7
%G*rcSiDXN34[:Gfk13W2eeE;]EedHW,i:*5R\fHnik-NPaJJ_>L!=`rY]#uHE!9'!)C@:M6bdmgDIn`6D%E+H]hrP,a`U1Z2nc5d
%/b@,ml\%j%/jlbqR`JpNdk$`l"?]41UI5d,FadbcXMmq<!d=B6UL6H*p]-VcV:3r:e?^*N.82n:;4GeZZPs:u:/=$bdq50[rQ<<0
%\Ma'I##=<hICfVM3q_l0bI:,p(en;JWG=G8mA@&Be?tbaY1M"J[8O/mFCkc7<+N)um@*&B-9.FQ0Zu'DflcP'71W[2$=0[mg%<W+
%gRTkkk!dVGR7:lBS?:BB9OP]cp/dDS8`_k$m-?&[2NqStM/MHZ[l'4YWDUbbM4*I``A4aE&ko6*osSItYPa[cO^Ng_EGF[+$!f*]
%H!=3^2(I]kJpf-0.g73D-C@`8l>96&aZQK_g@\K:hd/04q0"Y.9?$2Qf$oF']Js[q4hp&,%-OhnqR>W2-_\S.U!Tc^ODUS"B!KLf
%jr5]#Z'3U=,.l^]]/:n"Z<*9UZ<d=]9$s7G*;E@]$Bj%sc]WcO@^&99Dq0Q`f?2W3<&T?br^l3TYr7VeTUu?D.qVG(QMCMT,1J/M
%rH;KH9Vla#s0[me#SZ$tp.BcMI^,1,Zs)R=D>j<6NOB6D6ibG;k;jY+7p.Nc5itl&Ij:"f-56Rr$"T(%'M*`lNK"cG!"iOB2rFBm
%:hc0WE*Xm!D[uUZ?%N3#80Y8jDGa^dR=g]6%aOId+l=i[c`<mc&f!0Vl7oQ'4S$YbkKL733@-\GJV]rJZ/`-f];=Xm$&a(u&R63m
%1kn,P+\uUh^H.+>i!@jiL>4)?Baf8*6_;;Zqkf#PE]sNR1Q<PRA'!+9nhc*V[ET7O<n9l04)Glp*\HH%Cd?uogis_rT#Qb>E]]0?
%e'h'TPAt(W"qk<aB$qXk)O]*_,a5h1`X'mc2W0[5lQc[1?gV&R',$,h:@j_*`2(lIYC9^IqS<s`&"d)1LSUod@KAF>-CEZO(IhYu
%O1J4]/-VpW=kC,&",+mh,%OW*Cl4<K&[H3H.tQEF_IQT4m%:Nr=3d82;Jh,(WmV5o?2:S9nn5L>.CE6GV;b+\RBKm8)kZ,&\$0XS
%!]75_U#-L"9sM:=AhjMrk*5mA\_9VsQW:NW/]0Eu1:up8aY']!pmhLq7q9RfT!9Pf3rt2r.he^"RQghX>^b`-r.a8Gh#)AK[-LL^
%YkQ:W9e[L-A=XH,Zu+iZ,*DSk6:ejNNH3O%l4eK2!\[L1AI?(DJX:rc2$I<`^rpZU0u,=A]GM?;nWt]o1;Y*r'R9Eki8sYXr8cr7
%N!t5YBO(;:7Z\r1J!eTp.OO=4mSAu$\=D:nmgCWqjYhSpH%Nt"P5>E[G?'UA*(Kn0MBm81hGnPg'2+oR3;TXpH7f($/'$mK:/gO>
%]ufO-c!dUma2?RKGn$1s;u*%aNoLsprs@LB0)IZB_.hkh8\;fQd@Pka]I',dW.3mYSYV=Z-CW0N,HoJt8)g,HmYtVWB.j&OjROtZ
%#j-I*:i!Tk$o``O-3)t:0\9PKk$Ma1rstZ>S?PX>&pufaN%_m>/V)=VPMNa%_oMc1Mu)[PX45/YS#'T2#j3JTKOPRXZ$;0bA!/ht
%Yo&D.BJN?(jTr^RP9[a6DOSmbMlkH#]j?r!g#\Di^2U??P+m7I?RWC5/6h@,#/Q@2VdH7VD:)Y+gu,FLb6d>f/o6aSiJf-"9sjJ`
%\1G#%ZWgoN:IlrE7bp+=S`bq(^G[E3[Z,Lf_":C:l(*:P48jW[]`'rfF<YXL*d`40hahD_DZUGB3=1A^\/gmHL$uAG0(Wdf:.n="
%FZTp%kZH`No+T^^9lJc()3]G_hG)8,n\&gQC(uY_;)G\;Iec7+-ceeYVbS4T5<V:r#'o7h%<bNCOC()1ko%%r$1d<ene"o`dhCe@
%jZ$8#^L!R-Q/cNp.AO$cV[(:5=?0+eOT3Yj`c4D.s'AmgG\l`mSKo;bSXDT0)n2%0UIGinc$Z4UYIps'P;le;hGCfI2Ld5U3pJOt
%3gESpak$j=`jVM@0:aI^CoDKVHUO<P-Fu,u?MV#V<N@4MbO*/h&]DC^7]:N1XsBH??gZU:>hVd]69WH"9"AQuH\[tAaXPA*ol!uu
%%$_d,/]k&=C+d?q%V$["\*351%EU?b.)LI'09*[K:Kchp5sKKbL<jtS4q.P=Y#93+hSa3)/LDh:Cu8c1p+]uNo[r&`YrBeFA/>n]
%H6[o2`o89!Oti@9g)+0P!E^/-!`Nug3.BkMli)ol*eQGo:O#=g+q2IQM'+D]&fadg)hDCpPFQ&!7sk*q,l"lgdF]DffTp`ZV.Qmc
%S0Z2=('XE1m;P.:P%5HM!hE;i"Rukkn=-6;<aY5uQ6s.;X`,t[@UtXX/FB@:e>/;]es+BrS':6@(M<!BRN00s%aN`L2=n6,Bp(,'
%N$-AT('6s$R#O"Di5\V82]-hqj6+(-EH0^P)uAKW[nNXhHR-EeH8n,>+if:3a">:$2iV4>5+_C2oN<$c2kP`Mk,U01,YS9'GLA.Z
%S&!8*_B`RZKjXcV]kO501sn7ujK'W#TDq+&G@]gQUl51`WET<XJ\WW:I[t>*8^CIUP?@bdWiM^ZERdRLj\D<<C6JPRC:?&6pGt#F
%cal^]U6Jij22u4I;9:1We'8bfj`^H'G3Z[rY$:S-AsKRtQ2ctSK?3OrkF2cP,cQ&n;lZ'tV0mkV)[lI6@CMiHK8imEX\"dn`R8J2
%QKYJGU=<)TSP@%#Z+@D%[3To_S@tZR?h-%.o2pM@gTqE+8Rt>bd&D1<q'>`B?fcrqa7"RFo!NKqd?&i"&2W_Z[3d`g0KEj5M;3b=
%!H3H?a=r<CLJnG1M@,u=`ZJQ<7Gmq%GY1.IX^-=5g5u`6,N"p/+)N#G30c2^%d6,r;X64Ym\`u<V`a^CGqK+c0^1]d?jW\m2s%U9
%Gn-q:>Jb0I-%Ro)mIK+V2o5G'YulT(B]b67:6Ik-<:RC*i*uKd[rf9rP_m#+Fgp4DSC]:aZNP98WT<s<P0]Ui^'%(_Q$cNP2jJcc
%0DQBK2)CafP!o4doBM*!P=T`g__#3n@-])%po@XnoYi:YDmUm5?:snlW,BT/RZ?#*A/DaJ;@EH5?/UUri;:Or:IG_@I@MRXCVl'b
%ADc#YRj>]3[8URG0T>rZq;0*Es'%$2o!_=f_IZZToC^Si`Tq#]a]/<'E0h5eFgop#OmH#`;X`11_#uQ^I^8k)$'*"Q]-lpnU6GGa
%mcio9)%Ef%qVV(#)K)9PN&[iBW02#;IhGH85IYN?m+9G0Y?"HLau(uDVKn2HRV-)m)],,Z]J#M:IZX0TGt^HDq:hIckm'6KM%aQd
%r'AV"q&&:JAd_;IaI+`$0J4;*r=\9Qn&K>e`AAZMH;2mbkAs<q2?"A?4>tJeJjZ*X</jaP-52WD0nE[;S#1!q;`9(fci9GuNH*IT
%In*V"bH?l7Rl6sJaOF:\4C;sQG%\fZbotI[7Qek&ZHd>I'6SKYIi$M"hL.G!LdluK[o5\)<(sGDU+sfl'MJM$O^nr#6t;*fN2j*!
%QX-.+)IpN2;ab+8&<."+Mdd<:U9GsNbt'[Z.@Mu[BEhi1M7YZ^q:Tn:#`%TbSQrln]oDMgZgD1&UrU62_J]lhNGddc2PL.&IrkHh
%/2OaIq(.j)O*hc02Jq[BG83U5<5G@N\4\0da2R)/IT^+EmnNboWP:CbpMSaC944,]]"^1T+*4#-O"Wf5n^QS</WVR$Q;&C6WP^Z;
%pnePY<G%X[I)G2Y0i=\3LqA%mPE<%c:Qj$_=guZU0DU!ugntZI&-$B]ZBt+YoL/E>,\:67kl_=We*dL#OZAlcMAoRXq:5&rG?LY)
%q;nAK'4[4/lV,:MaG[;p&7.r`kc+(J7s6)-*BH+,CN0u)o(^08e&YG;\1m[pIsPZ-_e:Dhm#uFO=,GR?e9O2C\9]&"1ijUu872K?
%qX5Y[,:ahT7Ic=^3:eE3\V7;Ne-Y9c9):EA>Q0RZ&e5fX=R8GSc6Ot31XbPh-?5+i>e"dFYLQ71_c!=18;=HUIH@p"QUqb:rV?7p
%IH?d&9t&hl<:Y`@[8^r1jr7g0EiOD"/jVaB4?T/;@)gj_cU<q6eA\h\MZ-7Sq9eX-EVO)?a!<9)<,n/EE*OsZ%=E_MpEh%<g@FVV
%JZh3p+sG(+F3!g^Y=&dTlCom;V+l8^b%\1]qG.1JoX%l&,g/i\gtmc4f["_(M+pqkBo-i`XB1VP"]r=D]spi+a2:kJY18_>[l'.W
%M&h?0F3,5Vj`^IG,UR`=l>=cq?hl5P,JaSHqJ>>a#o0Sl]WEV_b-b,2_*)moI&4&O:NGVtXQjXs.Y2FJ-c)bQQTU,`FP't#[O,.X
%f95W)U!Tc^DFep7Roui`XZ98cq!4_tQH2ZRokr<daOeSb7'")l]1+IT(U=f'.MHA+DIB#g9U$f%2(nC;1_XGbnCbZ(AYLGZP>ULc
%3s"b19gpdX)j+*aJ*%ZTOVJGfU3agA(SrfW\L7bXb;%+-8]2dIT8PH:atj?^9QO(.\L@K2[[H9PN1-q+8\$7+,i,DWlQHQ_PF7>l
%KFGo?U)s&6Peo6nAb:%@&i%V/Mn10u2D/87/#+r]QrB2^07SQrDf[SPqnlQn1;'JG0n'p"N6aukekt5b#U\h;6b^^eETQJ#^;eBh
%I[]Ju:'Qa'I6".dorL6XfB#]k#9nZcg6nq5qsOYnJo?iK\tD^#"B.TF'm*A?7tPV*ZY`peS$c^,i,P0CU>qU5g-2pmVM5j&:&-iU
%=Q<3Vpt*[n57?Q*I\fD]n+#MMOB'9r8L_((m'P&:]D5Y0N'ur;ZUeRGp+Rdg2tE5+q+QU`<'@85.nfMYVf4iXn^:YlD$EClkTA)g
%R+aFX_[N[e+eA`2<]Xer(B;4#8tbZ\5Q"?LAX`#(p5_hF7GRC,<r]5?^O[\C58$!;4-fMPU)YGA1WLK$X,T`N>KKM)iNENia+*RK
%-oms8d\3eMY>\KU%t%0`oRge3J`G2iTs$W:]_=%22sfb;+8G4`rUc)lrh>ZKmA<'r[Sk(/khuQ0JN>7.=SD>C-P1)i7:2Y'-f=V^
%q6$(\jEhC8T^`EgTq=JoTIp#nV*FUUn,<3AqT9.M)tWYAXZZHr%6VZ?0_Nf`4oA\L^2gI_[^'0lj<%VIrkd@[XqE&!p2i96m,omq
%G.T#`gHYLjD8YWg>8C0g=^4[Zl.bcI['88\KuFJXrC=:Akt?O(CVMQ:d:Y]><`GVJd`9A];=4C$0;NaP9C&/mO1lZI2]gG>d%C()
%kJ^q?<:aLI]slkS<W+p1gaT_dI@U$jB_X%t8?75=:66g\LPJ*o-hRh8qL<JoEN/TA*m?aQog/mlnSGp6.m7sd'GZ/;n8"Z(5m8uA
%AAI6k2*4h+lLo_-R:"IeFZ.%ZnVn=6bjk%P>3kt0I'^49e:+.7GVIY"m>e'os6J;jeOc/^n/i]3UUmh.LS]0WUK9RPGkHcQQu&L<
%=B)J%03j`rqLLblW9UQ3MZ8,KDD[PiNg&jQ3Id27#8tEMZFdT[q%*me:9.[(r^O.H'!qKrdC9$dnl_^T:Jpt,-.1gT*i:B.-jc@'
%Pkn2Fc/J.*56(8"-B"-nVgj]?H63;KBiW<0aV!Qkg9K+elNaDcK2TF(_n:a+9g":T,9jX72m%JN+$-Hr=_9FD&Xep83c4*aS!E1^
%?9F>+B=p]AHFB0kG2Nh#?F%n'nOR+2p:C2/P4Vn\f5I,28\Ih6eP>A9^"4e_39nhB\baaq(_nSR"bZ!!RuN/&6-='j`_e=qo0kFD
%I_fF/s*?BnM?Yk.7!#We>\$8s]3ZqOMP.pIZ,U(G<FA:`fa^sVB)ABqD\c7TjSPfRlE".R:1\,#P?u0#[Il.l,V$0jq-'h]DrLaB
%oiNiD>35dKH4pkH7*S38;/4NX^(M^6<Ll/D>h<u!+.:qDNM2W,>t9,&N-eQ[[MiKmcO$+Zh$=YJaOgF8[gma@[sKp?mF6Tke1*?U
%/>\A!s)+_mMrf-]Ug,@XIpAZmY20?9a<L%/;E7paG,[rha6g640ta5R+rL&lWHFdnaLBm"B)+[(`i4SgX'Y&/QFlU>]hZ2eBb,R0
%mOdJL_<p<!B:\s'.CEN$F;g8e]W;8Vb;*oK)s)1;RS4<qE^X&*=&1^E`StGYWodM%QcnrbEpN:b[i4p_O/k%jWD'3qn'5qRERM3<
%ek;9BpA&lgp:S>Je'59RCA#G4S_!;3=mo,#T5P75/Gg8CHG!7WTB%L-V+.B2)R)U,p//L8J(Nt&KfVDnGtN+,]m,5Rq!E4T@dsZ*
%>0HkJl`a?6Q>b5!;`CQ8G.,AN#A^heh48j8?NF1#eW/6@JqJi]UGW=g"5PUf>E)M]GB%J^r&BG$g\c9--O+LfbA5j6H.EJRFukWu
%?=^KcSOt3&gGdUbc(CS6,""&;@5Y^lWfm[CVKPR]Q7;um^e1/@q2u!`2d`E8`81g$[bB"&7FuX;fCi[]o<ia%7H;HrU%(e#2BiH+
%s0L3k!7)b:FSq+bV;*0o#B\t_,R_q39j1VT/H/,&)//P95.R"(b0BN$m475f;hpnJ#1Q8Y4YII!m6tOM&dE2cU#%>dM?AYi[Igc]
%mXH9,S/iM6`X(bpll_0,n8aR&Q?jn4d^T'E3g0*1_Tjba^WUbFr:rr2HKXj&?*6siXaBZi9k.iZAtG[qej[,h67[MIE1B:Mf-IA6
%[Rt\&e]1'(.kAOfT@ZlICT$i)N+[ntoQ>SQPhX_Nki!FS'X-CRX'VSt+M-j9VeIm&,;"=\rG'&ldCN5*cjKG)heA?H.^5S)[WD0&
%-c\\3QC%I/GkcTfmX86iUBfM90C*Ye(.Y&'m4<Fq`/>AZeUn(UC0/hP#pAfaFa%>7];TW4`D";kl8FN"dLDIFnkh6$6X(:]\lWt"
%`fgBVokrInWatscA:<[=*Aqf6WG^Lr%^_c:YH?L@U(4%WW`?27pSBC9E0Aaff,KRd.CGYM+l#1`WS^4ZZUBQk4("-R[4<>A`kNWb
%rn!-Zj>eM$\2%aIVLOk1N3WjtI1<_r%(-+*AKOKNhLOp-%:=KsXDVpD)V3^*H<9<dX0F$-7-lYse5+8QBWC?pMC6EU*o:GA,slLJ
%\0&<)c!n9@4A2=(1ttVY?1"un#$*2&CF%rp0SXM7"0-O(#1>2ZMjl3fnB,92jbHFuBI6S9#"__E<9(SV\l0Xq./r&d:5A56)i!"G
%)RIG"pR8*p=4C-o<Ol):H)7P0%^()r1`F1&XY^He)Au+*$.2eB#lddkBCJ6^mWkDRH"fg-'cU1\r[*)g>-s$$%Ro8[WQKBj+"7Vu
%==]s(]9hnkUC179.)<9IVKpGMqp"X]<DI>sFK9K2\nQJh;lhgEVtHXL4D78`0?.`59TZd2:Jea&;%chLWi5cqS*!NVfN5aFOp%'I
%7l&`@@drG(hn5'k;%_(YZ1TE"1:Ss\jYGMc6T]5+VfRJ2(fa0YpY'>FM#s;$Y5GHMUSpmr^0PVXDDodNODH#X[*c9KD':cQ=J\n)
%:3Q0)?"BX&ZE]R2F9V9_MDsfEWn/k)H8s"h4q\`?W85OZ;Q3MB6ipbp_YE_W/tiHi_7ah!aRO&Bo<hd#`aMlrO`+NDT9h/tTU5Lk
%)9;J)pq9r?*2inJpW0m_h'@_a6RYo`gn^NU"SG6hF$gE$[8SU20G!FZ*_*\`e%0L"Xda!e]BZ<9g"+!jH>7eJ_m;_V>?$#1c'9a0
%LN!G.ThliFa*iCB4?R3L>LfsPq.DY:Z_2Hbo_,DSaj!%WkP<MuL,`Bo[is<A[/o3@EM#DtEhEG:/@EW5[:.JsCdV+%EF*S_Vh[VL
%XOa>Zb-BOoEIge_2i\<b0daAb&FYtc?)m7XR\uuKT-4sNd'cPX[SpBiU4_b,>1#Uf")Y@C[rqbGAX`0*_s1<Clb:+"eE6bhcZ^_>
%-0afp;=aL^nXT:]2L*_->\?:hQAXd!2:c-)ntJ'uKEu&>,%d#>WgN%K/it,SWRZ>T@]E[CQk2Xt2<haC\Y;Xrf9b>"2Rn2f2V9t7
%_`eKNpf+)jUiVgT"4f:mH61C.%=SDhl%[#K%kcn>Z'@f6@IQVXFhW&;YdL[YiJ&tg<Z\o`p>l`&e86!+^I5bpI-lg9I2Rmfn;mIR
%FPYlQOg@YJ-;Y(WRkmA-fc9@SHD<'5kpP]Xoomms4Gn(F0`7%Z4((+uCDX#B":B-o,cU0'V8MFBmBlpFrtO*UPLDA[is9b>aT04J
%Tl)E?F+\RqC@@@FftQ-%NiI-XBYD_S+#8_+IYZq:QAIqPiNa`-HIOKIj)qP.26M9dMD0Fn7r\q'L4p0d2Ub@VnkRO2\Z';B>HZdm
%ZUK"X,_Y$?:>V4.J)/nc6LDZKBqg!]f]+jDQn(S`_?(ijc]'*"DSHW*'m1$>A6eX[IqWD.EH@H8#i8r!F!H.*j&'?..;>:KpNt-F
%CL^0!B2;i'*T'Y\JQY.MmD>-3QY1f*:X`:d*\n"fqjK<Va*+*+Z%`[gaq'5fD]r\B<jRZG@Yc#]M/A!Uc/M+qVAlY3=UZ<NNX7:S
%74)`%!*djLd<?jA]*HGXDg/"j^($)\1kM"g'dlHqg2*u4-\I+P:P9,+QiVAWk?5m9;R&[B]ue6oo"]K6NnMoMKCYO35Gm7R\%;so
%<csn;@\]S7gU1ihL'a?;[uKPaBaak)7J(PE6f[eQhc&CmS#ANb0jQR-#BO72:V.R*2RL'&Q;"":CK+1W-F0IKTil7AnI;5H8'QFV
%d8`hlJ^?qmmFH(G_KiIo/S46teKi?:W_Il)W\Q2DN6[M%6W;[Z2^CP`I)UIN1hoTk6+TCb]e<,*o^I=C;XS!#"-M<0$Z?Q&I;iRY
%_2C5Tic!]/CF5W\a]S:U0M2iA[Vr..oLZ5%fgX[K;W$TbEYfP&WE1mqm95'ar,T8*=u?r_KV<A79>A)9REFe9`KJ^0W7&*B*Hk3!
%UWCu$m/o>t6bpO]<m9<CghRIM*B-!WrOs8URs8KPKT^8?Nm9`:P?P\*M$QM3oGh?"iO]KrM.np#n$2JBEik^>E6\<AJM.HI9uQDo
%94mcidm6JC]nf%WVji@nlW/l,k9u?grY1JB>&+Q7dSaF.WZd3d2fVZ1c$k7W%g68>0jH\C/(nEJrL<>`9,pXO`QR_JOm@9i^0Hnt
%iKHG)=.LVVbn67Whch1kHZJMS#K("9f=m["YD@:5VU2E:jP)cl+/Q+^V\<q7?p<!@_kch3HR,kUS;#0Y]c5J5-8,*-H)<OoIRuM)
%H!@7`FSqf@Y7*UL'j_r/P-!B2;L%\W%i**hf1\A;U:'8&aZm=8r@_M`WT4]'J&p4Mpr7ErQ..@m.hZ6b$aW6Gd!@^hJhi*#gY7:K
%/JW4;"]+g?]a#YB=5Q2j\<;?NnD&;n\%'0'go?r!T@N?lceV`kICN/"Vd&o/f?Z@gHcp3.\";sOVoq/o*q$0g3s@jXWHNn3>O-X%
%e]N?aSh4(=f2fV]+0DXt1g4[s(M\f<=^0Ridu8$)Dm,crHaU2gW_8*dji:.(fl[)Lfp09pMXRN35F\-Fp-3B$ZemsMlOSm]R;./J
%Q.\?;T?falmWEPQIK/^2\&uUte4oYdH@@WR[JPDtlG%W;nPeR`,Q6d$?K:^E5Hh1qj?Bb!\'ih&m(uFD2nN'PV/COkEaMB=AktY+
%p"(^0Q$:ELlf[YpF8pmK[j#0$A./+VpU/PL&)TuH2!EN1Qa8>fqWYijlumCGcMD#>m=+2:nQnoonLe28:cI@Bg%iKs_0n2QENY@(
%<\lPWKDG2,$X`)K2BKTXD3R)BT"K>tmsLs.aC!l'o).Y7cFJ%6>>'7V=haoY\btQ7EP4.!o\j8#r_k2NF84ZT-8;p;o).::DS25n
%T@Yj+_Sb[:j5#tH^\[27g%Uh:VbX*lfXBrrQL/RRL$\E^)d59%@EF#b=N0Cm`_rBdg"q->]=:[@YP@upRD\omRC/%AeU)3n(IAqI
%[Ucj3HM=$+)tblUX)Ek;Qds3kceRrPg'g^?M>-3T[cO:YepCE7;E\0tR.D(&J\ET$=SCp)]@j%Yl@[l_q%$2Aj5IfjDM>,f2qH+,
%D9]i>5KU$rT2sie^6&11$_(M"2>(9m'*Z.Wk+=ch>Ys+OB9,bSD]c0c'Yh?Z_RnJA0t"L"mRH#/XnCl5+ai\e_4H(&J6F8DAaZ,^
%lnL.P)'r(dpVH`-a;ed+c"Bh=?@:YSk9&PfpJ,&0>()]"IZc]P0=3P4pC"U$,NXFY1B-J2pZSI5LWt$MT6@fH,fJG-X^<],XTau3
%o3&G7n*AZU_p'AY.CGY;Rt#HsjfRk^>,H0qO6ua%lh]H/gfh%0r`UuD^4"/9'Y*8%7m$KZ@=Gm2I_!+[rDSb1IC)tZ\S-l3=dacp
%RE]:np:BqP?)GBFXKj\T`&js%XW4b;Ar`Il4',MTdVd'j52,sZbr[=8JkZ'5/nZdi<TbJUj^oSkju1MuK+FG!f'9#HWS(O\9)FZN
%\g*=Pkq:$%<p'1fbquo@pb`;BI?DfmJ+N8$$HT@SLYo-c14*BZGB4_$cND@>EDk"t'W^\*Oq--"Xn@SGphd3SYJ'Q&_tp^7H]Kfh
%K"@XqPkMCe(GdB&ld[J<NFSM3^TCi`n)\j!qIuY:e[Tr=L@ZqljeXh;fl#>92p/8.a.dYFj1^to\,EBeYEdQ,K.?E`_&S8IGQ..(
%&'q"WcT[IbF6Ml4cD.N8ENtrmr;&Of<.6s!P6Oc(54^O"]CiM<2b2Wugh-'@*He\LDf'sgY"3&DU&IsO*dGlsB]D25B&VbHK;]#e
%PY,9#oRi28G=YauI[E-o1`jX%]uiPa;><ub#Nq/rR2><&CXc'PU.5rYf8fb6HQ,'(O6f%Fo&rC52"U30T1V)ajc8NlSF]->!7si]
%>40M/V\'6._F:*ZM7rnEeEU(_F5a(eQko8C>@R,HpZJ/2p)JOM3F#[eD3W5IMO<0><&r+8Gk#T)\%:hLnPc%(fqY"c5MBD4=g'rs
%db(aa4[r_&k.P!LCMut6r;C9s&+J1dU?]cpS-O9+BCOAKX)sMOlFVuO7r%Jk[k'c*^V&:RecBoGiXPm@?F"Ub2sle^q/pC'ZPm_,
%JaMmSYBG`:<iBghk8iuhIJibq>5>I4Df+iOkdB%.p;6/#\m@iVY;=Z;NG\Cq`@K_SpF#3[#:RJNgj/H_*\>P'XeFPug`]jJ_QBN2
%6ggZFFHrn'2lQ3[@f:#J%b?ps!NjTY\iI\s??%phpuB73%JlXfNt*tE]S7L$HE5P$a>L+%I=l1f)R#.trF03=]5g]A^9TD',1Ju7
%47)X$XuC\jn2U6'mVAlQ9u>k%0Sj@ilh1$EDu7$Lr5J-mpSpV,E+sdQ:(BA!_bYuP0JICM2g'"gb3!%&;r8b0_(RR?/erCodE&0+
%[;Iqo3ffHYi-GtA5(;4&@&#Y^l3?;)kGl50qHaudlHNo@V9A@T<;NE2>1%/RDIVsc*Kb4'P3c!78<6&_bA9]lf>#C&H-T]YQ"aRY
%r><580q$#JImXtp,%t+P&6+u'Y?unIk'qn!Y',Y1XXeRd)A8,T%&0aSZT[Q:A6(<@#OHp3L07pnG+[BJ='50.B8rO_it%,#c_f;g
%O+OqWnUuZbEheoeXl4Cj/n?Cd9c!Q'8*<4T>m_Lq_41D1)4(Si64nS$,`U&A]R@G!h!QJkia3oZ0_`HYhP<q=]6n[%0;BIJbg\BQ
%Ve7[("Feb.UsUqfDdLql(&MHUB'Yg4_O^@/##sd9b\HRUIIq2i`S/'_^\R$JZUiV!hX?jpE'.U<b@S^H?Bs=`Z*DA@R#h'+G"DV_
%MfnJ3RAb0K#C1gK%1gWhq66(+3#D=]Zes1qV0R5tK)0Q3hcsDGe_(a7^[$,'lc5jG61+/ak-2O)h43A*RdGT.Tl+mdiCkKeJe$ph
%%\r[#rUK)uAoD1-^M<sQqppM7Af-I)F,_&*r^u/B!IFsASf_L82]mGge4.H+p3AakipEcWAo+Y`0"+r1V5>tEGJ&((/3]oBSkaTn
%VZY,>CV_CkFO6KF^]%JaOZe-C3a=0'Ij?N"r4X>gJYVX^]]?`1!S-AJ-$%id6C#Y!0(:L"Qcji)Hb<5Tjt3^*<bK_!&q=H@RQUBQ
%p@JlQFUW5oB?1s[qloYeC28=>&#*s)\jHFV+2iMibS?$5+R`/Da*<b1>F^$i4hPg,HmO,[n);:^r;2JMnrq,;B"r#Mi"YmNWm>t%
%+9kC"HN&9Kb3_FR/YHF@HN63PK^]G%`^V.)&9W'E$[V;1.)*_/qp-a1HJV9/WtO18n=oPaK;MV<c[@s*&n\W0qkr`rF.3Ll9l9.N
%bO*$T1\YUF<u(E)oi:_XofPladK[Zb@7BmmTaaAO?scqV>jr\?c`8VZkIu=mF>(++l[2\g@5VF*=C&GOoJ,hC43uMcmB=oRhH+&&
%>b^h=-M-NaiL=(qXr'=cd<tnD"bOJPSEsHA02<EKhu5B9U-;i;gGo4TB6jKuf(!`J?_>fSLZoW@(VB;"L[:Z,R!0Djd?jM6p%T"]
%L^:R"@9C^lC;ke)H&4EYE'7+j1L1qYl>l>PFrbRA,Q2BVl'qVFW.uUID<8b6]B&LRhs$aLZtJN?X8%\Jk&F>%]tP0Rp>POX8!Q>a
%Vt/d1H)nhE*PN`n9&5TGXiqcm2NJgNakFo'LZoYqVqfGNQ.+%X\'37cr-KiDe]m35Q2@rNd"n8FG%L>Xn0P0slDN7UA\20MbJs(L
%i34ThA>c=?LTn&S1(UZ<\ocS7@hps)3B8u7E:V]&gt[?i-'ra=W;.h05<la5j:1#MYYKgH`7j%(EUrtOnThL;cTBhP6#gm]q;o)D
%Y0K*!mcJ7'#2CI:>\nekQa9?R<n<ukI>FANQd/62^1()HAq4+=a$uT5II';rX7bc7'=Z:'H)]Ei3mIt6l\!dNr$1YeL-PC1&(K[r
%^\9kkgqEXZH[4`Ffu_q$o"3[NX>Ni]!]ku^XMS$ThL!SYnX)'jorQikK%hp)*e%55Q5Y*3Cg_M^G*m2EXKjL>G45-Zi4l8X*0Kf=
%H@PP=WdW0a*bA,+([AW'N4YDO\67Ifb[%NK%(LUAF$\53]^*%m?G=N$mAtjV6b_j\b4&JFf:%V+-aS<,oQe"F,rh`\J,:X3nq_=4
%]L5/oo8%4K:Tni[/*BQlHW<kU=)"/MmU4GV5:r+Gc`guO9Q8E>9A@eL/=83Hl/:e)pVkp(4e0.V^cpH)<kS^KqA(<)\[YtF>,T"l
%0/#M6:R:b3YH9WJqs*69<NbKiYNh0dY-M:`Sp\:P7JQ#_@b(lN4NqZ,]Sk!22K,d#JpW'F(;?-eQM4]c$j@MWF+oo>f^cQAmNXG^
%FuOJ][.aG2JOh`o=rZSD]</L&ge?ROlFks+Ge*A,C"IA^A?f;jI*?IE%eeNI>LgHnqd8dI+\cFZb0<,"\e@:)P\V6(\-mLF:(t1O
%n5`lNc^\UnmX<[cE[/7`G#J.`Q.A]'FV*EMe[bQ5`uss'c'+t7NW*=D$nOAaE;qV9I.%(uBq",\Vp-mPg'%[YY:f`RHh1eHdHpGl
%]^mk!FS+Kd+2'emm^B`;0K)9;4!HeuZ[#LIF:Fp+]9h9nHm\H)D>RTk]5ZhS;,8'JG`gZAb4sr3=fB*<=)",het=L/W`(LJL-0j_
%\]*:>;:fW2m#W1ZoO;\18`T2aV.Mk-cphaJiaM`[\pf/'os;]2oYWt927)P:Y-J$')OaBM>-D1I^Eh]IZQ<aEDljNJp`+PG%'d'Y
%O5,L$@BY5n41OkpC2ND;IQR/\]j6RKo&CN>MqMPs>j*-]/.)9gMmK!3(6Ml%HLAdT[Mt)9ffT5>rf(Jmpq2bQGuU@AGJ5t:F.#Yf
%/u-"Ek_A,]b:bf?5%S*6=BuOA:;&\nb\c(3Zao2A_;/cthp.B/3*Pkok;#ia]pXVudAVG(k))!qm*F&\I6N0h9kRgLhqbf\7]Qof
%rV*i[X*mY\?TZBcH*gtCTDKOFKShb1q+Am+2!A(#m/&o6SJ)7X5OuQW!P,V+!<R<g2nNA?K]et6hTKL)G7SaN%8Cm*D<Yl]=oY.A
%9PI0F+m>N^`M(D4Is>lV6[t]0XY-L6#'>JI&%7"6J"eE^c;dWOGEL:Zl`W6[>:6$d;!bnEY0>((/UZK)+=:EBIn_kW46pYLoSD83
%+t+Kr0>auCOf=uA4_!$C9@3WBH\l<P@.leLmtME<E^0a(V6]p7X\WmuB!sl.6oPpQ=T.qgmPC!@g3kkV9^pS:gWcVic<"Moqnu^;
%k8ql"G[q`W)=fW8.NCc\.><I7-EQDoJ)0Q-p;%J><GlC,mJp>gWZH'm:NNiq[_het1VLO!F:Sm3CttU=:;s,1hVGO2lJ:B&b^`lD
%ehF2Xdl6(,>A#h^YIrTDcQ%+7X/d"lgWXP:b:QV$lW#ouKo:hTqmnj&?>gSF/[$43lkXg5%Gp]tcj7Mb;IT0mrbV+&]e847WZF<J
%qft!tFo1TQFoK2WS_Z.oT"]SBgKfi9-!Y2ba*m16b&j=b:60*BT0<$G(A[[IQmDX]I/#>gT[P<klcqOO,NOs,>^*>KSIJ,[VDg$k
%hnJK]A[dT$n<Jmto@_e:,.uYC$d2N?<OS8QgCLa]6sU>1CNft#\&Q:%hCF3S(,E'7*>]il2[WPH/tAPXg=Gu<Xjo_-6"WdKB_gbV
%P>:Q3(KCX83SdYc%rl?1>[$U07boc=b@8[t(EZ4S]UR0;5%raCg+V0@F2sR<;QQAYQ\@6LOk(b,q9/[Z!aP>`pVrW%3FjE!Hq$>J
%=:af.0Aq(cJur&mR1WuqD<KfY[H??%c+\H%q0TQWqW2VPVL@!jZVMMc8Nn_Ob9qWIP.iFNeCTd%Y\2:&a6h32\[@3hU])*?cU<\]
%L4.M$CQ%?VFh"Z`ocZ<k[!?\VH(-s<+-_,8X=(h:R2fM[,uVp&b9lZ`7ohRo5H]I]AbO^obIalO]cTl=]^L#gO=b;00=$Y]9*Kgq
%fdpuh38NEo#t0k%f/b265KlE!jYO_^qC[;^/J2Gf]_rB?dFW#(\SNY2dFMB0L-/_bk%^;id\oZWlPD(PMoKAnCQGaG1Qls;SYKXI
%4f,@<=*N9P\_PVFEB/@]':n:Md64h[B),bG%dH,_]dM_#/pan@Qjm)BrSd%ek/-<S47p+ap*.,]?DNZIQ0HO`ca,"f8dE:X:S)F:
%5Akj[J_=V0CR3hQN3JU&i8S70k_luu?Lu^RVdpH(-%Z$Sqg.&TIl5sb<NUSNpPV\_ZEG'b1\NAFf<5Z"ZHr!0>$!45TKTtIhbQ&0
%,]Y\&rpk2kGB+3XSCOpCp!<4<1^sT%NT=FW!%B",Fjc7&R26t-Jj'f4P/G2^6Kdd'@.0M)'KQWJ=)u=hDjL8]lo&sm=hg]Oj/m^b
%3'5GL6qEr^);%ErgWJ$\\!E,oZBtMpIXa#Z?X6O5r&k!k[l==NBDWD]`k/d:>;Ng&co57FM*.`GpX@gYoCq$bf9Q(.c,.Rh&RN^\
%;c^U/!5!^h.rMa*+TLf3XaF:<A<&SGA+E<OjFo6=,*sNQc]iI`!D5`)Ch@6qjn%e\^UAQ$B0W#:<ggkJg/?E=ac66C0k,En-JW7.
%DWW!Vm50-W=6VdW6KE03hXg<+GI7/EKA*uE\A!&k/*?;UB5a7rhIj?UEo#S#htd%dF8f%qHe,dC=C[WbhV!-aPJ9r-9?t?=P:aSP
%1Ucn):]BRL47>BCRcTHUqbOq45)FSfb7?R@I@1&@[+hRebDf+CF6O1L^N6Yc\TUha[F9hU-[)Vc*3\2$?)6tTV>(@B5I>aGk$FM+
%i+lg-%QICd*0uZi)>g#Kea^XC06ZS):,DYR'[H@M&c7e,V[ptkb&$Zd1]6Wq.9cs)rq9C87Hr+>+9.e3T_;W*VoC5W,9(b'rp/r&
%X^kC4(</D4b-/G/2I_cgpgP(i;XN:IJ,H@"0k;39n$f,VjbEOk=K$*(GquP0p,,#OAj5HkS+#bSrt\hsUcjLAB@4!4b0aXTf[0>7
%g:(dNMqUe8TrV)"%aop/S^aAMUrhU)W'mP9_"(B]0'_XC[6ZH\2]XptKl1)IJYm1*g'\n>0D_97eT8C1D20P0e%VOuaI'63GE)>Z
%0CAQl&R3WnSek9tIbG*UC.YsMm=h!$<8,eX3kV@ig2S-o8*X3h3?$e$UQI#jX^0-/'&R`/.9k9bW'cMC3Rf4l78GM3r=k\u*Yq)=
%C"*uO9`nBD$)qcC#&8qXcuZ.2m9qu]1c?qFp-T^!@*oO%)R<-hK!B)r6AH%fO-[o)ZlN=`LH;eV6F^JH$fUq!Jeb(KTD!HUF(t>[
%9l3>L/?7j]_DsN#U_UACoR<19_n`#`BpJW.-1mq??%12ldMD+$#'S^oXeBJ>]ndO0Zs'j(WK:_eBul4HT=2GKa*V6VFraPV[Tl7:
%)gZ3'[mi%I$D42j\"%ProiUk'[,o]Xd_Z.ZULR`rG1rkIUkl6k&'_V-g<rrWRL>DHdrP<WQH,2aEEGMWeYJT<g;[>X^e8@/Q8nq2
%3C58X0O4iM&YMn+B[NKPmi_6W/_U5taG:1>-:<+8%r@XL0i!OAU<tLCe#3u/bDRMQa/=L:.VVtX!\L:D7D\b4#r*m`,,2;u3W^j`
%LB<5H7I-2!h8E]7.>&c(=eX%eb2Z[.:OUXSXW[83+ZH&@Bn@gR\IK(-I\;PF9$u_!45'b.Qoq3Fg2\qFcqObP@`0RDKBF@WMl3DB
%FJ)m`rEC$HhplG;C!+pZE<:mW@I,gM.LFQbF9;*rna%tfiX1H!P8;WPh#ITZW&@1l`8Si>h[n0sNi1*]Ks$&C`/hVVJO/V!4A8/j
%*]c^JoU^a??F1_V,gY&S-D!>q6C0TcerZh%"_bs`d^BLn5@S'.6pcMo*,i9DLDCdQJ`?qk#U1"H8LOj0=?>P/<1mf35g,LRdlqW,
%O'3)jBYa:oXm*M1`1J5;FCa;@DO0ab4.g9:7SBFqM(Co&IUK0)E#[=6+TZC_C0(X,.+B(cQLnfU6NgLeLb%56#UFT4&d/aR`##fA
%Y/`1.PPI+tSnNeG!t,54pr)kW&t/BNfUR/CKVMR!L8ZOcKFG8&0HU#7-QWf73As*sou/hBTP'G*oZZH7VcE3g+,pr!LEWdTL@>Kl
%#YBhSME5eQgDEmt'.[8f$PV4uOuVZe8C@*DGXUVDa)jeq/!m7>fN>",T2s)EI<8"rkMu.^<(JLT,-IRCPfGSW-8b*O0jkPJ;t4%,
%&RIjG:;Di<,'k'R;1md.GqnfF66Y?%41UYQMsH4u[ICNia?XG#?'_Rf<mW:+"G?r9p_agoj?-f14%(cFM2<uf.-\YP`@4>oNs.DC
%N"&OX0p:g%3YJq41Q6pgdPOpZC57MB+uXLj#MOa)ViCXTQ4!og7'D]"$_b"FQ:DE!*X"i\!J\s]`,s@0Y0G]$_2/&%,tJsj0Mb$`
%],J8=,bW>D$VM'%])c"8Q)M:_1YL3*OVhT2Vg?9D*p[HB>[BRf47ED5'V?Yi]-QK#?^@+UPKg\j%X_*.cUIs"3:$m,.$F*W?(s";
%*fFL4MO*M<p^esoVSZqZ@RG*uU+'NMLa5,m65rl?E"V5B)q"^6>7O^k6A7F^L]ktJYW)'S!u:+B7]O7im3N?1L6@r1EC(!Y)@"G1
%9Hf2b6s<McbZK)nZ\Q/8N1;-Xo>8l7H5_Dk>R7&JcDJ9rKW#TIXLoI-X["F2Zq_<.'ksSe^d/Q,d\WdJWj[U(W@Q/#q*:12[TS\(
%LO8f</Z^`Y@!dWW$>CAV2G%JcFdUd_1kp[odQZEIU<K=<T(Hb'1$+gkOd&]lE4n(4]l/gj7m.d'/R.O$`*l=sQK8IMphVZ^Za>I<
%%"q:s0fpM-4;O;0JM_HgAeo.LK[_'"2/80J%i(.mC:UJ[>DIIZ%=*=H1jon)MqRs.3(Rp#k>H@H60p;djr@JDZ;:SO2WPVV[>)KY
%_:&H'RIB'6U)9Bo#?'4^Ql6\bM[-kPWCG9s_<SbTH3\I.$5t`l8s&/D%AT>HXIq-[lP6^N")=-f'Y9iH(QitCK1h=dZWJEVfk?`q
%Ui&UmJX'X*J1M_L?>UH/Y^<)@fj9CoFZm&uYd[ja8$Z31Q\hL>I#/1sM'N``Bi&JnM=E'Zl/9(F:bn<!W=Xm.-:R7lm^f.k8XN<X
%)@CI<M$?eTK#);1ocWq<*];r.P!N?Hp8,iMGnrdL,(6C<0\Z]s^lp&fk(Ku/Bm[qfFeo>s2%V05UWrX,_8s#Qd_O`0=m%=!-jW=>
%CS6n/-Qs0c=J))o?]$Di-%WbKpUL>@kkG>`oFn#VM'b%aWCs6<"YjnQJOVE6f+p"p.U"GT<GKLZ8A.9IPCV+k2n9J*&E?g,6CC6R
%[Tjt)Hu`EW/(.cM]p\RbFG<[]466`4.N+b9qOoSqc%r7u>DpEA(/!8?.n(^)*Eaf:2asmIA<BGm#F<Q1?3%;:d_a&QU7qf9P^A)k
%oYa)'68+;Mf!8Rk[/*tJX00?V!?pETng^&e+e,DR]dm;[FQp([*JeLOA.i@:6Du6t2'`MU8i0=%N"?Y"[T9VrWE#B\R$(I%OC@ZI
%$5Aup/%4gI)KZP5Smk9b!LR[DC^[=_\;Nb77!.?fP-cjk/BJ(IdTW#<)]o^CT[Tleq>m'U9f]G@1"&=<=$`E35mkIa)C@$u$P2k!
%=XkgP$-5_Jeoa.)?`8ZOac?h'"Ahb/_1dI`^#AR1a>rioG$D2+iVSd<(do:[@Ts)g+Il8a+jYic'sKDXgZ,Q?Yh@8HUK(VGS'cg.
%9%q/Qan02)`)EP<OH.>-Zng!ZOB8-cd8\l_3Q$/C1f9Ru$I^0=3Xh\&Y94"uh<B'$a"3494;>hn*GAeecP-_Wl9W,PRd:=MJA":`
%+E.doQ,fg-'I-I:Ce4Q:3Rr_Q$ht>5mD0gjVru/@,;IFeT#A!jlDT<"iE3DJG6)U.T$VkA]E;[0ZdG\d2.EqV,st^kW,Ju_BLbE%
%aoNJ#Yb)<K=bHt?JhG$(@2Vk:kJ5^Q`=[O'i)kY(7SN8*U$.T+Sgr1`9T`qZJg@%dND0[i&-PUY'"n\K88n8I<q(*U>Hqod^'TMV
%M5D;%&P$HTljWb\.Hk>$!3*n7$;qC,6t?D-(,:Yt43[h_fNth-<:C%Cd]lnkqCDnD4%-r:Hl*HB,cN>\_=3h+qj=9q+WW#+oa"]s
%Kjo0[E+']*5eCfgT*fG77AY9=o#'Hf^=XS9+2!A)9TGDP#qo`t,nnZa<$.WL&)JQl`mcP3^]<)#B(TNOo:'Qh45??cY#+*_7Oi-$
%&4m)b=L+%L2-BIQL^c*LChB&r2k'LeKLB7g<a*icdQf9;b/e]1K9FpsZrf*mB7^*)2Uaua^k9GT(?tgS#V@.J8q*gq@"VK&X5=Y*
%%3bioJp&!0d0?h,RgmoZaEAFP3=gKZ13u?CQQm]k!qfCsfm'eV/g)Q5H?,Am+!qq#1,^2Q6t:"08&P<oLLK*H[uc;RYt'`'aI$G?
%JD;,1Y_WU:$ITK1X(fk^AMasWTFgf)#q2XD7dt[/G&0^LOh6Ma$jP^[bk;SR<^C%;M\@3U!'W7.!,D_e`)oCB*Khf0_-qu,02p@S
%-=CdS54DMAF4^dt$qL,4qSD!`9sfKBN+)*=,l4fVU]XorXiRoXGp.".*RGDpf4@('*)l*`fI1j+b=c>rhZZ.7AEcH*ob7f82?7H\
%6Y/A3)kY6&`*adAr#o+MR&R=\$D8Ll1,to5^#Zo4U(#]b;S7GcJeYeU`OlXme4Tsar[j9'Sg1foKJ)13'-k;.!8PWO$SX)dFo`@m
%#f<J7gL=d2LM%is\:pdtVVjTfQn7;Mk`AsX_8,7Ai3F,7'1Nrg&""rE8Pgoe%!89b),_U1URC1ZfIhCT-kGqr'J>?r!*4mBMM\!?
%m/fP7b]lOnNnF-@Z/WTk0!/Q>!AM\.]h_\0#IkSUhZrg6K#fB+)ns,Ep`(@5CktifW"4psTNB2;8Q(Y+LVY>B1Hi`J6aF9(2;(Z:
%lseDuI0`l@\M/s"C1;k37Bl3aU3p-;)R:Hj57#(3j.33+.;Jrhnl`lG8ImpnnqB8%J4^MCgL=.)HTGO_Lt"b!#rP$h.^:eglR9T2
%>h4@7(G"FifO1tS*ENYR@X4:p8iG%1&h27c#$ts&*$WXT&m%[fYnF<<RLpBG5qAbU"_>rP28"SR*tX*\kIO9u&0E)m&3t:,NORop
%S1lFTEu[*RMh'kn[X6+8El:S'5qA-G-Irr83oE&Wm='i/%\O2!c$3('qR.N3OOc<#Ji6hsT#,h\aL20r=\&rH`5?_RK3Z54M/HR8
%+NFJBR)^8U/N/ASmL!XO'@.&HY[q3LBEDL`cOl!BnJHkP!=j>qFm*4),?NX+`'5D:98_=7r5#Y[j)mN[_#,CJd2mQ%c?R)(YJP+n
%dQh3G0CQa7$8Fp&@:'P.65*r+>p+b(jWXW-_8n]@+i]RE*"!h1"FHM/I#s9t4'HS9>$O_E;LjK[mfceo+r2rP@>bB&)$GnF3\FVu
%5a2]j!J)Q<'-IKRg6[-8*.WUH'1/tAbI:`/6eO_X&L7@\`BX[P<lLQlqXES`nUT0lT/2i=TT^p:L+aD%B<[GsfhdDW974oj>"%U#
%b4'7Y2H8n.',i#'-=u0DJ0>.!*/;7r"Hugi_[HS*/DBFr=^o)F'(c@TE<'8G3$^ROHrTU7"-m?5!Y>bU=H(Xr2V:C45F>N&lc9qf
%mPW'4"8Am0`(4E1m5Y5/i\=sdI+XP:$p0W95iE[_m19ddM`<JEM"q4`Q52K27bs3#mrH4&D.3JfjG)A.H4,sQ<\kk"=7Ai90]$L0
%Xp=k7/qjWAh@sYuXi-r+XCQJp4TUlh89AGd5qJ\'M3>fn"gj2q,@5PXjU!4Fq1p]dYfH%P"pogVTdZ:SH.rGR.L:2P[KQ?N$]V"@
%Lu+C\Lo!tCf[8^G#'>A>9C-8tAncm\C.NSF.L&-R3(f(T!X!j=JJ)=4fXkYFg#*C"S[&o`_3"[+\C(HY\?[Xqlms9HZK`!53Y7gF
%p5GcQfF)Q6PT^Ehr&D#kA.d6V_5u(hOg26anmlBiP?eIE7:9=P+>j?WrD:jE%BP1d'/1tjJf!>HN[QuuTPb-&"H"2N2nVHb(76;#
%a'_$aXr"e;86cCX'#O5%joVl!NqR!+`%AWj)Br:^!eV)h><sc44^U+kA&Og*$qY,jHi`4Dq9-PkGoo1eRRhr\0BLBhD#N;t5=/t7
%aL?rTc0>\2a^M:!iqN[I,Ff=<[ZB6WBa%2^m6WD5a.?`?QNYUAcV=fX%f.1'2lph=+5e;%i9,^-BOj9Z!iLfi[BfC;7CrYa"kmq'
%E[C)1S#N^n_L)dl.YLq5,VTe_7Ud)L!`Q'XSMU<_L^8>>I\]G`ITm6G,')ca>sm*b.&*BS!1b=@&[8^ei"b#NhAr5jC=X:K;.,_(
%:")E`kof?V)]6KuPqbm+I-EprJYd2nIY3VBaD[*60KR+Qi&P(eP3lY+Qfd84pMB`>)]BoV)TIr.5RBaiE8Z]LCnLh()'S$34TGNH
%Ak4!9<MVo'&]AO6,X#6L,m&PS"T^/[FMWbP>horA%j44a07\Kos,L9pR_cgJZjoh"P`0=;ZS\>T6]Sr2jAsonOM.oXJ:e#m+P*!4
%;HOaT&TJDrAuaJX.>0s=:^E%P_kN.";rUF-?#@AZ1>A&6>`%!#Qi`frnOU*Im;hCp.[=!AjDJXE6*`,UGXWQk-ajhcjoS:td@aDt
%NkW/`E1P1>6$I\V?7cX,7^HKdK/I_cn2(M0+tZS[(G/8#f";Z#3O1Ra`\jHILiki?SsX9>KbauH?;kgbTNU4Y3&&Pf7'qqekREJ1
%c*ptMm?$;E0nQ/*8`ISjE+*koO\V1L+TBoIOnKP!L6h4_WjGSk_hq;@MW2bS9.fLBZq9)>(pO&]BQ0CjK!W)RdARIbkjHe\#*-d&
%23<M._#mAFIV^<>oGB13!5^T5+rO+6RqlVfOCRed$9@;aggELs5fa7Y"Ie-T9V;=I1S8(8)+[X`&Ima(?jm9s3%R(`l"s0:d]dXV
%,HPjj2Xl&k?n,2VOP$fKM&`Q%ClBqIdOl$X>sciO1%JNP`r&1hO)53%'_D\616AFI^]Vq(Y[ZQ)3,kI)S9,LO]B009,RG%!qt3X1
%.ki,eRm$1W8V)k9&q,5A)WWr[,\l4'-4tmfbcDj0rt6G%;K^YN7ehqp#r]11n7I97BFA3H9*Cg0Y`Of`2Q7]B(-'/U(>K<`A"$s`
%+A\1q&-g:AfT;F=m"n;G%B!/K[N)OET421aE(G0rK'Z#:`BoAY&q,/[PDgKm_Og*Y#6s?i#]$cqAP$'d2Fo#C1)Dd+!!<KBTH!<E
%7l\A,4LXK38"QFV/15.((IRXl!pj\/1oPtd!D-6?MH<>(&d+?!"9Lt3&ZrmrfLpgr!m1V[6'Af!gDH\$6>?^io0A\5S&7NZi,-Q9
%J_b/H*%EWg"\EsFfa6kC;f!%ZAkrfK&dpSj7%pSr@nSj@41L5e+N2ErIu%=9A;S[KG[8iM.0uG62IrnN,N_1b;*NRKB8am`>!OT&
%MF>6.@l!(t']d6DJ:0Fo"!8:<+J]8uG(A[&GdR_&CRXjF36$Xg!I:tT9:Ka-Ar'lKn3ji6Cnq%Ck,;3X/arn'6Tg5'!*d=r<[`MC
%f/>f,#fc&3'+>#R5mX*=iPA?KPk^2!,C1.-+>`5]EE^J_VV17!7,U*)XgI/1_-[Rthf'(Gs,DRrMG["q8S]1sj'KT3N3U5,$ZrJG
%+Rl^&0&:8+dZ,RoC]d_Cfk;[5c:s]DKqM,0DBSWdB6>>"`.uIT3!GDnOF%0%/2BPM[P`f?Ec#;;Z#$4">Y-"[&'"4K^rqa3.k9Or
%'bWj(^5B9o%LZ=q5/=B*<j8@gI,IDa!ATmM$qSVd/C$o=,&BX1=5T%$gjl/R7__5N.o,7oN[70r>gOr>Hu'==+Zj&l8Ej5R7/3J@
%YGe48XiKrsLB6YTGDm:\94+2,?t(18AfuMXm\.]8n;c=(JA50MQRKlas8Pq$$BgVhCj^m]Hsl2pO+n4rltMQC14cVZ@5+8+rIZot
%30+5'IK0eV%.Ccj/nY9e[Xi%(NatHngVA2eed/tjH#4`t+h3oaGf>MSTkGBO>a?re,K)T60abs(;$@/'*07dB#C[\5nIDU_^ldD6
%$YZ^&68.WT6%ho]!Ws1^j<Cu\5Ts[P&/%"Gr$m:<i]bh?YigX*UfVf<d'?AS'Og.*"u=Y)#hMkB&$iZ\-lNeG#XO6cSFIU;c]ofY
%n=J=4/3e55qgTlB*E!&@8IX*BW<uKC)$H,3,cMAIb)dnM&ePtjK/a)j#(ZQ<4-2,SM/7imE&iV;=Wh3PD&Q(/M?"jtK@+V$=[R=&
%W:DQ[.[O`;._OVKqSt+-H1]fe+6F8XE[D;*O=[BK.artaYcVD&b<nZBH-kTe,dLd=T#J5I0$=Ge"gnpF+=W(K**=%5Y-A7q]uA-d
%'-e2h*[O5YWQLOJ/dIM.gAo!!VeC?WbV$qkmU67AFi6r[]=&@=DiPqrWZ(r"iD<t()%V`\q$0tK>NkH,XE2_MXq]5,T9k..8A$W#
%'A#*fS!04Um%!(&Nor,bL%GuJ1:sN?_KW4P!U_*"B+#t\cP."$BJhBZG!HoRDMOl2$QY#]>0U3(b*'l^;=t&YZo%)&@`JK2SAG+)
%#rOe8^t"#QqE\L#G1b]O!HThtV%!X71lFAj,dF'nV7m`M,!H^=:ngLdSS_k0E=pY@Z<T`B(`UP;eg;p$`G4fHQt:ucjHmC'au^g$
%?$:mgc4n[CNe)9HI4/ge(#+BIh\PbE6K#,Z_WEpl))t)=!qjs<&@-"?$9d9(BgJ<oliOVOp.TQSi*7N[@^H-N-^`(6BQ=F#f]-YC
%)5&;I7Ktke;jedWQ.'4[6'E2_/BU<)R0`kVlj0'>99L+Saok=/M3At7`5tU$pehH`60rIhAA/`MjTZ;1=hm52'YYS`9;0idVi/JV
%D3Db!+LJBPaNBLlKrq2-nNmem+%XlcKn@.p^joE-m3rlNAhuF!b=.G&ZF4R-L%/n+qM/2&1UQ,p;7$F5,lm0MM;c$`B]qX1^>=tX
%X^a/WL)iS*r/T^\-45JQJZ'.C14go]*hL,\<q4iO/>rrJglXk.jqn.m1q9C;)<)3f.HNCcW%R8H1=%30F@Z7/Vn72>c"s$UIg!)+
%=:3asGac1CCSP4t[=2g!b&A(W3QV*l=o/1'iP`!_j5rH,3DuQ)K#g&Sh,5sCESc@bCFKDj\L+`/f+GF$aE'8;+=uD$jH]_(Ag@h!
%#q0W-13A`h$uUc3'WKCjli7V$!E[?Ne==ntP(k_(a:LYpJu$?g^3H2.Z@PA-8@J2:6j`r//1dGoNj\J8+Q#^S`/uoM!sR;I+^,^%
%P,nr2kp#3kOHgDc[Vqo>5/;,S,XdHA(J_G\"!\k#O!RHadVO8^PPuZ$B'3(\hSq*/>$a`.i#DbCY5j+bI23_3PTH@fKVMe%+P0$Q
%80oRBf+ss^J-@jZ:Pf9C!-raPZj>Up7n412@<$WV6bj1,?kPI_pc9QOVGRa17K_c3;`)kJ*eIT/CCC)YQDrH/Z0!#rr!W_CN85;#
%5tmu3["o_d3Y[=mCRUG0R=F-O\rnekJNkS/__a3=h'2g>AN2igfY#,D>G3eM8FIDe_$(O26JH%fEELrHOZ@*n'TtdO*+*"%\<2OL
%:a%\95N3C_S09?Q<9BXH6'EKhOejYMPW\Z&RF%%LN,1i<i$-;U=p[m@G>TQ#e,h0eD4>WI+5o[!@#/M8i+Q;-$uI$]k!_`BFp<nK
%OGOdB,S3`/"k[,BKFZ?&begju.r^#;j;^K4DG',NiB7RoP"@!"h$AVO+KseRHu*2q4LRTZ;?RSI8#Q1@*NR9%5^F0[.#D7!@3)dW
%TH`%n7MOa?S_F^_T?)O-G_4.!`rBWAm`IpNR<PfE<5V,T1%R"3%>]Zc`;)BfQmp>CJ0u*6Y#JfE!SV']JJQUA2Y0Ldg2KJ?78I]O
%OkRqk$dTW9'djQX3R`PU'ePDY.5Hb-LtDf3-ZT;p2XtV@NUR#$,cbDS`CV4"FTE)[F.df((bUDOH$-h'9fsfGnV8_$cW-gk[q/PN
%,"(,k7<62eFsKR_C9_2t3Vm?0B[Pi/RUo&WEb$%1Vudo6Ok>ja3*o(4>Fs5A0%aE60Sg*sJ0I:s1@d#I.1>ao&M8c*,*n'J_e9bI
%+2FXelm1)gN2@)IU!6`I@:Yq?3*@b#6L03tQ)6iO6LDj<"GU@)9cD"/s$.((&G^OY*&r&urTsk/6h9-eGdNi9(rBQ4)VRZT#+$OD
%f0(jeNRe9u+F78.5rLd\jl!X%e>&RJ=F;YB8qi&=2Plqm@b(\0BV7GeX"P1-XC7f;Zb6_BZ68Z>@;@r:b\Ct&DbNB^j,>BA?7H@2
%'5oXW=!g>UNuE+FcY/iq'6fib3EmAb2%2pfK")gUfs)b_.Ksi-M&HQ0PY5FJ8L]\OKjN93X#RnK?tsB1%HPBo6s1c;8@&<>r4n+L
%=s^pf<<X_mhfI#=_Bu[Tna'Lk*-&Q?('c7@=3MuQ1]SB9N=Jcl@CJm1*mo^S(DTu:Qr;$"o$A!eGqL'LA%C"0)esA_Y\VR=&rfDM
%Tl5lq53V;OgQ*"7N))`,%u#fOKA*li^!V`tn)oNC78uoQHkPpm+F8rEBEP]'N4f@l^^Ej>g5Q60D]F0R38Z[!WqMQG!5hEh"tAUa
%flHB"$DX\:@T#,l<Qh?C:,Gn.jq;#/G,tCgS4(7G4#2>&m<)i;O6I(*E<D&<.rc)]nB<$:e_(EjnLjc&3)SP.^W5`Y?QMD>J?K)8
%`t$d@Z'Wa%F$?J_KUg?Q9;XV;>mHc!*7+r;K<o8k`6#mYF;P&gg6INr=:FEr4pr_Pq&rtZcop*q)VX<nKoa;P+MDMbS)Juc:`Kt*
%q#l(m"Rri6Buq4K&4](47\S><9oal7[>PY^A1,6[",]3Dp1$g-5d>+`KRdig4u8eV#Pfr8k:@cSRupNaj!;(/&H_S?>1AY&&lrrs
%YB,hr'M7KjR.%<$f5P4e6cTJ[E@Rioq2C'G#F?Do1oPCtaMBEHQ:?4Kh*So4nT^1Y[iu&2?jCGgV"Zk[&OhN,,+@IpXsm5fU>[ma
%TsVk&2a3A$H&]5N8''N9<MCnsFIWF\Q9kQS8^DIF-l='##;C$'p`(EcOpdE>8#q<d"TjJ_LN>G31_@=YC`Wh-:s6C\7,6F77Ni.@
%AEU;k7u7=?$K9`bVF6j4L`fB\;o/9SN=DB3B@ZEhYR9QZ3K4YEiPFCe1BgT5>V.S8aKT9O>;8u!BbI5d)2h2\-j_0e"Z%-T#?6Lh
%/%!(,N&cp^!9We_["J[BaKWS6!-Ig^21$>R!ZmlQ$]l#[%'"RYe\GDq>TQ#4LnK;!Y8NFB4QN"GeKQum&0L&Yq9rRMLOne-*:r>1
%4ofJr,Z,^I58oU'5!iqKhF@@?CL[,M!\?[g5h$Vfa3J^/-a'N.<$2FN%7%I#*Wb^>%Z,pl?6`QaZ]'EMXS<47bL'dS1UY=W-5I",
%Zf_tI0o=&(BcV1;g1`a%b%(Wa+jl<s)>K!k97e:JS8SN@p_jeN!B?+pj1M=-U]^!-?Z+g-b"*Tr.?GK8]Hgl*.J9?.p_\ttNP+m7
%%eLB&5U/;1c>t1/f/*?l5\%(`8G*sjJ<+2pO9/LoA)io]T<'8H9@1PsR&`hK[)XVb8BSsf%D9'P1mQAl*8M=,(P?'/3)iG;YCcia
%TVCe%1sZ12`TIc1,H+_iRT=f/Li#X2f\eG5ZioLN'E6oeL"fs"7?WCc9LVd?@oB:_(\g[o&t7tK.=<fVQ/L3s,Th7D3MI-O[rU7-
%Vq?!tFAW)$,^Yf_^]CDbSE`R=Sr]XNI!-T.-B'Oo7!pY>ihI(dhdSkmGpq3JA?u>AAsu1fA9[N6>r_#]D$gkajtd)l^PF>uXq(Ll
%!KWete?WDsm1m?/&K.2d0f5PPc&7Gf&n5oA7I2$C[U<?P#MA?icj78)n-m`)paCb]l6HuXGuVFd^h0sL-,D%g.mFa<(6WB.9qkc?
%?pu07&>Fr_6\-%G,a8i%o7A.A)-i&&Cdoo<B3_Fr11t&%HrZ$U6kZrk66DYe,no1C_::Aa'F[TWVA5j(D@kX@iNV`K^kMgkTnH?8
%'J`V&OO++!/S+4>g^W2rZBRI?>FQmV?WI6'6-fKFf(cYA&!iIgj@%rPPV&8m3QI#&C0OM9c>MYV>(q#f36VL7Dg=HKa$]F1=L?GD
%*,\-`@>I<N4pPamH6#*e5.:k\7@SL</M`p$lejmGL#b1Zhh;0XpEqp-YCp`+Bo^jk&NFmV[0=)=^bM0/^mEuDBV1V-\4e"OUgtGK
%;F3jH'1&IG#T<iJ'MKjp#r_$e0UEa;TS:E*_'(=M]*!$so)Qp`3$Ot[J-F6-A-g8/Yi0T;/ITco2i%L);W/qq_-;<d2Ip,[p__$t
%fn5Ef+un+WK%lI/i0ZhRL[9[!/-o+kAgt$970)6[^MOJCTg:l"V3"i83HEL((SLh^aB[FA[pD@jpg(M]^_L)mb/%Q$q?c3Blmr9;
%II>@m)li,_U2QQDQ97,b"&I9qLnc.*"/k5.cLLuC80_[bRhc2ZVfJJq7%)<!-_;R-+^0dY#CM7GbDa>h[Q+dI2\.;c%6;0Li,^uW
%?TrVS-R78T8!,^O91V_LD:>V;FL[E`D&'FTESR!Y-qK6%Me"1K^dT^0!J"(+@>YUM$Sr?[R84lt8@/[u.u'57%Pq6DZQP!UF#)Z:
%Q^q>s)B-61[D,`lYk&>m9sGkXAe:+^OdB=<.k!rqU"!M/QqsTkX>Lu.;g?%3e_tQ(f)bSrWtmTeK-&d\?nK?#:4+H-n)CJPA`cL_
%"<AW*_2GHFn,u<fFDQ$Z%M`j;FU+QLNqfoL_$?VR)i;?[>#_2$#O%`pDhKe6iY%5uIEj\D!`NWF=]Y5Z6b["XjQn@5%Q4PCnc?^s
%"6Y'8KL28uDjVND>&m7E$n']N?j+Gl/;hN7cuS*$n!bLQkIUF6CrdF]n6$t/mW%sW=>9fL!O=_[W_qM+8YJ,<A4`[Y`kkU[nPZeZ
%Hult7jH%4R/F.4cDIJ05^rKA]nUu8tMbDnGNu+e`*!=/K1-@;pS6^1F"<[<@HncQse0i;W`K9"SQ-8tn*Zr:SV%geAgCRW4A\\CR
%n-qqhYUiP[;1'SgV^15_LtGZbU?1Mq+ikq[<&gYmR1_DQ0sL/!3JNbli("8p<b'<MHNs<OWl+rObAQ!r"<tYillsi#-rC)Q?U.NM
%!\M-g::'lg!T52Ua+qR#-]uEka)`*AM@:3>(Xt,A&BIm'TBsR6@DK3FVtbpV^sNOJrC*tf*:XM)0YG=`KoMksOBZ\XW!!;/:6Qkn
%!%!ZEWB$)VTe.U6ai3aGc0*"h#PfH$L<?YH'Jf9G/(`,OJVg]oLb81_GOS>2<t6i47*(25W;%^VJ2<64\0FL5*9]:'R@#H3/B;=#
%LM,iBjW=u\.[<;u/Vn`8?/2Cq8D:]`5`mI7=N=TA([Q=UTt%;=-(Nbc`7sp(@2X!]oDu?)1DHcBM^%]LiB]mu+MM$p_3&EhdW0nK
%jQN'PWI2GI%h>OTR>YOq!jQR-59-n[7R6m+,OCH:LNnoo)Bt5oMd3gV,K_+eHZgAKT!^T9:RTi8.VaLAI%q4EI)SoeD6=sG>esjh
%9b&eeP+eg+;\[)r@s/Wp$JoS9!Jdg_6-%h%T=3`@>Qb6:,_cfr8'6d1!%m0pJq.RX'm'Ee1+PU4%3]X-_qeSW0lZFIj`T^Y<f$Vo
%@*1H"]>iA*/;![+StcnhE`?e(^A51*:#\R2EPW-e#+qA0.WXj:'Il:*a,+$e1i$H;1-*:r$]cKbFuK=R2hD6GE],$<5nO4&>bht1
%5nTmU>iZg!d,@V?Cst%EI>NFKdMjfjaZ<hN^X`X>F=l_Ro5/X0(Vt,eVT'bcS&ANe+%Y<NOuhO[J,qo!:>9Egc]K_W(am%d.E[c)
%^.JYbQA32Y8dro)r"WfVjKJ',M^"PH`hR$-<66#_!;*X8GTV+7YRR=o9$UdWL'P4!S&KqkZGAj%HsYU@X-"]"S)UY)i@Z+TN"?[m
%kRmt06N\SSQimlNXXk`ZPAA?I4"ab;gd>I@=RaaDIkg<3[hGu#L,=22%`tE+!/Z5t?uuEV_?:gr@jih<Dh)oHpp_^&c-f(Zie0>H
%lAT+kL7uN<Oihd_p5%jX/^U#X\+6;<)>.$XBqspE[4G0=nf7l+ei7Tg)Tb9]c2dM\+8WgcP*Q9E=<o>n?a.k%A[]A-QNe!+Zd8a6
%D4CEZ!?-#UhVmd@@#o:#"(S/q5p71u*oCkQMA9%Bj;>CSV2Qqn\q'.P8ofN840eQI6"C`7#1'M:UL'U-I<M*!`<<D=mK@,-@q,P4
%$4][1I+$e/af-U$&B^,/i5%[.+diGO73Nc)'o;n<I"*l!ZAo]q"=Si]b#(L_g`_@$F(%*#Fb^A3JF/Gqc;@\=[3^/I*TctSmR^1F
%EKGa%Rn+is/!c8%i#oU8R26kEE>,8.TIc_"JDI*tVDF!iE<FKG0Ridb)X$Yle$24Q.)p6RcFHo*\\48H7Sp03fb+Wj""*o'<tffH
%Z.$p?'2inO`e(I?+<JR1>X$1EnF7H`VF^HCBY,u14NfFjKj6sf]]oZj++d]`XhaQ0/;Fb8nYndXSSO7[+PT<>5`Lu<\/#ugG[-<5
%Z@Glm!tj))kaWG8hY;IO-Jmj2NF?l3!)TL&gq5=K[_I&I4`nKB7ptcDXbmA&VplR\@pfB$h=slAJ;,Zmi@YPQDAonC.CoIJ;DUK-
%Wc%q<_0#e$pmDEIE8J)7%D(rl^l.(A=:YG(Fcj]l?%g3>,>OTSP(@(QcJp_=h#g?b*5:U';omg)i/+@g.mEa8jH[:TC/0!K>eVnJ
%D2q*^Hm,m1OlI[1".[<-e_op"I(BNob?)Y4L/Xfs"b8r/7D\J^/9>M+3tfD_\3(.e,IVG7A,s[!]W*rP':q-i*Q3AF0F4A'!6K1B
%OFT9J0-:es_MB57be'H^*.H-uAF>+Hs'2/]Y?"#<9ogr"6QlK).L:i?Bd5JIkCB*ubit%A<:H[X:(in92%F544,dPU>O6GK4CC^o
%'nC4]PWiL2,+?=qUu50$cSGk;HrX,g3eG\TTb!H9>-9@8EU[P"%PBES>t>,:YJp<UG`bC+-t&)TH*,6@G&"ftJ+[7pd92"%5Z5M#
%'(6T!_?U2$VBMOHEBPQh8Y.SibE5N5<nO?O7+F7GeR@f>B`kgK`Z4"(I/&:d4t5dd0bRt>iSJ6Cp4;rY!l3qnj?inI.eqj#^AV?\
%P&R9q5t5\dSBJ\c`g6C'2Y'\?%g40_bk;kE3A=l7]Ke.mc)W>P;&EDajR;Rs*(Xj$o'Pq/F0I1_H<+X3[A1=qHbbam]]p[Lb"755
%Qal[]jNnAY%qeda>d%qWH[I1]Cb?/uSGR816Ve2"0cgYY-@qF\g6_uPDiE-fn?.`r%KKu>?b4IPn:A3Pe,@fX*G=5F_d4AolVqG)
%atoR/Hk"7tFs"b;'FZ6lPf":s_mg3;oFU3.1,[ahr#mt<lRF!Zjpi5jiReI3Upbr5$3ItqgaAh45!kgq"5aEZpi?Z+=^`;/M^)2<
%)jjU`ju7/6FWoZ<p`0T6\.eAWJ>rP-[H(!Q3S_eJhOH8\+J_BJ^qZD9-6ED!\m_\n1H4Of%9/4gYquA&Y5jLWO>A!Y5C;Rr@nG)o
%B:T%[Tk"3^M#0X/'cWf6JT=\j(73@nr6.:/Wr(:&B)XeXncrc.fNt14Q'mbSnVaq\(4`h%*s]"e<P`ZR&[.0?,(a8EN)5L-.B-V/
%64M7p\?IGIJ]["e\os#r&Ug;h.0b@Q1`<$lA\Nj8-Qc^haeQti.m2mj\E!]>K.N7Z#*M\2:8q2E\12e+`m5b;_;A9"6qp_&4hkc_
%ikY83:LB7Q(J//IAtYZfpF\EP,U--:1;V)3^[L/8b8D+J8*Hu"d<dQGUkbp_V>+bf;jCul]^$>;4BFb^k*(R_'dMuj<fB)[^,oaP
%RM>Q[i]7j"F2XS"0\-PDC,Eb-#_"P1Be&RIs5:<Y?h>Fg=YZ20kTQJ(<hWO.UFS!O#<6]qp%MaXP)hsEb>Y>QZC&@DSb-YO9pl>4
%a]'EH4PLIHn&IA8If)"_'.OU#h-hl)!?m?$&/KBl:gMA+W$k6VL`'9^e1S&AQs6<Z^22?l?a(#u+Od<]RVA&3cLZiUf02.JU%d25
%TgF5kHUh'`Jb.B:lho'Ka[)i/ligb9Ao]hQVALh[En\\a0DXC#4KUjr\Tck7qG,Z)UQ4g/R%`7Dl)1r-@j(jcf^nmY"AZ%Y+DAWG
%eh#giE$L,gYrd;T-AiukrteI%&bJn]7X[)S5_(H:Rq9='2H;<>b?\:G'K^-fWJNa/g52^FRs,Ei/U6MY39:Km6uo,;$%dC/_)Uia
%7!W>`.WSP=?OfiM4SC(t!.1doT]a595'_#rXXt]W&RgPh"e+@gn#/b[R&E[.K,Tt>'h[i'Km%'87!ipX-P^32I;EH!j5NsO:Ro4c
%[u[@3<_<Fe>[m:UgY!+n[&B,ifqjfrib.+/^9jYkZoA>:7>KnfLXUbU`nsZTU&]Qh;4RIP7@uZ3S/&(.(2,J.^Pd,DPqrqj@VA]A
%G"Apj2I]?S"_pAh<":Eh<YPNh4^DPaooAI+$EfEG?I@)FdShiV1^>nRWhLf8F\ShL:7Zf6K!p[W'_hM[ACV0ddkH5<k<lK[b\fW<
%B^N<Q\&Xh_G(O8R.T#+qU@[Q[+Z&:\@]&,M&!9pe0Db'n2*nXU'%64U,R?9a\\`c"l5PN<2(Q)SL4L.4Sg-=B$-FZHBG.s+#P=;>
%?c]6%$GD&K.FJWl5E+%no<h=bSY]U9S'XP=.8C\/M2mejakK"g5beCL?uj1tRD-B'O`MR=V$gTN-l$k[<HYSn,MpsB7"2d<bI7U+
%S2?!M7'ITPY6n?5@HqRO^H$L.47Z!&[bYbgMOS?8+D97@(lk_m-`J\o6FgjnK;uab<mXG8^+/;M!<.eDp'<(]Oi(2cO-,Y2!p(hm
%j9-k'<W_bZ<><Ph#k$SF9ekOQjN=G4?ap5'@V(A6JqJ(FXnlR]TC!;Md`m5;>1&p2s01bjg7JBuWB3`:eoJ)3eq5UnbPZq6q[M31
%=6tldqG^9G,Z\(SVH6u3#BF>qeJpFV*UIU!le2cbKN]6dFkR?=`40MSOab>1Q0GeP=b81E'F!]qW)D.)LhX;Ce+'j*NE[rQ;\s<`
%iaU&FZQ]?1AgAL'9fI(':K?psDU[9tEaDFI'fspp$<5441$;*Upb4b%3*Nd"q8SY6FmZj\mKm<B5]k!)P@YKZ^@i?]>7D:$8\V^4
%00/FGgJTBGQ:")L#5i-$mMtTK7\WGND?NI\hL\qTGY__Io?f6pqGmb0&.'F*]c8A=,mcW%n\fNV!(@h',t]/ca^M-[*HOY%IG=]T
%L'@3PUk@,QO9qG*:`i]4c%*S\>=QfV&qj<$EjjH:8<bEaP?,L[0P-tfP06cdF-o?T*<hU(GPlWbJJ8S>Fm/G86NDli1.;g:fHE\$
%FRlIF`_]:^LgL^cC'U%m8X;:o/OL7lVd>>8U$Z")DfH/o1[]jDMK!A+"-%bfOAtmtkc:t9`2<"R9b!g97r#:gRI6Y"\gR6_&:B-Z
%Q`$D!6BZdHSN>;tbCe;Q0UfL'eLfgkBc12lOWPUBZsp9H0&q,NmW=Q$/6CSl1(WYDdP`V<cKnmrEI/7@j:f=G\GfH$"%cL^InQp#
%V@I1;^`dG3`&(97N<Xlp)-6"Ti/?q715SuAKWUGOS8ZUM'l%4CRMf!&/`L+!*p$q2Y*IX^#':FZ&V:*Q&%"oLDDU$[;N"FMYnHM,
%=Y]h6nM?AUW(5[/j/>DXDmIhI_JXAT,YM$/&AckP\18SgBat].Yag=)F60iW4&K>/[isS#\tb#9o6\2u.1N)>c!j%7-Mc2]/W5_s
%koQIuf'mOD!a1Y!g9(coK@mfBAQ-N2d'XR#e>G[6Dg!7(D;k$O>YW:di/J:g&g'q:hBbM`gi)7q*Hp\hk&cgK\gaO*Ic><S-S@Q&
%!jet4as:s&Yk<lYFf`qB&Mt+]N3$?V*4`>#ME>4DjTqeOUJHP@OceZjbf;'\.6%*".cC\UZ!'UReB$8M@C6M`>`RCs67+)2[(:XD
%TS%6Q5IN7IeeOdjXq%-H99<Y)@'kPRek%>MFkkE!Lt1bcf_qa\M#6)+-[=lVAGqF>'EW6A8-Z"e*8ebc:ADocJcpqX)tD"[=W5+b
%SU(dP=HqhK;?rmhbt%l\k5a"g#tCNh6L4!]p'?;<efGj#B;]Q*,h9K4<Fp4^1&:r<:i?(=7TOYOf]kNe%+8MPj0Md5Gk+[`M#F*)
%V%iDXFCHQ5THT\HOb.,MGFqej-QnnaAlt>;(/*AK&We<tHV<R&a\l/".+OLQ)>5WnSQmmn/=1VgTEp:R#YQ':1!%O;,</r?=sLV[
%'ie(TBgaL!r@fcIONShXE'jY,ePCHQcS/$h,6cV%Uol)aZnMFG*]oN6F%^Qm;`[]0ihnr2A!b!NlL4+d/e]so'PC%*;YCqT(Sgg'
%[,l`C0Z%uE"g;OIj#`]p]LYh9kMN>p*R00m&$Ks&11Br=SrKNLXU_rhaZ0diZqgmM6Og1h\3*ZL.+/8^iJejo;q0%mmV5T*80Mk$
%fcLfMPTt:CMGZBj=%W+rJURg#UuP'_=(&M-O]!%73TfF!Oe*=9djL(3ffA3R:+9g^7u\]jG@uUq$@)(*>k\Ji$LQg;k]c#;V;R)o
%#e>E=%>_836ja`#9sLF,g@j"j@e3'SoR+(bNB7R!4p=ulAs.BNAoq.?ghub'?iHmhB&!Z+F];\a&E"h&2")J;"J6tb=M+nB`nn:E
%/pD;PUJ#^`@=OCLF8N*hZ<1#3`&EcsFV!)C;R"`A:9?p,@gCoofo3Y_r>\8f"SuVth7Jt@Ur!aGmK%-JM%H2LQ5qCEWqmPPNs%4U
%:6P[Ce?T6CB3M3pd=igCHQLZ!KF\A.i3F#H=ssk%+4aT(/[j(m5s\7[$p)FEZYW*(c<b(Wp-4sA:X4Yj3k*9%aqjXFm\T\"$E.N&
%BWr-lFjUsKeIeH+dWj/,>6BcA?:$@kU[[Ba\PrWP8&ONqh)33a?dQZ8LYI:_mp(&DR*Kj5<4\JE20,OJ)Prhf*3+-+JL&;]>!W<K
%&>=OC]$K15SdGCEih$kIpOE.ns"]&c+aa%Re/g4QEC)H^d$k#)>XaeXBK!aC:&\7$1]L!Kd,XZA4/$tO+k:_)Xm`m(_9(&gl]+Z)
%C0ssSJ1gtG8"H(`L%c=4!qamPI!D/W2>,@M/5g,LfnZ>8opnLK6Hpn9<sOM<:,U=BoKu$a?R>_)c%P'I;k<pJk]'6J?GY8*9kK<r
%W'S(\5ZckWp'OaEOf<!))(s?OKZ#)J`72aY_IBr]AtZSX;#^DM.07\,`[o.O_5"AOn-.R3e.pW0%,>O2*AW+a^9>>h/!=KbFlRuh
%;qfGU+B+nP<@ZtZOLd2O#EP\sFePpYM0k%tV06ob]*i2'gcA9Bm/17rY_m+1p:3q7;f,"P8,:1@V"l_+#e6^i+`_dI'&8A]Kf5c[
%qS>m?!QH_O:^g=OqTC23iAro^d/c@Pee>LL2/`G4LaA:=W=WnBAQ;uKShW=3&pm^FZLrW]s-;PrjsDT?<J;l2pZ<d1a9(E^WJ2hZ
%AY)E)BH%rr68Kal7D2`LT4L@RHGX(d^OgJl,^<=skUsfcBd0`F2Jm1fc)S;Z0^ZqR%MQRW;+M='ffbD5O5a_G6Rj=l+)2=V7iu27
%GNb]@W=0rPKj)"iQN11a::8)1EsEjm-.W[@?bH-h%2Yk1`.Pc>+uW'46ML"h4,%cL(!8!IH)YMG1T%c>gnKeK@]\<WAbGi.gt1pa
%b1RO,b&unK0nD\-Vm>%MKnTj@=9'%.\HY*?"am&TBs%Hd8qAjXcQ^Eb5*S$/B8uj`M&OddH8W"[/bA=hFWe(De_BQ6h6<t!8NnO^
%eb@CD>:!LM*7V;_YA7E&-[/k^ljQH*K/FOA/U6f_J<jI!VQm>8.hPQ%gSfjVBj/H`J8bV7)`3rDkX#s[r\os#%VKg^]X;@[Q6+?u
%c4&*+\2&TUbDLZm%"Y6DpX<)KF-:/o@oMaA/stGQ.ZT5H"d8mh4C+<9%<Pg/<RHU/*M@WXVe>KQa\[4`p$eQ_ktH\.g[d1WPRl!M
%c\,glYS4c&Q$au[$+Nt]qPjqVRYj0]'J6lGV$'"=D.m8Tip[sK3,S?e8;54rV%]PpGF4KdBbuPD:g\0`7t;B9o'&',a$;c-D@-CX
%S`di3:5/4#c%M3W$4*uqF>qsNIZYT6PKcHt0348LrDli#\Lk6PSH+q.;ij'=GecPq%8DV8EOm0Abm5)Fmp9M[74mW?X2Rth%u6H@
%c_$f`R6ELh;jDab[Rt[=fq)r4=LNl&/D0@XAa0)pfA!Xp_CRi4Z-MLa@2.$9MK:Wd%@7cuG%p\h@D,\K"i-r].Jo[]Ebb-X*##l<
%8<)t\)B,lFOW`T-dE/Ab2C<;nZ([0q;0s2T]S]I&ES\YNbuqcO)Yn*+s8R4l/V'kI73)ok,nhI[JHjmWWsU+Hk/5k]LdQpkdOeaJ
%Xr>^LVh!2Z9>N>\%r;ac;:TnmJ;E!gV*oBP<@N_07qjfN)jQu],M1ctM'^5FMQD+_AV2`q-(=3+>HoS1"gGg/BsbF!nug:C&^V.3
%ctMr2"GWSL5Hft'f7GBf[Gfgjl9k*<g#X?W'QjFk3D,NU?*ZQ;*h2.']!b>bXh*#)W`WI-b)XupoPI_J,DYKT>[&qPE,H<OWTfm6
%-picM12$9]T\V)W%K;lA2LGVSJH#JL:EE/cA*5i"(U^q![uQ(^+.I#>j=9P$i%@<9/0,;^SSMni#mnr[P?QLg&f:[k,g&.!q+%/^
%R[ia'A[DHS"8luo9o7dWMsX(')YH.fX2XsYprH>BSOuYWd*/B$Z:om6WdbDJR0`f^I@iToIqP_W`4p`L2+HC!AAUes=j=1J<-;#j
%FLAKjW5Q/2_h`i^qnEDk0DD=\*j;"Pb&ff[DVc4s-26L5a^g/F2LO;#F3qumccQ%3<3qAh>Y'PJJFZHT$kgY6CNCLLnEYn\8873h
%mDt3.-QPJ%TG=Jg!\i)hE%BNBQDu?U78@]h@0*g//jAU\>%rD9Y=R."KMhfh,[@p>"j=9YQiRemg/]FWgn;U%Un#$sNcRe,&[[s)
%j%,;7lP6k'2RFd.@DVgb&ma=']5CTDJYV.%;N\-6_gsY1IS+>jb!n/\df6,26kMqgiq/3^In%,6]+2+2E7PHg&X[;sSpTWH0jS+7
%TSZ-/*>a*WR0!sNX_]UpfhKqg&'!*!39SQKh5B('=iDS<FgQ4`4$'_D0!LSRU3/rjU`/<-mab,b"9PAndp9IofJQ07BX;09Xp9jd
%/$/dY(&k%tig/F.6SP&eSl,SuZ@='f].RiTabWMbF%j-!Br[Js=%2(8MguV6nRA"W:_V['3@r1::KH=npUC0ME[uV_2rb0L"ZoZO
%6Asqp'^!6A7U9B@iKq(#Gup.C>p2cTMcMAL_)>V!+I<jI!F[f!p40!:S.%nc[n!!TWS5(3QPi]F@\"e0&WC@GU'dh#JYr48[c]@"
%r1UVmTWe>h]WV?\LL$bq7S]Q_GC=_f?[j%,7+XWqa#hbK*uf+6nq&RhHYb%:"FL5HO&l9='I!kt@Ps&J+\@(BZSJR2%1HM[bY?B/
%nHuQZ/J8rfJ(luu"?=0tR<Y[AP%ZZ\mB$D'>M1b5@ShKW="Ub<9#';cOr\p5bi24-ZB/,PV_P5OXn.=WIJ.VHWYc;)e:Vt4Jp\(?
%`O0ZnG@hMUU9t60B@0>SJHP=%jqi!\Rnn"ffV+eDYL>g6Y$.aF3ZNc8E.,D!F`)r!/P>&=R9:4`8Th7U8@cY]ps:8()@S2AnRFGa
%cri6T($G#&]0:Kk@Dae;=hSB^Sol(\=isGW9Z5ZH/)h3"`aKc\!@/<Deo_Zu@$dJl6]fW5NccXcUb1*(iZ,l^<KY=i>s4goQqei*
%9U]JK5/MHd(5W*<,GD7O@nH76F_8/WBaZJf)][FE)e*H+I+d[9o\J?9#Z<SB1Gs6sE<^7cH?9o`WC6<4[&Bk&'5CMVMu1`C4B`k\
%2^p:<0[:%BLo&;CgoNS\P2=N!=9H^=rIpgIVO[FkS=q!D5^"<,FNgk-ccpj0_;LBmI5hZ6V71$CQVZK3fu&*RK7oU=AG@35ddq`n
%iXE@SbD[^i/?tS>(aRpf46uDgEc>D@oCOJHd$KVb$`?V0REf6>fco?UBK*KL;2S7=o4c7Ec5*]sl)(#KYhImcVKq>,9I5JAou6(C
%bc\d(qoRSVG;t(::*G$CBq,.OEQSspk)\jp%oHB70f^l_Q[>-Xj<9br;3o8W*C[&-A'^>)"hXQr/$LQ^Ba$>cGr"J+l/%jFCKRpG
%)uBV+&u:+7[8i:0(dqMjT*6*I75:n-2%DZ\H'6^14rPZd>tI9T5a#GdOjB&PHZZJeP#+T/I!9AQ?=D?<K[\2,MNror9Wc908U>/d
%[qJ&FJZ9AZW^.R*ZIZ"odfa:tC^8#`VW`)"Y>(%H;M1o&G`lA*L$l*Pe<`m09+fc$7?FJam1M!]W_:ud%[dP#8g_$3ZL*WtmQ-*7
%cQrMXh/h'Jq\&^scIe[_ULf>X'OfNT%UtBC5N>nj(kO3i12Aod;M8\\0N8&5;TVkrkqF2.+L9t._AMO;`fRp\F@tlC$%_W)C31cU
%<E]`jFVm[HdsOb73QFb/VML2M!sN1H>C)GY,deucW:>:Z83`O'7a]mGnW*RGb8kofE4=K$>Kk]IjBKtL-Y4"C!#No_=4ReTdm\U2
%4C,t!@9hd[13kaN0KJ5diLnjL8d:^S%UYH>c7[Xdm=n\EAsnFX,#'0Sa_Z7F\ZU7ej&pDUm!\*h80U3%AN__Yck_g_cu5jicJQj?
%"2"p3%pR(r3K*ih(,=V/A9OUkZK2@$B]AM/S)-;I>-cl3`1'V7W;@"l?7lu6lGRWSTC^Pa>R+/^s6MD"qq?,;NkZ"]+:u`MM]ta+
%S9o!@7R?CG[;->2b7*ITH!C"%l*-@T>eaR/AIPGF,abcT/!ml=^dWM.<DacaAS;+L3pSu#;C\S[9/JVYlMpA70:k0mSPJoQpIqC^
%O2_CYa\2o//"ErH>h'?O+I]'SN4$2.(Aa5"]dAUE4udT<NSF0r>+hBjm4?O<G5r14UlW1,fNQ6_Ro58,HrtdNIa;hp28\'M]SpK`
%hD+"Q2Jjdagjq;fo<7/TmlLLY"+D=UA'-qU:g::4QBt>,amZ`d"@X(u?<S-N^?'=TPHo!k>'X"Z'mEGui/A06RIIoc6;slFAS/AH
%-If@h,B]h7O3+0ukdrd7CUXUp87c=sG$8L.!T^MT:C>^&CM84:OWl[)WchRbREKE^2GO#<e"B36nga)uDi%rESD.[aY<"j=A+doQ
%:5c<;=bHJ.MuDa7c+!uG:^NTXG!^'9c-MN,M_`daf)<8H;`%Q[Y23]13O)96bH@q(:,_4oo)^9Z;4%q]M=N4V"ui;t0_K\F@KG4C
%"G`slXT38%X%W._0(^diPtF)+3RriC&/87%1RZ>(VB/B<:^R*]gHKu!r7>4R;hP;T[\ua2He7!=FGV9]#jcjAbK:gR?>CT<1@7\A
%I#3g.fPuF"C68i+b;iL"T+2!:8We?:ZebV:.AW5CC-!lO]`FaD74B<M:<2<OC4>mbE[:5rPN.#s=]m%j(bWd&/e3t.guk$Y1POh9
%n'3DZjT7iV3"[L\O(&_N=?%&5F[NqaPjPiRb,IUUe+mO5J,0&DJ9faEGs]4/cVC<t&meAVma>Y$LRL:RB[4:$UI/4"-=U[(_)rQ`
%iP*/-N@5ASFo@4T4SUPk%C]rdLmAmV8C`F*7oPhb\E/pfWs!jrp![TX.-.sSM-C6Ac6:YK#XX4:_k>a<)Pb-]XS?Xqr\m_;8*E5B
%PYYWZf5#d8#?bpCECN&/bcM(85Iic[Ybor[1qU++^sO!^NR3=!0BkUa*mB)/lj*,cLiN7d`P%:#%Z4bSAU_=oXL0tT'`BOL#Iu*2
%fH'+1>6o(P<En;L+H#X/hq)NXSuVhdVoi(5E5O\3mZFhInpYo<-]]Ufj!hqV7,4]Na_?5oW^/Y_G>4Br+Ot,L2r<JKCQ'.hIC19C
%(hBW7d?SIh7GT3BkD(0Elk]9$D6MqKPJYM5c7Pj.JS$1%3-l//9ra<-:NI^Y=*'QjQ]7HB^?,u4VegC?i(n:gm,:Whqf2hF%s#7,
%D5(>>n-VF&oAfQ.E7L&_83g\Ii$=aIjHKDuTR:O86j:36!UWBUfnSV7YYO@8h1MS+KE=DT=5:W7>]@8Tf2h.O;Cgr-!BsK+&$`0+
%a0n+Z\:N?g*o?MadrN(L?0(6s*6-p<?HXrV"*=>+.2j^/:DIR+;NlD8g>5=THlS-I/hI6"Mjp>-[i"69h!Pl-R.0TOMWVp^Y9qO,
%pJBk*A0\4nIM+Bgi3S";q;s&"DP'ci9Du:c@DkLd?*](nDu8>K6qJY.1l;9eR`p!I@:g/g[-cAOfFVg/jV>n&BJ2(:.]'cmm,2*:
%lH?po![P)-/*Fc48mi?WpXVr9*TV,i?kna0/u@(@4k,.F(Tt<K#MDTPWCPej$/704;tZ#M&Of3Tma5B*H.aQ@:=bOgn+_LW1hr9X
%*BbnS<1$aj/@<+q9D;[P0+%@;h(c\8Mua\9L_NPddIJ<h/8NQkho8por,hf!Ad.?[itf4fJg;AMILt>#Fh\#j$=0&]s!?=CB9;Ce
%NnGnmN)/='\V#2&ZMnUU,=N@DPoNZ$LQ6J1#(.#dL&1D%<$3Mb35]ab]F<`"M9a-^6)1NYZr88K%@jNT>l<3:H^.g*2R2OW8u`6d
%Y4HJ#3;g9!c1<RCCKiffKj8;R(1AX["*9Q1qQ5,20/k18r"?$%i\n$0?_aG8E]3I,X`uWZi+mP_qcl!Wd(j0Yagc;JB+uP`;Ic4h
%)<MdGiiM7Bk3:F'k4O/Ye2US<6:FACXYW`7s&J?#h.&"d7'@/#bs9FQ[t'aS7@2D*nob'&*mc'cWp(l3ga@%<U=lgtTG6_VA@(ug
%3'qe-ROr`Ag01CCZA(FnHXP95P$3X:"*_Erp%oG!#t<3Q9]38gaQ?d68Ujo-@jcs((S;qs1JbBAHm")agY!bXnXq<-6]-tcf-AlN
%"aLFk+pkWjeAAJ,P2$Z8G?U2$K,5"M)q/+J;O,gKEO3%gYFF6s$!ME]J3k88PCYCkhYb@#28oY6VEu1gVGcIPatqoXE&h`/HTHbX
%FgSJD6DUqQh;+qlj0495-6?_b'.];Y])N\a>4@d(??m"N?30iAL"n2-RmBXQmHA.XBec_*X:<`Zj+0R!?As"i2W?P]G"3D;o6VA%
%Q*"#l]c?bu9/YWb4R7miOrXCsWRA^>m%&B*<'XXPUE9rT;<?C0"Mr,IAZ;:r8h.4UE5k)n*8Y3!Qh0s'*bDj_l<=gjo#//<0Sor&
%"Hd9XZT!c^Y5i<sQcPnKS0Fkh80A(L<t`^:CgGENBN3cFXYT8RmZqi48bIVu\$U4&K<(<.P$n#Eg6)t$W`FSPC8Sdb#.H&_@]OfA
%`Ga8PKun-e.Fmq*k#h4=@qU_3:'Gp5SM%fgb12B!_\%OUdY%?c7IKZ#Vg*<V'sZo[p*PZ2APFqc.J(p\aGnu`2Y6.2?)H;>,jGPJ
%gJ-F5Cg(ptd2"/t)i7)q"1#93?ZIkF`W-0I,O.M!J2GQ=+-.Tl\2f!uX0A!#1"@KgMW%`BCJG(`1CS[.>tLit76sl9#%/cC$.8,_
%Q,(n%j$b^4a&D2+mLJ-&T7'#]2t3K!'0*(9^+AYPqIo.Y3`1l;[l]an/;eEep0(tr/;pT_&1ioZG`ho8kq]%/WWg/M=mB7QI0ME#
%X2>QmeGsjG'0M)aH;Ul1^4j#A&Xtdn8F3<SA'E'+c5)tIO[dO,7:+ZAC\7.8@:re,$TV.2(?X#Vr`i7@Sjde(=,j0Ep+5Jm,:\*S
%Glq\EQ1L5/:a,35CYW/SQYU_e`g25>VgF,l)R(4^m!=+"oR`5W(C!>M&k*%`1"p-)hT;iPR)1H.D8*&/.SK3"(+Dsc8>4JQ]VHbB
%ke943c+J`LrsCRJQEGT.P$ENB^;mb')N4c)+(1F^fs`*b>:6!SbWL9N@<PY(3elni\(rKR+<7Q2]F)0IJjY3tRrk9$8u,b)-ef1I
%ZqM]K^9a;e93$h1'jMAa;OWGYoX5i>U`:SWo9=,;orSk(4<kW55o-/!i<#b!MH977=i"6hN3#l#o/Pt]N87\q?PuoVK<=,<WU;@)
%.@m+!+P]8igtZ4@V^>C<lB:j#MEmo:JcF&&6^9^]d@jkCf]7mLFnjUC3n/=J5(0$'+JI=]$!qE.p,4,6<eRl:/Hq=%G9)+NK8a"&
%GI8'AX<NT;j]OV\MAL*OEG]-QiQ#Fc]gc!5<o#:0p3E'LGB1%>Hnpa3\qI!F]&LG@B."djSR're,kNSZP4KT+[X/OF-&A@c=<u:m
%f\-c8YRs3Z_q,5IC0M(']6+`B2'fAm;+$n;7FX1<7(Zq#LbfRX0YUD[9>qX(V>,!]:8DRC$IHZn.+*gpIVSsV14DAh_6tWHJO(8n
%F\LpT_K:$XjEF*$1$@IASn!Q?g'R.Sb*RMcZu8,JT/hpR3?cW`g833pA>Y/-DoQU#\"^0MO^cja>"dqZNO.Er'Vt`/isb:'4K]r#
%^(E4G7I8e:('[G_YoJI3EF+?33a7[@UpLPPA+=EG=**FeL;0C+8DPNrD1`Qt.@sUjeo%`05YP,0h=Vr'S#rS@WAM#tkrS@YOb)i]
%`O<I0:rI"7Zl+l7Hnf6!jFNl&P7Vd$$Bb[L^tN[D(%Y]qgL?bg#FSVm!&2&he""B?'o]01T\>HAB0KT;(3Q+VJ5tDdX$/crjBKRK
%ikCLg>hf4FMpmfnXMq`R\PBtKe52?6GE$4)^=FlVds.<=`)0V#IuV\F9#G1g[J'4@'&C8-_tcQLA65\E3Y4#Z$ig;W$.9i#'Z9:O
%6u!u6&c<%1"\CVu\B0T]XU$L,D3.,JO"b=O:3Y)YpGZ=H4;+Rir>sDtf/-ZWn.DOu6]t]Tek^@C$*h\adH$USi4!=E(T/e6iT/LE
%oUkGfOkl/j>0&;I)V:c+-u"@!SI-0o6]n*_F7K]j$qNc.&,0]a])EppT-MBcloh_\YaQt1ek!?LR'tN(PafW(0)_0s=G:S'f3%ZJ
%ltc*2N>*F*DBU<j"CEQpbaBhiFHW^=B4D*>E'&cA,DVL'5%6"hHOG8`37cM&"b&@S)K;3r$:0!r$ULAuNs]b)I#;7t\20\EEKk`t
%*2tU;oa$%E2#ah2l\U,VDl>mY\O/fhZ-3;nc+-,UfjSA)-(*0.2coMa^Yr^?/LEncL0G9_NYNP>M<GFTlX7[7l?#&%>u"r(2/SeQ
%L(;.9WAN"bee^pedmWqHF4XLV)OH^77-[2h`h"2]c3Xs5!@ut9)JBF64hfr0=)XFq`3gQ_dEaSt9rhp"(06)$5pO1oHW5;e?AMa\
%2,_AmEZ#c,/[9bf^s]2S;!`9<$)24K'%RGk.,mg!586T,$mQnS\f@51Y,fm!N^.L3G:3Md)?RKBqTInsUISi_F.W'@JQ,!j&J6TB
%dWO7'lTKam,hHb,JmQdmfj2Ft`pK?BYdY$8L@:4>d]K\hklUE@Ws!_$-CIOo`h]TtMK$R-27<Yd>g&_NDOq@'i.5Oqa+4[b.nkAZ
%0hd?V[<BkA,c$'B'\Tp1cl'`q%<^ljDD.(>puF0rm]+h68V&&t\\@mha;/,EXO8e7c%\IJnem2S_1NM&Q2=\'j^%9:Eq8G][q@@V
%e*Ab;YLOgB)1_*<<Uj2U.O9qTOf%feOY%V7#u<0V/\'PKTfusN&%Qc!%ilkZ4g`a-[Z@Wej<5M@I>g[lOmfno;c_LKJUIY%YM#XS
%"LcuWBo$PB?&]TS<IADj>,oAF)]@tmoR;mhZUK(<S$H,$36rJ"j?DZ:;S6Tj)N9t#)R*1HJ"LMp["*bYlpaC,*&;71C>Pg@e4,?!
%;piX7GfAhU+nXX13HBEXLPN)U[e8KO`J%p,S-.mb`E5QqEk($[l#'E&N79HA[1%F%ns-Nd\rj[[$>ou2n-V0IrocP(Y<ZNiSPNl0
%$QmaS8<3'/=_fg6B#$-%%LV.j1>4`.j`eeTYO1QD%A,_6Ip!qNFGO)niS@U"MJ-'##3IGkS\0Y2+fmFK-\Je5VAM-$gNdf6^s!WH
%=oqEjda(oCG"V$\Y%YpmH'%^n[%f+E;%-3CTYn-`9/G@[8nOkrjQrh_Po(pYLSfd;K/n/l9\E@0Wud2&)rRf$L"?R#Ok3GhCK)=j
%C>g05ZJ(Ul^jRq)Q38Hb%4;V%akEnk(X_"PL`gE54igPr_SQ&CVK0\[P>0Y,*=&i:9L?-PElcD`L2?_1VhEJue`EgtjAHfA:!q>S
%"7"RR+,,;eb+>00iul7Hi\L13j(H=Ro)pBl]d@q@.G"A=.kc:.$])uZC<ULl$J;!Q\]KT2r=)&*/tB?b,t@Y7=<!tD%0Hb@*gEOK
%7Ck6\q[8^:L6.lGq$9R6E#.=$;::.fD]C^j^HulmaXbKQ.sBk>Y&K6*X2XPGbf+sO][NWkK/oE+\_MB`O$Rq5Ollh6K*UNUQ)0##
%`;3%e6nq(2k9#RF?:N>V_oV7cR*jG?Bd%47m8Su')DUI*+Aa.NKBkn.YU#Oi_p\MFej:'n78!.^j'_mBN.OsZcJ^6(bDJ)5:!j=P
%Y/bl2QJ@A+%==*kQ<P3afHP?VpDWFdf+'tM<8@g]:$ssgh=_:>Vu>Bo&V+[BJesqsiMfYS:3%=Hk\$n-\ODae>i>\gJ?oHnArsns
%3H-Qmgg).FaDNrGkRV>]m"VI0GO_Kk>1@+CS`8BZ8$aIi>0P6+p_6%/\FeW@_oEAY6cY,%/4>Mb3W@F/fiG="5VAYXC.6P]aelD$
%)4Ll&1)VjL0OodF2sJ,41:82&j@Lu&Deg*A,7Ht4(F6Yc^NRjnesLL]6t:IW*0Y^j236nZB:"WTp@BX5".7YE7\X]n^-QjWc/&k#
%YV5iUDAFat\_nAOg/^\#X-R!8$4%s;c/^-,T?K0,KOL6uUIHnL;2+uF$_1@sO3pg5^0hOO[>9j]c4BqP5O+ra?KmpO`0SN4k"_\?
%%XYVa][EA^%m#X-H7VodSteb;='t%*NNsbbj@BpjT/@NBgsOi2Mq8T`gL^NVhFpgT,?.QHme;/:R@idK]+US&6`J9!TSTT>E$Vu$
%2)ChlO5ZSr1E&4JnD.CLSP3WW!=o2S>B5m>VO9R63Q2-T3Bk=n*Na1g:<X0^*L:Jaol]Ob(tO*NV3&Qigj)V;]S_ul16i^?on^9C
%(>hA4%`&IbBnao22Ih:s&F!J;9d+jaMNMtYO,)F:$ZPF,O5=BuBoJBh/R#C/p['PV^^!\gr`^EMm!5E1Gu5qD15+7q[\VuG=K5;;
%%jk4pc$H*KbOVnWb!JtUU8\\o\[)Cu#`e4>7KC?5%_Ho#r:7)dr\EC(0:WLOZGS\?,4e[6/`U=aQ"0/;QfoH232$]t,/!d&@kEPa
%q29u:bSe_'AsUNEf3X-=&Y$OmFN;5D+d&XHbBY5aA;58/O^m'kUu[MJC=*BYQT.i5pZHK!P$B8GND?jb^cI<sZ@qtNCn$d-F=qZ'
%h]Wc7g?KEPc#j'-VS*>-C0rePY<?Fk8J=eZ6SPS.4%eZ(EDV-*Ae<8K>/t!r8cItRo=+A1#RPX%W.k9s)rVCrU[d`WOtN+^YgJu6
%NOC&\?a)^"#oieI#:n+),>Pk:FTNJ\G+C.pOIe"'c%%6;h3LHhI2+WYBSJ@$&H^N[2-Xhi;N[dpK;SLmAYQ$i5RFnkW$OaWN9-FE
%N8Dd@BdKdO?M<!"+4#?ucl[1tUc$@A#Tu^[AnX$SNu='*LT(P1XZh`f7%V(qffgQPGaZW%b]fT!W668l)CCC!DUZ&q@b+e`m356c
%]uJ]KEHSf<9_(j$Kf$:&f:BSs;cQXDY#;Sfn>![H;u]d]B#YCJH^^[abuB\3O72r3_9ATo[7+U_%TYdX9WT@I<jE(_aIZ&?f=+Tu
%>J4s6d0cd@kZW3@1mhl3-W<3pY=gAQcqQiKN+KV*Y&Hfu>QUdiA@]jX8M-9lUrZD81h#Y^$.V5iSY"/@Q;NU@+%"g<S7<n@G(+hn
%kDn\S4q6L'[/mHTZ1[ctknLp"MjtDo$&)ifTlQk!BS=@SDQ?Pu!B3X28r.h[GP><QD[pTl`da<-D%_>%eFAf(?qZs*PD[(^H;!N-
%1=Q0B2SaBnP&A+GY(jJ6KrAJRZ$<=&(8i+<Z;CLg*<uXRA[NCViUt#)$$+TbH^bI-18P;S7G?[XJ_"\YMj5So\S<GSlaA*Cg`FN1
%faFk/s3+FUNk:j9<K==Y_8@]"GYc;p0.umS:dnT,$/Tb^LMc=$Qpa1RW'Ni/JHE#3Oe`+;@V\3>&5lR%LMne4$c]%:'hecj^5a6l
%rlB0aoR^UM7]YDPZQK'0'0Z0[HpR#,`>?`&gBmK1b@p#N&5J;prg4rgi_Ab4I_h45B99orMrS:TW)U1:Vq;jkmHsWrFgpr0O;:j<
%I@ig_YZ<o9RpUN7J+hV)L=)JT9Nfc6;$%<T>@kn<-"EmD\dg.7eB_d7UuBUQ7Phm^e`(WVi8S7Jh-]Xo4iA9nc_jP+G*pIN+P;V3
%7b/ZQpt5c?n7^5.p;oCDntr#iaX=^:_k-DoeGO+i5Kr^pf>@kd()b/3InCgK/>XDLeAi*i`8UWJ\,0h<e=U+grmQAo'2LY;[f2^W
%NHX^Q8*6J6mKI^=1-qiH859g8Q'pq`D1!B(Wm===A4DB)D&F&O9YImQK%VQrN[B3-.XEqAMih2u#>.,/LlT(r+P#><Pf1l(h<@45
%;l>]1m"An>L[gO,bM,m8OPCQ'&YB(Pr4kSmpklgKSNm=;lY6>Xa]dX@,Q^@Q8<jPl5hb#`;ukTq73'(\))DjO\n4.EP=9laG]f6<
%^.HhLRt$fq-nY@3:D.@c&HXQ1jOqc2Z3==2;0b]uR+Ti?DBuBoa`0l.O_ULte^@q:'6<V1g=4j(VP*I*+a-aM94J!\H@3it%cTh4
%9]RQ2XEDHS_H%(.WbG_Aai:O,$'1ch+I23<g(4`l6NM@Ol'#%@"CXl.8Qe[q5'(fXg5$1B$q[_^h3@b5N)-;U?hd3tBLpsDH4`_a
%954HUG(CC<`B<]O7"ch!eM*"e`HArco(\)<SqkM0%P+E9BRES?5V%:VeT-aGkYl8"R:U\4TqXDIkG%@rdt.mqbr8:k72V]s!6l3U
%lq!TrPOI^ip*p;uC4,MkG4oYo(,$/r-"5;=Gcnj5+(HZG>6kOh\E<T7SK8D3f%hb%;:g)<`TN9>g]:rKcqH>kT/:*qaURncU+r+M
%S)SOHCgX*tP&F@62i/[7RpdCZT;FArRG,*&FM7N/V'XJ6hH(pl&a?=S\!@4\S$:!g8VR6LBCbpq]-b7drj;V8WaHXfe=ggco)DB?
%o([sc*Pj*lC_/9O"n+KsL@U)/1ZD;C<j<3EM`2ZP'cT"LQeE96@rlIbj=?c-a='#`3dT-f?XGU+8Z8SZRBE_`[TND6Ghd:5oqa"@
%B$7SBU9J@&,KWI\_MGoDBdPA[%UJ6<%"'6X6][=V"hf<>Dcbb4HFYm)>+/lW"?6*_-<3qH:POaQN-^Gi+?0@YWT+.Qnq5?uENO2'
%2UR7.SUYp3Ck<]/WAmA@RP[Y1)Jjd%(0R0tJ3TCGdMN'i$`_U]ZT(CS77\_qC$P_ji7=b#A4GIQ$L3G!H>B5riYcF3FWl4e;K[.]
%nCqAC+U4p+5!:<BkEHR42b[YRg^FN`BPZu_fkp#a#,[IEom'Om_Nm?[O+DmBO?_3Dd5R]cKY&^1*&/Ju(37PbD!-G7(l/G&[q=KY
%VYlDFFAjHX,LQj[ALXOVk7lXo7%YGGf,f72'^e>hQMR2!:j([R>O<;N@nUgClrDsI5ICeoa<AH/rG>=@[AVu1QpVM4XGm==E(@.G
%!^dnP=.pLqq/hkF":N&/M@$<F34aD1E_Nb(nZm@g;"_2p+Y[^"1bs:2MCUg\C9bDe*C3=<`f\iQkfp%f6Lu9imrIr*40:u$9;]/V
%$RO?QA@\Ef"O=/_=n0Dl4OcQ@cJ2:$(3U3eOfi(.HJE%[)-IXS;KMiTE1L?FH`;O[rNCJGs7q&Y&_-iX+k^'\HhJIn,@BS;-S2no
%f2oPQR"-ZWbTNBR_l;CPKp\U@"mB?R-HtfH>:M&oi36nA:jmJ]<G_cn&@GCOg,/P&.'>4q4PqeVec/k,R:"Ae^MBr8q\(SC/u"ja
%js,:@OoHGP"l3ta$!.,,Rq3>:p,!:2WhjD.[M1fJ@6-n&o/Wg:O(&llqMP>hF$QpZC1P,%<ObQ(%FE&npk8Zp`1K4;UGdg^+Ji7.
%KUMMkY2g>7%U\%'=OIPTpWV$cS?5qTB^Jc/S+8/]bA1+1gT[h;!r,_D`dTdj_Gip6j="=)!rK%]Of]ZIlR1$RcY*1?1I?2PbYfu@
%ap>u],?c?se`ZiSAB`HsY*WYblpZcImDNUf75W=17i19UY<GlT$ISO\V-p4<6-(8sWq&9o:)5W0"W7*9O3dRnT257B-U]\/"s8%!
%VSGl4g^9R`)XAgq)+Lj9)%N?.Cca[bC2kac.0iFKZ\es0b-+FCm9<c-+<l]5AShXF&9s>T0">9bIX',b#PI]+rU]]2rd"PtO"AMT
%gYWP;'=1K5acnn(I^6d)d!\YXCV.!,b2D(GpM4Zp*"m>B#&O+L^mF))o(TTp0AoCl7!Xl&`1t](qe1ldoQ:+\^n3f`U@4lD1#S/i
%*Z`bLMH,2)QIZY%Y@TcnX8olGPRJS)!ZGb=2aV??`Ul@H,%+>fH8B9<`5Hd,('L%D"Y=D$7QTb:;*(37df/M,r](+2qLg-+eCngQ
%Wl)6U`XZ2SJbdhmQmCNZXGa4_Q#-]tJsIDDbE=.`I5FuGBOp1HKHi8>_l+FC2]V%\U(.8_P%Q)[]W'$Opp)q<.^&?:<R&k!.ghFa
%]'dX6VP?t*-S"YfZ@+iBm_LV[%tQ[^Au:Jqg?fIK'.*Xq\GS.&*nUBtk.#>AIgWPP.M`g#O;^cap*kEXd`eOgUm3o,'tB>P'GL"=
%+TZu0,&R`@E8^sTJ)r>5opginL]j*q(f&B2-FK'2QVX4BhtSGqD;UJuD0:;G(rZ)1#W.Li,(0GR?dP2hN/5n@,\j/k:MXLDLXrJn
%K-#'KAiEg+Q$#MNIVk37!526PN:sgpJ;g<<SCH(N!TCp0rc8W80#hJAd3TCSJ5/skN*LK+_[RXD[X9c?&+[PESWX_"EJ;lS&X,_H
%rpm'?(O\<U_?V8h]J_U!,<P'@al>_Eiet_72De8Rcs-3kq>!W,Tr6dp"bF.&_;$;U4&L@(X]IO5kbg8BEK?'X'Y-6W/SfrjT#V>H
%&Qc'3d4nul*LVC(cd+4/$Z[ZSYlM.\pC(/io-SSfH%SYUKW64P^DhFP+]8>h<KLA"fgbNU$b-Ap-:!-cc7>J9`@N3\KB=@J:3__3
%MOX"e_PT%5fOc1snDEm`rZ1:TJ(qmACq"_TRV&Pte>fR'6Ia;1*PQo+.8$VaV?.-NY$=>[;Mqe+L^UW:*K%^N3C0/CX'6;OQtg$>
%i=G(GPu(%k,L;W@"rg":fLoH]s60jiNK<kLjWc7q,QQ1f]m`G1<l-.<l=4-F%Zo*?QUB2J`kli@p<aBRPU-\?-FGLHh-5r#R+`:r
%VWO93Vn';\VD`E.0."/`FdsV\=`IODk-$!4H:AnB9V#ou?'O33K(d_nGSOBBa2$9EWQ:9>q@p\iFrD#_,*g/'+OS?pnQHt%ic.Ng
%R5@-'RK_H'"t7$SlapuP[7uTj/#e%\9Vd@U$3MhZnMZ\4:3Fntq%sJR-dJ\K>;D@4r,LoB`)pL!Eu?hmCihl(iCY&cjX?m'U_]EX
%g/GS-b[+uDE"#(JqDM.)Q=f-8/W+`r41d'T.!Z2&N\^RYRb_YrQCuaQP5CGrP+#25jcKL`8tu^U2-tBbfkh(^5M5DBF2ap@jrTd&
%ZqYl)NT)/4>O06a9"<*c.@-f^BD3g6g5cj,]*DlXri5BiViG24o6]s1+TN4!auUU_?@[eas6mNUrf2X)hrSeU?/'s7+=/%a6_<ZU
%:_]%.P^(*.h55oUC(k/o97'No\F_FRGI1;HekGb:co=51!5K%>]WUBq_"(lb?t+BJa<k-MaL!n%kol67@8OlV5&A>+5p2\s65sl#
%'[:+7.O?u,XoakUPJ18#@IM/;+e(U4_QARF&FCA9@':@dOsD##Wk4)lL@^$)WELQ9#X9HihTf>'h4o>aQ2=+q@SiM$o7AUq$<%:Y
%>7FdJ%322t$FsV]_SH<!W?SKK2^H,$r25u_Yb@u@ArYo4<Bj_4kMn>&>$MRKp'OPC)D8(`:JqO=k+&%*7`$/*^rIqa8gdLNWSus@
%WsB/^jV9=p#rPEa.Ql$-rC1`UdTi@YE.J%`MalOo^qP&n/#`*88qDl_R\jRkd8V+(D@L+,!&>mYTJ^Pqa@8lhE@^K`Ur'fE!EbeT
%"eJ(4PE/7#-Oq;39bS6sR0\o>C-@kF/p*K]XrjRN2ns,g25p#`EiegE)6%E:2tA#ijCX)!cmEErS)G+^A0]UOJELKLKL;9joJXh1
%:kcu"9>4a(qOG;,h?.gD4oYtB6]R70qFIoKC)Y63+qC94N^!(>[;a.mk3sk%UaAOfl<B9_GY^]GE;2^7c2-$fQ$ag\ifM>/j;N;*
%Y/qkSnA@R2/Eefpq=U90_b05m2atQSNWMmASaQ@A[VONk*6r8bai8Aj2Y9#[6(,'hA$YNKXlXBJ263VC9A@dM$ai(d&lW0))H*dN
%fD(5MONbSLf3Ff3nTIX,j8*Ui:,;.P<qIf:=j^:tead5hD4E?Kg;1!#cAp"-GaO0%`\aAEPc85tH<]^?_SBkagpY(8A4qf8'*;N*
%V+GssV]AsJlZF09kA?,fVO8`Oe[T:91PI_95AJo;mbRO+3QQ+(-&U)gR'+E*D\5sFqCV*+3SQSs!18Xc2)'/@>%LUW'iSE3RN$8k
%\Wlk/WP5T79QeWcWDj*d=ZjHPZZ>Lb-MYK_X2!$WrhC.CH7n3Xb*$p)TX@@UGfD3L>mQ';MAJIW]JHuRkU/'@`^Jhhg0L=MK^'Js
%,i0Zpn&Uq+YVDC1odg#/c,&A6d]4:dlrL)\VV![Sh9/M*WDb;fZ>FgDgH,&53pG2Q6=,,XBrrj#R)s=>AO))drTiZX'i01,C]I&L
%@MjZ*Z4<)XI<LX(5"hpbp51H<XTu/jH,S!*fI!K+^pP=j)rE$Ds22!<_HMM6En@"<,L\4Hgt,`[dE=?_YVoNjQhl97/1N=<e83j<
%Gu==@ijZPLH<1%W4e0[ki8_1NeZ"'jN<;o1\9$>&>/0O<e8ZsRNLL1h+q(Q`/`i@?>%dM4(e0u),\]r;.Q1R+"7eaDs!"oiRn5+(
%nrIXh+po'#I<t5#B&i"rg>-+UR>=YRV$`]YX^[?+m;VH#&p^`Ubm2/W,)G>fMcVe;fAJ"-IP5"CB#1G"9cfUcf0B)HCD,T[_J:_n
%ol;CZ][:LmkeC@A0sDNpk`c0C]$L$pXC(,^g-0T)"`^Kp7&7"BG^BcPQSMd<SdJ;,9_A&-4@bMsa53*0?^p4'\i#l<QesrTpQU:W
%,F>Y".mnq1G86Gl;t/a?J%:D.ijd8,-YViD^KLT;_/1Xn8D)?9nY<p#>L]mBGS3YQ.<`TPQ\5]PNGDS%O6N;Q^c2_a`-2e\YU2Lb
%ZZ63TZDZ8W;N##Xl8X0]r3jBjeYKmO0;tI;Dku?+Tg`A`*U=GM(L*fg<>@O;Z>&OT&m]Vj9=C];"#,uQ;pnUiQ@tVg[ijb5<BG\J
%k@H0%+Ei4#b@CbjD:@9K,4/u@$'VTD\o5,T*.;U@"k":8ER5!JH&L>O;16&`2Yi-fYoL#kanm3g_-*FJ:V:B34mrKN#L`u[C!C[Y
%N0M5>XPLVQ:4E.Zp[am#S#p'a?P1EsSQ2C+a#*93oO6uHeq_Lue8nZUko#!]:Fhn4i`FTX0p/a'WY@'1T=1)-hqV7WS.e&X-DL=k
%]F^q<V5Gj&J2WW%j0mMEj18MQT3ATaC(92IaJ9;0]<j<4@^_bT]M98Q'B?bG.pd',c)1sTPm1uinD/;Megas#MmCo9WaQh8Aa*-O
%cW+I[Em+grqo7VeKRWJY";#+&4*W/3A17RolV#./+C)FrXQO$?f#6m9[Q>t4Y4p%Ys5a`SMj.aEqW!%Y?f(2s>?Kmtfu;*m3rS3$
%0O`-r(8^$$:A\Z;'9kWbod3'@<pb3iC8MDHf5a&>c2MKr.?\DrIfHkQ2!%%UE(p0.F6!2/=jDHY4MSRaqY2d*]Z1eSjf,ktk#.R=
%N`A\8>_u1VPq4C;_:[IB\?P8aU/b@UM'7BGin\Fi0aq(9o^#eoST.8nI(T6sL1SAIf6j)/gjEFja%N[.iO8*!e^BLi2H.>7!90?O
%$t%WC9sg8O$^UB)`X4Y*9$cc"6(D.@3]SflS7U/p2G)K<D3mX]$!/I[Y":9?mW5)4=T`=#4RQQZiVmON'b_C.W-qqbmfJe5ihnfG
%n/Qd-q4&6mg,$Tp''eK+e`1'fE)ob[\7IHQ@C/VTL#YZJl`A0,jYKSAgJWe"SK^h$I!`HQLXI:24r9A[fXb]F9r9(+-+UoZ]WCL6
%%Qf[0,1Y73&1j$taqSbdG<X2YMQ"8*GLb`OSCUeW/`@m4@NNcomt%=lI8lXH@OKbMm;O]4Z4E!s7CVLg]Y"-eSSLF'C<kQ'J=#5,
%o&o@Y]3T'l1:rSI->U:BP?;g9m3l*.f>Q2`$a+^/[Funh6?`V/P%'\q)WCCej!P<t7(L=&8.MR1NV9XfD[:Ggkem],Qc%<p5Y5g7
%:Rc)lZ!9`(eAE/@4X0_?CGV_2rlKoigcbP$l01G,Vg_045<1NZ%m?7\hH$E"pE,C>j@Z5>,/]!GcR7ltc(=g@B"*0Y'M'K\4,W#$
%p^C&*QsnhGd?K0nI>d!;'r"f^1&Df-U^qc'@H4XMfPTWW*6+uoICKi4?psi7'/Vt0;i2SeOpDi1JrNE6UZ"jQ^*cSW.@o7(7^<H$
%`U6Jt6@_u3di9c[Fd$nEaY[53Q]'#DO/D@Ec$(B==aWfp4e8=$)jKno[9>kE\+%:df(0+c[C[kq_<g#NWd'WY"-!l@6DiHujJkuU
%8\>ZSVdebVc0Rr#d_@'sNeJEENk<i&QdI+u=-h9%H)]6Q,t1/(AH]Q.TZ*Bmo+`@AinNGQ^5B1W5=>jEQI+C'rMk)SqM36"0>%5q
%RiJrVU<m,HSNc_"2\hSb?0B"?!3]_`I8uD;6]D;e3Q(E6>I\#QY3LX:%43c?/"mCie[oBCNfb:Z_,sD4=2]s9eqbS*4E4I1A?`72
%WF\(FFbo"7Qq_HJM(]Z/P#g2P'NI5=bjuMs9P+)Ac,uJ^bj*rDIqo]<]mG/].?dQKFT5;Vde+=5k+^t4]tbuL"A*"qbb;a%fnkq;
%Ofbe.@VO!Sq@ebe;eu2]7C<j:6g]rdN?0[fb,92rIP?=l*BblCmoBo$=RN+E8M06h=dWOnQF:?nV2Fpd8#kZZCH!E9hj^cA80,l?
%l0Y67;nJYL%Vr+rZ)(kglXM'DX3qXBq(>b=R%dhpQh%k.-]=p0IuPA/l?0Ue$HcPJ0Vbd0\ft.)IOs]_0U'p^V?3Vh,2nYtZT9F-
%@EN"C=D85+E3`.N4VSJ-WbKZ+L4/>ZKI3SI%.trA=]NbC%SWm/V!e>/kOF1]qsmlh6%$FD$?!uf%b3B07h].Fh$aEN>!')_15UMg
%;^"PmakOLbXLlKPOqDCH<(`6g:0#T:>er$19suJ\"e?]OgiCk[?;2FO=]r7<^$SgJ?DZG_pVsYi7ha5(a[jP2I_S]B:\!VNYC2h3
%7-WmK,IgN8#4/>E<"l"sH9$eq`E/nndNnM5ZlLQBo5DMr<KZTh#D:K`5$OqOm^`^1pVdC$1%AJia_3VX^CZH.)=8KF]4*]94.gLF
%Sf?Z>@On>+<j4>uUI4sor3iAk=XD=pM!LFM^t%XdJ%oqi5cC?Yb@,c1n#**_=>1p<_2BFOUf^>`g'":KTYud6PH&%&jF-h'nH(I0
%:]>$]A8k7mD=Y*1h6'IB9QD#5@Y,1P/l;FZ2Bj$*Q$'aqTIM8GqXWi&I63_>e%5O[P"Hl.jK(Elq<A+M#:i&LZ4Dgm*+Wu/<])1q
%Q.>"sM84@'=]^9g)u=!2l3W?E(\OP;SqPJr/#b\+euZGSA3H`C#tN]KiV>B[o>`E\'R4/"*i(dM3,U(?n_<CXS(1b.'iD'M47tIR
%gb<,%ZI&-TnZIHF_25bE8BY17S>]r_V[uIb0NCNGIl*!#l!+'d<n-67n#b.!K]Wuh<g@HdFfZTV\7VW+\1a&#6oH;6F6;JOXV:s3
%1@+=s9ejQ5Q&\5Mr_p-cQ0oTr8I`>bgEPNk"b5>)AOo"=Kes(Lfb2Vnpi>0QcIUW\pcKQ>"jYe)HM0`uo_Mu"pbCY8g9`Y5F89d?
%b#2aTV?h`Ze467_/GEr27\m(29+Da(128RZ,/Tbc?!HZ:S2sT%8B7Hg%:MtjHl*5[rFnem@_9;_\7W]2-h"KYXq;(:6CuX!.pWo<
%'ud]K)+VkZdqK8V+AS9=%@kQ[0%jgC9cE%;W+QW?::>U:=Aou36EL6nE3a!<:)b4;Hj7ss+"m_X;'M.+KaOiUQPB6p($4PBWCK/3
%hb@X88%7j4@7#_`PJ6OuM46hWdiE7q$_`KH-0"bjQbWh>Kt_7nWfL3YU4<B'W)=RE_OF!rUcEEkPA+h)b[c=dK2gQUJWF3e&7`9k
%s71dKI#kTs+06.na;)2o=_ZduP2pWlEPZ*o3[RQ,l2Wj`mL/R=Vc%^!GrpI7bfNRni20Xn";H=!F,+uD0Z$d!T;:ON=8i,%5U<b.
%/3YECDaqHRrHKLV`qFGM*9N-Z4]H4\UqpiQ@n&a3*4S`%X:"U#<s)Z,'H0QlTRJT:08h+LLC5UKb(5ag5l8C773:M3X^ZsI8a\&6
%YZ/N7Sl%sfV%d5R#HN#HZm!dd+9kNBC?"2KM5]JU7Jq6JQ#'IdG\,&NB-X%PNJjAD3?Lu4BgoYnoeu2i.D.EOg3gD,T]m@:&ku38
%ZK-OiqrZq&XmO/E#)-HR>M1TWakZ`+!dE[F`Wti&[]AZ0cAW*s[aNh42puf`G"hJK+Rmo&npV`[^9u\6;_KQ$4=qltFP#sI,>GD4
%Bu]lnf-[N>C>Ti5C4+nrX9%m0d`GN@P5F3)pjL]2btTrkBqe&R$7YLEkm3SRQCJJoQ"(^#/W32)-I?b"6oO[TOq4dKi9C2,.Some
%[GYIh:&V(p)-lKl?fB.GJc]E*!WfsG5X]tpjV(GSG09g=IstFj<>Wrs_UWE#MX!sK/0*J8&lqthh9gWsonu+f]V7eP?paLY6F>*J
%6[0f$0o=]'F=igseT97C:VX!.%h>E)KPKgZSio-F_0PLC)(WD=<teWSPi]f&Cr)'"`JuC5!C"85)N\WXGX7B]7VZ$%Pl(PRT+j.@
%ka3[fod[1%.54c7L,"g[I@;eZ/CXnp,2`YH#<m?O9a`Ak_+oY5GSb<c4Utc_%#@8_-XAM"Dp8f@]r6S/-8H,%G2^RX,c<WGGd2(j
%$!eku1a&#ZY-FT/$&:hAaBnN6MLPT"Q]$K=%9L@k]/X*1g\,lC_6,2FiBL;6agpI\!qk%RMK:d(XfC:lAohKOK)gQ!:7s*&EWqp!
%gS'MQ2Vo:7P3;qA*;4QRK5L-.XHUQ7,*7-!7qVU!_@gB#.A,![,YGP7\0#&.K7HV+*RcHM\^c4H\3K:[Pi:5mZ9\oS(HAa`[&HUl
%M!S/Yr`4uo!EIuT7f/[D]j&[5a9Q(YjV]B>h5t;W2M#Vqk,Jd?!?<Lf2N=9V*C]IPAV<Rpp8Dl?XTK:cq_6EK!567fQVZK.MdB`4
%(upiCkOR@,BS@."6"3.+/OG\QYW]YG]/gfMVT:k](O94R4MD8":i[ZkcQgdjUH4=LNgf)il"E[]MK;^RT/N^li]EJpghfqW-;qX?
%f4ETU=#b;4,X,>K4VjaH0buei^iE`sbD,!:ATg-*m^9,E8e"*o7?CtSPnc+jV5b%N8%u:QQVW>q-6C\.db;^aU42e6UCl'L*'J=F
%9f4lN-KfOH<!DUq'uD.27qeV-<u&iMZWj)Yb?lacXEYXeVkti(Z&hmglGm*==QHD*A3s8jDQ#6JHJ3d(/te^598jhV]5]dsBS[b+
%qee_:l;p)$\a6,L2:R9>-*(5BZQknOk82.;dg&'.8<F1bEkL7n[rE:]cajBf*N8#nFmT:jQ6YKsTgn+HF"U>fFBg2`G?DT4G>en.
%qdn8uLG!*,?,""(7e&f#k/@o,Wf!s&GJVR_,0;IU.p-qOkT;A*k2Hj-NG;\eAOF+93cb.bL*0D?_hT\oBm)$-6<-!2d9<YmP*]eT
%V.WML:a[do<F="ZaGsd09d3*=!jFN3BNL9sA!qrD^_UN>G[/]LkCpF)gbV$W0LlPbmdhKi+,b:lnpir0L0>J+oD2B2")2XV!9WnZ
%JUX^*rd"\Ta=!^.V3;e55n-7Y.]f>n:86aRU)@\PAEb+VMn0Cj!h`=hP=0X'U<M&LMHh8N-"O[TWPd2eLgaRAFd7u^W.E*^R*69)
%2:0_-OTQ2YMYDZ3((T4IN9.=c!UcOXn!?TqKH3crb\PBGd"p(S1[]K9S=K\Lm&l_%%mX?%`&9iI2Pl?'gO;K[9I3N4p*!%h58X2Z
%!#_E!HCF8Lf-KKpHGI`"WntM0X&MO+4X-u19^aY6m;i"Fduq_=`HLFZV+sX'W'/J*cK&E(NQ$<dSFfJ-Y;-N1;._Zb?u"i,O6#W3
%G1^r:Bi6l`;54q[/LFi2mZnW;knG^u%^N1W@rrsS^iqN&5+;,S4[ea>?4.AIotZo6d+tqU-sI\A.CAta%+0)OTM]e6,a`WGabhaZ
%IQ"#;V:=8"6o=?>kBg2m%:!6]-XX@>/Wm4UP!-N4lUpL>LJ!?,1k;F.L+c?6hPJ`Ea<?S8>V.@A8)hKZo=\f&_K%-*P3dS2N'0ja
%-Z`m#_/GJg]8puqF\Xj!C0FS7'e;U0!?1@CSfX2]X<Rk\YC\)nXYNMnWN7ngZ+`gL-pe?Hd,LIJ_h@Z[qTkYsac5B]LKn+eU'c%F
%V=ie&deaC:i+aSrn8A&`XnuKOYJBVZ9fTL&_.FG(:S9rs5I25qARi%;\WdO%k[R;JKo]P1GU"bk!7a]u=:'.k/iDR8R1\hdRal!)
%DDFj<0=m+"AnP:)66QE&mLFrPN<p=4[?F3fKTLp;%h[Q5;/Q`?aYM_4Xp'i!D&?#U^73ct%7:).*SP_B=GK1>6r=7gJuhi39e5[r
%l7Ct%X^k.:EWnCYb'EqratjC2+0<7Mai#>/+X/'e?"rBA(?,-1b;U6lLB>`pbO>g-jR5/J#0-C:\VnT]-dk,=N!U66rmkDroiCXO
%H9t[K6%?eNPcBjZ0d[VDBGF`XNjAI/WgHZuc*:@CaNjAP]1]3g0Cb5UZE>+,;F(//17K8&i-t'hE#kK]X4`<-.4;S6XrOUEKMGVM
%P?b(=Ukn_b1W:0^>6Vb&Mf/4hn[\7d7`20gGA8Y(p?Hr^`R6<=P6ab4ja]!Vnl_NYTN8l'J_k"T[8W>5H'acM5^#SGIu5OU471g#
%g\p[@]Y+6urt#D"ZhEDWftWfNq2`/fp+I'FM^cK%BPc3UhL#j71fgg^Ks0bM;Lr,T%%R<a,&sK?KLft.`IEj-,\/>bR_)DBgEr]:
%]7`0<q.Yj-.VP7/b"A8gnN&P>:S.@)PBoBV0lhH!)UF@m+-"XEogIm]8n8Q+6O^"5O.+WjER$E&W\kZQ>?@u5qNl7Pi<4)p]JK/L
%CuVtV)@#nf/#dV.NdQaT;'C6(\q*qd!][Ra;V/]`<s8I9QZ?=i]!,&d?2OV"Y.K>K<jIgeR*2'V%P;e(S/*ljTrWqGC/k@W#uau(
%[GjM%bkONM+l/oahpu:XJ<$U5F\;Km=h=t\Bu2*W0t&l;EO(rejPl`,\X%8Q/c>WCYMtHIcP_e$<8]O9KI'/l!5Eij.7TGagF0W"
%jaW:-5.7et54KCq3^NEa/:oqkM=OPic_Kq2I-F"t'c7Hd2B`I.c(c5/i/+dD\PX)_LGetGBg-X`M&hnrS>]MaH.4N,Ua>Pb^r19F
%.bQDnDBpP#a]=XVlEhOkp%?eqkulOS,JWO_U?/"Rr^Df[XiFe\U8#/uUmV*/9u.]T?PR#B^bj/a:MU$i1$m$iCIQ^)lkK)t8;<G6
%d\'_P1"@e#3'#:Y+egudnamZ2&2Q]!gbfD-f,,E,#.*Y./$W*`k478h>@cZYb2sDcMEDJI02ON`.kmk$60pf'P9[X6U+9OqbsACV
%$cL8jWq;B=eY8di':o9VenPnL)Ek`5ZaBugVm3r":oiFtJ^f]N8B=e3,mo_m/g.r?fC5Uq9X57p`pb&&SW3S[B5Fpnf";,o!b+&s
%_j4=FVD:n0V!gROE"b/c;EN:O69eh[!NjIc@#:"%.NKY-cRI&RP<I-:`:;]ad4n0l/6D?U7Ve4j@u$fk.9u04?&hC[`0;`ZJo%AF
%]kYal2>p"d]#9=s\2.CTcJH1c*cXMX.Pl#n"'SJ\35UsSfF1@"b,:hDqT\&^?2$Kdnm&Xoetj2C*K@)TobsYEq'*jOmSYZ`3-q%q
%C9?g5G:!#[E*H3cARnsI.GR25RU2.-<]q9.6OHgO>]sD^Te*R[D0SneYgnXHGCr<c4>hCg\0(PrA@=P?Bn@OiJ13Bkio8uOfAg#>
%.i14KU/$VV6]Jf0paXqCC(:61=K@^edI,P_D`alnQe:t1.$--=L@^eH)16]u7/c/";oPEkOW%%&IP;MenQia*@)XX70(TnB=::*u
%[S6G#dl?Qt:Xo2lf=DDt`V/8<MuHhPi.^FL$_$NFlA4?KP@maa&XHl'".u(<"E5M2$]h8kFp@Ol'e))*_)G"PK/SH'^XX=PKtZ7K
%XPI'bk.tBT\IQ!>-/K't#.Fe(WE9TdonOs<o*;"@o%Anq<3.?ubE=WEV*f6RG9K1>QG_]J`E@7K[(Y3befKXq6s9A=V7Ju8[gXKL
%SlLK>mF-j?,!uk\@I2Z2R(dhM8,;>^E%;S:7r:kMRP5n+G])f,rShed>#-k7)mq)^WfKsr/>5k,,-)__]W+q>G3h=AjT$_+e>&^3
%M[AS'hAi7hH,&fD,BhS5r%*@O8U#_i85le@i<!H6*YAsf=_</4p34&#^eP?KlZgk"EE/Z:HH=WdEM[VthZW!eNZM&D>CiGLJmm*m
%hL&Zk#i/BTeXB;90Tfat+Kfb!)Uj559k]B2E3WkONU4cMYTik]_WIS#a3Yngl,@Vng^K4am%3U7e2OC)Gnu.HX>meV(DJoQk&@G8
%*Zn:i53"p0j%,7Up;+o7(eWd?p+2W#Kn#?46F+elNBATqQm&tECetcT_,%q!W/Zr5=YBQ4&4k936V1Q)A.O!H9k;ShMl7ooGQ8+U
%?9tEu"0r5%[,WQJ8._e9[<=OKdRoj>HIVPc>"<cP\WeO&'eQ.hEQF@dO$gT_c'53IZH#a<2OY:>R>lT;HWX3(:HC4HnJf6,^U?TO
%R!V;\'bpC;PVfd1:K?<-@`1NqKTcgie&FpG?B-?uNa!+eGSpOY,kL*Z4Sd9E4-;,:2-diJ7N`t/6KLU2022o'3R4EIXQulMhhT>0
%^:<gf(!bBE'GQjK4,lV8WnU_qV]K&0XX!DSPe'M(2N)KEp9m#ud_mP):4@taU>A(hq[:$#Z>NfN<7NtNhEB+c?>Kb6_J9Jl%J=pO
%g7<[e]'WM22PVA$8SWPcXm52P>)gm`,-]f.!=Lp$9Y\R;:CAbs_NBlJh>2q2i>1<gp=<6dJMI&PH?I7c8`R@A9/f<c6V36n<l-:n
%+ncBHjk6lVP_b*mG0_fGL+ItNK_nh)XZY>=0e48*'mC.WB(EJV+EokNm0%`IB[M^_Jq[=*.P9N4RefQ!h@10[LNBEr6_uTXTM/b@
%icH03f-J5mld,Wn>%#+F&lZ/UXQ,^E=@]1]-s*8reQ#C;TGY&WGg^XY@Cf=e4mG[-gga,+2MiR]hGNDEIDXlPp@P]?:(Xe\mToo$
%cSNUhK#;9AH\`i;>'nIT`)-hAn<pVL[5O4^qq>*LZk_a1;fT>O;^5hl1eR,T41e\DS-k3,H.&).KX,92U'lYaPX,+G'03ec!a/ER
%&JZtQ/Xu&aiIF_Pf]mhT7tdsP3$#hiRU[:(_N<><E=1rIM*OL(Q"cm%:Si(gEEcU9UXLO$YUgh+LI5W7*Vd__i1o9*Z?@>iSZ$\j
%[HPMkJe/:g\s5.@YFr%t3t]KUV>nL6,stZ4jNZ/2S5F8'md;1G*XJ`aIJPm]q)@J?ZHA%l7^9,2f\7ZqKM>l^!+IFR=u&E^g(%["
%Z/XN9[t"9d1FR&bQbWNT#mRHY[EMpf.+lST],5h4bZX$FaWA27TJtD'&(^Do$"]XMP4'Z8Pt?=\*XT)]%@XemJ#uJXV9V)<5&[(L
%r0K&A8]^"cs'ZNhc24VQ@o@)cUOl?s2.2L)_2h)h'"aquBG./T7<N^CN!Oc)>j?PI7IGJ.L#sb*?IK#`4Ql+\-i!At_eGqpit$W'
%MBVEY1j>IRpfY:gbV4X+lNkraVI;fN=")`PrnX&"$MA:1g$F6-%OgYk**q".NPD.YLoegOmT4mcL0qZ*;%g$m5MTg$4UF$P=)EB)
%kT"iBR#OIBXVu)B)U0KuLRhKc>cr,?^]on5IPXfq6/VGe+Reej^sI_:-*qUAQiR`lroLa(V-WV#SU[.p,:tX&,a`5%];8.HEL0'"
%7"<L)@lI%f!OhUekrjh$';$Y-Sb']Zj6@(!*.cD$J<opVUA(DH/_PpHNG(a5aN%kMc#)SkHU8T'MM:g5b:28P%/G;JoGKc)@es"b
%1IR4U^Yb$G2%bP/T`,)8=nV+f?H3(s&Un'<2%mQ`<L[DqSl)o.A]/]ghD8S5`."7-J%WH:92a(+e[n##pHZ.f;76JC#.jWmHA)[=
%3itYRjDoFnDF6aaH7k>-+EC:QVV=#MbtcTg5%@ZB\9C'aU:@4_IjsqA7KUI<W;'t^0$[6MTcVY=-#)?"3NaofqB%"Am_uu-,oV9t
%7dt'Jr+ELb>;?pMT>,gN#k8d(_:q3!NXidm6DoQ6&Ntec_9!@S$)1D6T8n:49:4eeRjC'IB,L[NjVE=HIj4lB\0g)sH\/_ZX+"6A
%S#C+,i.)#gh-e6F5<Gr'[3uEm#jFbk9DBh>/2#Bo,u>hq;;#m?XZuqG1[7_4jdIg14$0o]q\_4UIC&enL^\C9Wl>aPU@[ef[k*.2
%VF7;Fj)"F8\tZfu]jq54F=^g`H)OT)"=>V?_UBpb4j3)*c2u,21Cq3&j/C=0Q_`5@Q?B[VmpqQJU?[a=,k-I_;<hIB;:`=g-K[0@
%!f^!&&>baiUNDkYWf\0UBHBqtk@W(L"u410pZr*[cYbIKDReCU[&-br.2%?lAu2W:g!U?enhb0d7]o_`\n'R'@s)qZ%$`ZPTQ8Y)
%'BAMQLiJ-*F_SLd!+T6)D@JN:'QrO'Ns!1T"=kK*_s#901.V23o$IX)O+s_fcD[:>&c1LXGc;@:NX9ZqinY><lOo1t23^.`OCP`n
%8Yb\sqWp=7LDk.88F9/;s#@K_UAN<!+E0@*;EiS'ek#3e.?a&u40k?MP/9`9H:,?dS.$T@8=i?JA-5VTBGn=,I0_F?jI3p`9?FJ0
%Zem%?ng1m7,o=j3U?k^H4Yh_D5W>-M"G+E(2$5?P@rBFMJGZ#]J>EX9c)VAOHV9;\kh,FN&7%s$5R9M$c=f'U5i7@,fan55N<sYI
%L?OTZOmR$?Ko2A#"0;k-Jfc>aask'(+=#7am1r'>'TtaUdCgt#.LS.m&XN+=UO.rN;^dP9[QW#(&+`T[h/!X0'o(]@,&A]S(GkO%
%m5BC=Y7a!8c*u.giD=4NAl[JHM%OM7Zt\jf(@>g.P:(d5TUrf;kLlf@Tl`+07!/W-%4=OZeKM.*$_M2QC&>qPWQc*WMKiQ)f7!8s
%C'P;638IBAF7=-Bl;'jSo\H]Ul1,IVJin;_VO\74*PuT$Q+0N0.4h^Ub0j9*S[9(K;Tf8KLs'oRO<R1m<cr'JdjXNXh,dN@jbfPG
%HoLGMCn/Blr\<&F.9=fOJ>JjP]kd+EoBDJI8"Kl<SCl-k%il'en^oZ#mDp6sEge8S5BR==$0&>O]mHe_A:Sr1IcoM;3$0B%*c4B+
%?5>hC=KFks&XJ7g]t/d/`99)!5N8ZlKg8[/,UWFq3>uIhgsO:Q(9okk!eRarMCbHjbT4d"2J)>>&dPs+C5sFi[f/C+&(QtO`=W0t
%G;:cJ2O[gTl9;&N56.#;:T-N4l[CJN15J6F,&V^L;+W0KRB=3&09_,iG]'d.[6o!^SPr]_cD%'kK;de7I)_+S"upb\W\9BlFLskr
%Yn':Pe<>V?gIPa-<YNb0NZIRrm"+?K9-]B5./@R@(oNS%!8p#'Ij[u_#>oo?7UUjl'cX-OLBO?9`J7*E[7B;c9(8@4NLfU+Ra3XS
%AG'M9HH?rQfjB(k']T0d,?u-/m7YZK5%#itP)"\Sb:`t`--0jDs7_<YJ&d%lq2%$T;^mJ&d`N>06MBnm;9)$!'51d3+3`Y?.[p*R
%Y6OcGX&]R"?.BJrW8j05FTo_h4g-O#UiCI^``T.mRuE9o-.lZT`^Z;H$?))2.#->j9/M#G*e6akblJ%907$1Tq&[u^CECpmV5=fR
%W-bnd:;Z_&s4#pt_FC`J2A7=KTPHWC-EFGca"!;L6F*(MbKKnofTob;QaG2=g-3MUmW>DO3X)1FVa^B^AJndJUD4e%0E>&rGZ##\
%'NHWLYq`FQdFH^]9$,$l4IfAfRMW'(6T48;/2eeun2ceQO]0?Dm9!Q28.).c_*"S!+63BE$7Qjp^et@Q<)(]erHpI-Fi>COYn+-Y
%VV&*#$;d:&P->*D9GV+gM2(m`"gd#SrkE(<@i;VkJY`%Zl#b8&Eg+Q[([067MAg7cplQW"6Eh11&;+e?mK/(pMf?>'Zb-;N<>Ess
%`G`l&f$g3Ih0&kZQhOA?OY]3MHpV>\W%UM._6Xfia*15>;S"J#>MYae#[NiFKaoGe.c^AB$QKZ;4S"+[nZuCk"@!Th5[CBD#!G`/
%#\KZn#nUa?EOQ3OXq?SB2E3o.ed3M7fM_W^"I7K#2;rTd)?c<[IqQV33Qt#ZMjt<CJuf:lXsENJ@m&>13TG#6J>lh`:d5,F2q!tg
%1)OIJrS@;+:S0`ZRl\m`K'j<RI+J_(P+8dkp!]8:>oglk(Sb$HL]s72d*i&`#2+"D4o`"UOEJVNmX.H)B"auS.J0,Q0>m%Pf'H>f
%W&5pfo$[&*-rX3>?WMI8Qte=g/5)2jM[_6=MFf/\`XtLMLui+`('WY:AP_OQc)q6>75\6;<sH*0Ym.cagk8;`>H?fPm5)3l]Ici0
%J9Wq<oYS6GT!'4!L$gGTRP+\+2.8&<'5Bb*CT_qW&2:DNFgP4,SR<SWs7k_>3[?t\U,!fm)_(i,rh6auajg=\/8R8e!S.(DK=83)
%%CeupO-P-%-Xk+F'''^27sl)RU^\JTnX&P1Y)[2V0sZ2_Za_j&aNK]i^m&mN;r4G.;$?4&<oF:j[KPg1T)`#kDkNoc:2ZWtihOF0
%Uhk%Ii\e5GW?\I>dndn6_SIBf1]o8a'Kt*YKH=f)[M]#.j_Zrc:M.EEcp8"I+.Zf2L!j40rbY]F&>n%.^-2g3Z;#*;<a'WQ-&L.l
%!VE$VY58XkeCtH@&:*VgPhAJsU6V])W"l*VmHh^/,61\_L2#6Tc)B"UCVbVS:^\L<V\'8X"0#)aJ.+T=b;l,<?_+&n!Eq==>^)+`
%k/P%6_ILkk?=O5h?Ng_<niM]=I!SRtP$QO\aHFbg8p=d&L-ho`7Wm]]MBeCY)C.eYk7/VU2Q-25_K'b&5oZYiLiYg0D<.lX$X@2k
%bGI63l+fO%"EY[lEe\>,=\<*BChJrfD7EPp+-N3Y+)#n<`\DdM$i#golBHf.A>pMO3Yc;=Y=#ApOe4O#pKMMU7!\TbBl=sY"&?PM
%:6b<0MT%Reo4#84E6fDOCml.KjFP'^&[^no&&^2Ndqh$GMa`\/BUoJ4VEh>)XQP#@raq''YgB%jY9I<fl5fAghgtJm0?7MVk*O_K
%g^9]^;Pu-![OZNs9N:Yo7t(9BMUAh*lMBOpbD4"(];Ks1ot44%=VGEeLqRo1DtQEHR';t+3_O:W5#5u9bAH5#0I86M`bM25I$Be\
%#TPb9&`3#SFkY=]@EjUBN2ZFo&^B7:9?HXlk=p$X0Hh[D]r$F./@1LXWVjID^YK/N,^l%%SXTAPSXTJ+e#=3L4#QVNTB6qI@64*_
%rSt18^E4Eofa7GcrG5HZ[_fokP_7Gu[:qH+7!q&iYO-1dpZN0Efq_d6ZS7NL9aZI2c)a4(;:R@F)6)b][!=b.dq^d?eDW60F">8]
%3DiWHQnHYCY74[c?DW8;,-'?'F=3)>p:WD;GaJ7NPd(T%K"-c)oi"bT39/7X"\Z\*Z2ap).=cm_J4PXi5^M@F.BKZrifoR$I64DA
%(I1C*oa8cn=l9H!c3B3**[$7u3!961ETn%%948oRof$sSXX`R9ECB/:*l7+ug=65,]K&ukdekUqg.e(L#`l.E;:Xth!k#k$.t(]J
%Q:\u0a@,a,dFh9lArmc%Lk15`<:%tMN]IOrM-!mDH4K9PT1;FZOD#*5ZChpFal+,'-sQUnRn=sX>6r:g[9]gq(]W/STAl?8^*2VH
%&Yq;e;Q;6:gha!'`/h-U(n5tZ3A)doj!f+8_5bM0^_>u5>CZa#38]\%9AOLj2VXL-iT#SYk%T`d@h\I]hA.I,_c:lZ7YiVtcrA"\
%H4)d&AN=:kf&8hD?487h$U.rL$N0R^.pbr*Bs9jt#V8Fq:4eM[9O,2_gEduAT$WI]W'nA=h\&^-Eam.-(QjgUarQ=gFU]oA$]Z@%
%>eSD6bFSMXkohHf4'E?dX!LbPRDLc!aP`JDjMWVi#0@-\XWjZ&X8Ej)2@ASUW?Ob"CI*USP44`'ibar9"084s[E7e<af<KjWa^+]
%EjcaIY[5o_SI]8Z'P.oh'(J^J''b-2Ig\A@.5$&(_;6@I.bF]*+,r8Cnle<#i$*&.h[Q4S8'5ikYQ%!a<,OV'.7Qn:Nm_/+h3bb'
%]G;tF.S7$L8,[gi)34\t0*XG1YJQ;tbP:?NWi2bK^SRmqWt.n3+bII%#\/@l_cVRc(3Y@pqPtXo0"!7'X*qu0.,0tl\lK8"?bQ68
%[j=o*%pt5iRWrEEKK&2oZEBic#:Yj;g^WJV.[!e3Qa2"@MH_V9ii/VE<@(5blCK4"o@P<;j>HCbc._k87fu13UWNaII6JKLTm*:Y
%j/X+ep<oQb+i3^!j_1W"^8c%5gf`EKb>%%<-di$&]fE]Q*Om%K,@:h-*:KYk0PgOR<pHeJ99sduYMNIED5gQ&l/HIu)ERVCB0^JL
%UZe"T<LXh:h$_.,*aoXq4524g=T)Br+5XbC&eSUS6X;iaS3Ve1^um0&^gHL!,fRHe<K"l8YD1J:M6drn.;?9hl7bIu5<#'"hD'):
%T",UN>=nE?id5El:qW-5n^STP;G^G.lhBj>g!`d[eIPsD=7<t0`U72YCje(T/@DB0nXC>O'\A5fq53SLEW6'e"K>9"H.,j\q)$V+
%<@*=dpT"g[,h7-CSJI2i@@c,kM\_q=kp>=U2s[Nco'$Y4[?S?^SY6bioWUr^%Y&1sqX_"L(\MCf"4TiSX]\rED?fM"]UG<m`Sj66
%q=SR+g9RO^gt$a);2r^_/cI`,4HmQCgI&Uj9c:f'LdHhCZEL,Rhnk+JiGGmXJTR9JP'$35(sjh.9!ARHM:Z8Y!F'2<BdqUn.0<qT
%e?9FiR@B&>pf.RjoX'&%0>GLRSFUF?dU";kr)=pI]6G,'N*m$"LMl(.5I:>fG(Rm$-ib9(DI.&^E\!'O,DNqeJ-<S*kqMV#!MO/S
%"AsTT+2FgcN:\L:![JQh.L"rd&/?E+,lg7P;fa\F1(TmU+B0ra(1%`H`S.Pa?><A_F8^4eI')7&&t8Y!![;WU-b6haGaD"$e7t0/
%EDX58gi_Bq;[Ibk"aV]FUlAn&TIeq5&[P%tU%e%E.2Q[SP59"lkA+cDT*FM9l$1@gV8CWsp!.%"A8CRaRGH0#Ygoog5DXP`6Un#T
%@qT="KR`VtGB6k.?`0hD<J>Yln`.\^V#L=9nln:b`+87NRl#2s(ZiYhFs^!.Ybt#bGK^1D"X;^uiU:f5GJ1ni);%,'CI@Jk5Q"Y\
%%HK;:#a>8-n1Fskbc@8[^s)@2+d%9LZYH++h$^6lp9XG0.,qHKoDS2"=K"f]O3/)ZcOcd*'s&prPNN1tXkjJlb[ll"mcEZhJ_oPk
%*@0Wtdqi2eN/lAeo+X@U=l);PLHtX4m=7@A@E>]^Mp)(uZVt%lQ3m(8BI=U$>Eh?Y;@K/&+n>_I]>;8lAf\j6D<0HBYJY!pb2IKl
%;_)]tik^88V'73s"_uYsn+_;;M,41Yjhs0R(2:a=BUc`&$%1j*!rYgo9F('_EeJBn7+Q;V297clT$!7Vq=V7E]mXE((4GUX0E17T
%do!8%h4S8<[LQq:S2MdeM7$8hUe!N^Nas'AG&\?CN*#WT=m+iUnbI6/e3.!p</32fUd1#jRUjVKU0HbH&`'s]lZ==$\CC<dgnM3$
%%hr63V-:3.Lh,l93FHP2hi]6SD!Fpn-#h]cUu=:oMS(Td"O_"`pm0`CoTE[TlN!6Z5I>qFlM6&2<k]9=l_a#I.maWm&/-.5I0tRV
%&beYa/R<]$76qE=Lh`5X=Gp:l8Y/8M05t_>N%N]A5i8\%Cea+^3_39E`B]S<rYkN0$T`I0d3luYa?K$\(]]tbTMt4?V'*!6'&1?q
%>HR&:euQ1RX5JmgG>;'tfHDP2i<iB.<G\6mq`t]hgb475p0^cipM\M3;>&;@,r_!<r+8`J'>j'sD#b-8FaL.&4ln:id>_78f`u=i
%!CB*sYq\P#.&LM>gC?:a^bAb[(X`^[M.0e_3MT!i[]L!o5l;`CGp"N^7]ZDuk`N>R_4o8Gc^V:I0iZW8i`X;F7r)*4\9($u7^@TQ
%?rp3DZ9ird'E]mW_eP0a+B^03a>0Y6*pEX'm9EgG99LO4Ds73tS)+EC7!QA21H?Zk$qLcn78[!j"KJ&e>"Il7/+#-RgJsfdLkaEZ
%Ro=V$H/'(lmcNYDd7l,kmBr(-i'M">6I>jAP1^rR;OV=nB&%4Zr+%X`;CLka[XpnR2p$Yo^GQG&';->amVl>b0I/70!`Ro'8`_I*
%WN\=_AD$;)"PM*=kFHK$W40qu<^a%eJ_'=a"tD/!=sof>5N7RSl:1h`&_4+ZBN8=7'5of]8'M_V*t#>\5<A2$T^ZXQa0>teTf5R@
%mBg*Glk>Y^CS7L&,5SDW<*.[B?.flo9K.sWJo'D$`^jjdf%1$E>qUC-:%Lfe)d.27A0Zl;06LI:bauK6KD/Cs(4eH\"h<n[F:_&B
%:!F*$^:0AT1";u!:+a$te.`N3S68=-2;&28L2N@YP(%!m4A.ZRi0="7iUQa,7%?(FaDCV_aZNU&.js8/+gaYL'WMll(cHf''#?c?
%62EJJr?#mEU6=n&fV8D^3M-I+TG;0kij4[M3X,@E.k8t*o;et'Bo,UM&F;Bf)3R.nrA@][*50UW<n@5NC/>E!n\q3/"@<?N+1ts#
%:E;2-_t``jTjM*rheYFQf&uUJJ#i,/gV/Q0jEH*MEdOsNBd6/1+snms.Uam5E6]K;>t3'G-3Rm-I(&Efq&Xf:nRI-r5VY_\"XtR-
%XnUh>=qi*5!tg2D@I;%h`k6V(@>nM-gR_H+c<>H"7d+1O6%;pn\F``%<I):1Ee3E$\e$VOZfE`p%LVsIge$8Bl)Emc'(ZJUmSgAC
%h(c\qK$^a"`ij:3YJ!3b<RtGndLoJ^-8g2cW4DD?F`amgU9l$_MhV@M5YnG^j?q-20n,1Ek:hCH*]KK6//@s"C`D2![QiH`Z*0SX
%%8K3ZTX*?R/8g8QoA2"0T-a0o_aG3U%$LT1rrm.;9p;W0IH>A<1#QS-4Aqe]\]Mcr"K80THid5Fm3nV@#_+;0OP[II_&*qYrL!@6
%B+!F(/4_^m0e1!j]HG97!)JHRVVC,kW3g_:Y=sIfBF>g<=K&H,N4;_Od[)Ft#ci+r\\-?'S3nb,2H.nU3S]O^rKr4g@aO`dcu[rn
%Zb8.I#L(6qDW<<j@i?OH[@`]!]p^u=iY_luEXRLX6:6aL0Z$To>rM"nJ+J\ZQc1lg"b9OYZm-4/;,0^p,,(S7;J&;5P+4D'<70&g
%ISL<mEQ!B6<n[KG<q?o^R`7[?8#LORc]5j6?QAodnl0!`':)9]bYkWIYE"\8Y&./nLbJ"t5uNd[:Y^o(+1PdCQDC%+_2quT6:fo#
%lB'5fT-$[&T^NXp<bNEip1EY]@pN<uHhJ6T7P[LW&BOX&4Q=?)k#5AqQSdm1;ZOpPmkhNi;qFbq7t_*im0mAoZ[N\9>rY7nf;tob
%31q1a%^Su,'']%Wj,HI01M[a_o?,7uBF(?5Wea5YW-$'s+ju40cB,3?eN**MEejj9\iqMZ\u:`ZMj:]'PlAl']dlFcZfNb\26]ur
%@(W<>UPQKSh&1YX']-4I$]Mp%170-.2)2qP3LZPu<'#Xj<kKPHU=#,,ERD,G4]MZX$_]S!]k:71P5j^dp/Zr!/):=edMCt-5-Lh7
%OS#ee=S5EMQhQnEA_5hQEkcgN>UeX8KaVbcZ]UR-.$4*'$ftDPC[)!iaaugQ9LW7$X.m'uP,_cJO_Q8G>``WADF"J=e(/7UL5=@T
%:1M:UC05\rNDMIGf3C<fTnN]4egf([@*+K:AiD88H#l`#l&XF,+Ab[m]XZkr+B5`]8L;b0/F7Fe!emt=7O'-4`>[4]+TDakQ!2U(
%rlf2Bg2FF4@+s"ZP!+2&?C*04bA$h+b^?Q3ej#3#;,Lgg]j176C-1n)Q1p9)MLpbqE9os3eRY*.JgDR900DR,,1>RerS9!uRnEh`
%)sg;<c(-%kremF"4sF(2dG38CH%N+<ig+gEn$V(d/J"7oUq-iW6.geu#d>L=coK;o?c>R@XE<%(KUsY:7UDrPi*V$8OXI)4;CO)C
%*S)Jkdq?X*OhMZhKbC@"]7]`D1_ZJGbIc$>J5fI^V=>"`.R:Wek`Hq0XJ/G/e"0b2&2^\6=:JmgL<uK)#n^R6+GrT_BcC*G!A+j6
%i@(P/GQROF"8kZe)c2QMpC'$D;VP9C_I5c68$oO>Y\oruPo,7=jFh[59h(7;<\Yue=1<N`#E:58`,(C]PEW%"!Z_Xp:?Jl4Z\B6h
%04h'"KX59<NdY\cM%%T2>XS$#gHPne[8RR_Jb^V*H(l`a*tHO$9S:t[YFBA5jYE8=lDqgTFnVIkq.:\R,&H\Pm.?1)&f`\[-<5tJ
%YM<nW"M!FOVB@'`4[7%KdBBkp@XO:h3o"S^3apTr>Ri')W>;M`h[<LM5W9C0_@1>4C@sT(!]H-5D9LP0i)[>#+'S[aR-5gUVubXA
%%L*d!cE'CO,>ocFd(<HKg`qTqZp]98i_JqER/UPb`fZ;^]l>EiH?+8`/,$(4>rVs!!9#/ZVgBt=X0:bgc.0TleU:,PRiJBoM3O\f
%8(*M,#C<>hi-Oqup#H@0#)k79d7s8d)/8tCL:aP8VgmZC]ii$5<Z'2q=)Id)ibn4^+@_\:)la(.V`HLC"S%Ur`r[iED)%Rg&o`(g
%gaUX;U_($Q;l:t;TkieLV;a%(2<Cimd+/=dA#:@L>cI>+pF:l(jFd]Vo$IdXS"K:gaqa/9Xui-%D6;%*emu7$.j+5[qNC6nWF+KJ
%a"*eT7OA)dr'HklB)Q*,R?2%*.5WD!ICWfVc.0u*Y79>:9JV\;#t^A;cXmP"MG*MCA]lD374)hD4#>lJbHrVg:K"h;&YS*1&(t"f
%r1NGRc'N99]sO)\cl8?2)=$GV+d%DN+PAQ)RiDS89<.Mb5h!3PTd-+D1pp2IhfAT;L_,S@Rf9NM;QCVCqkgli4Vlf&k>c-=Hk`Vg
%3+K/;4I>,NoQj7kXVfI;U6_N%#4!P0QYkKEeemh81j+]g@[bsRb@qjQ?SoC6Sh+5'iFcK?+_E2PS)0to#S&bME+Cp(kjuDM0?:Q4
%Aeqm3[\jRR>p?91-===<2gqJuK`%!e2"jgr9BM>(d[#N"bZ7pk>OpmO\&cMZ#]gO$p,n`UE2$u(97.jK3:$s]7W]XHh2h&H^AFj$
%F@VMW4779s7TVj10KrKMNcfR7h;b1X^/46ko#?0gdN"fa4I?2a][O?<OIJQfQYYLUJSVXLZTJUp+/+0&NfaXNKdnT?^fnNh`k4b%
%m.Y0B_h+$$3Pn@7/ChbZZsQ[YG:ME@ha+VFP-63,7)!PN25r<Z(b2ZLT0sHTfW_g>LD[%Gg0/5LGn)/30CSR.EElL>[G>krfC^PA
%@eB$?*a)=5>O*o))D%o4</-(\WAZ?0(V(L*W1WiKBN]AVr[=59ltFUc!"G7$eY')=(TNn/?"/'^J;d&:9ZPEe!(MCrBXc5_`r3bp
%@Bo(rNg0S.*=JGnW[5k3dRoZW0Mj?<?Gj([OaVsnHT=j*b["Z"gDpX/!4cM(r79o0iGX@;pW>:@g[u\\,'A[()['tqSk?2B?'Lp0
%ZQnVXC;Gt"q>X%!+]^pIS]R>bUH>E^ShiMTB$`$tE/oD?nFhdanWSMI14Du&6$NY&Ze<79CXVg"p$V\9[H?PsBnhP3]:i2PaS@<k
%e<7=C_CO&C<<elSX`tU((GFJ`(fg"ol2`gS&6b)"I?hj[@!C_SS_0BI^hM$I4cp$L6Inneg5a53EFDI:Ns\lCPnOE^Mgs,9>DII,
%QaU!k%c9t\UZS=%MX=fs]THr#eUU+oS:";/#Z%VH#F5mH#ZH!nkikjd$Z1)RBV%[(%/l?60GV!T74FB@G9UWCJ`=GG4G4>-anF$%
%+LmqO3iX:_HW?Fg(qtp9*?&i/V\KA%-rOrgUR@DL9>'eMcd=e[J]ZN#PE>,6iA:k!nA+3])^Hk@MK0cBj3FrtX?W]2o[/)\nbBhn
%[>3*`*[3:o2%X:X*gVLn4#PKAL%@sL2d:)i4b4%D1[AIc@8iRLoU/`carj;gG'0T3o>(28\3"_L0CY$&Wl.Sm=>IbVjAG+J4+4cc
%0477`dg5Ae8<$_8\dZ5k_-<`KUC)`'q*TKH5*qW3r<Ug6Y2)/:7,:rs7fG<:DhkG.`k\;q0kTeKYXKogTpi&%"n/":$9GPY[kSr_
%d1RS@g?rV>nMb3tl97dndYpJ_oP?RCDr\90dX8Z*'"^ukqN6\^Tgc@o``DIo$5[q`\EN1VXq$*h&g_.N`W<Tbj&0.+#+XYuhtK8!
%WO>DHL]DMIB('[*mfh)dr6lG/6G47%+'%AZrSsa3T"&(YOhP<^Ya].dPR+%9c[:DhrKS@M0HnstA^>'\W>Aj"8AXD1Z,0[KSlXSG
%m1OQk4/WhD,8+LR',>hUYRSoLR:mip$_i9'E"!k&U)@4$Q/*e&dCi?FWf5Ua*nf:>(/%XP?[^!1CmJPkbOePc-R<GjXA`J0J>peH
%=l105K)-Mg3MJ9d`6mp@SE0Fq1F(@MpQHbqCMa@%Dn'!b$!(p[CYp>2hjN0:=NnnN74+tHB=@^hKH#^d\bT!I1I&E;\<f,sOhFb^
%:P%pESrlo:EM&8(g5b8NfTHigl3U?c#0;5VYY.R@X45=P\gN;O]h!jp=ku]7*";P1>.OP*,U9>Lqui0=YGsf6(id]Q=&h[1LTJCf
%;Ga+>/3kM!1SlEZ7aa#8DN8"Z/-6-,!1Gm<bD0JuYj8P=4lp=',fP'!lS<6q&tbj;H^WEsD:YLNj[=,Ul`i8q:j$_#&kLY`KR3'O
%W6g\p)1u_Jci>?+#NAq0\H&Pn;>/tld0`ZfDg6'Ag9!1VcoerSab"($n<g]6>__edIMJIoXLun_g%S"l*\2jJf'JAZLd1Zh.e'M0
%I_M@hPJg&CM"[Lm(+(Oo_HKVC7[nc"R^!pncukoHG98A0,L%3%?hqf$o)A#'cCn7l06]KrJLKHlLMHf3c!Z$CjcOh:\oe%62+TH>
%rbu<D_mf<OP3#.]Vd5@gk!d&!A1%n>c1V8,id4[d\XPH_(l&r0?)*@HJ*8'<T$C",(`;uREK?;J:WtYEl.J<\hP;g`,s+15CRN]W
%g;R?8[1VU"AZFRJp//Pj`39l"%f:KC"*IrN^'f"01/_JsY>;EU>Jo9O'NpW)lGL9?#i9`e0p"A9#]NCg!!MOsG+_9Ye/-9^b;F>5
%/coYNlr@$<Sb<qaH<;QZ!)7hs2:/!L!3F:j)GbX+liOBWI%!@8PK=ab&60\lci#P,33dUAgL[o,XK2u_og(SOeqFsr*:hr8k(`RW
%5'qT\d%ETcgj2,oIhWlFFiaHn@#0/C\=\\'C$K6EWouGL(."jsjf!_JlFMtj%jS^!Xkh5BVKgP?2kWp(6kf38SJBkIq;h!C`[ngo
%MN*YR>E5)J'n"ft[K*/P<&CjK[^i=1qq9[gi!!r4"+]B\?aJq,ATHXtitTQ,-MmMSj>2crNQOt[;fubq[#SJ*<,[YNY]Ps05X8JL
%$_L]Mc?b+D_4Fqq"UtEE%_SNl;-[l-)@t)YAr+`5gdWAB/8S1!gc'/?L3DLkH6O]h=(1&r:S8eVI+HAIgE=R8$V%:iH.)[fcD\+&
%ouWk8,hW:4/7B^#S+uPThfSgpJ*tp5s+UBCdu>ZR'WP=Ts09m>(C[;"e^QZ5D&/*Nkb!GU6q.^JKu&MADYiHIBNG/gNc%qC#OTdW
%%a;UD37OZKdkpd+/lF6o$c6M%W0.5&.<OA0E`6\hq.44qb;I]3Z*#pk:@G+%qjWIq?V^ZPXPO@qbnR%iAaSsq^(uMkmD?]Lq@GH^
%/r=cnWX5Ra[>Z(:7p)CHI3n&)Lum&.2V1TZ@4R2\qPZd!O?TD>mY-gXGt,p*MggLSAL.(N(^E+:O<Eb^9q$+u=U+E+F;J$<!3@I*
%ld=#$?kQt%l`Ae0lI=EPJ;EVic#PVWLpQ5GOZ.MV,rDnUV$Z-o.'meb46ZFBWhuD9d^^S?_n-n\U[:]T4KDYG0!HTYHgRhj.#fT'
%CVh0^Pu^TSeL$&IC"(jLa[U4+abQ5?'rVCq5Zae94b/(dMm9@Z^$C*[P_g8.6,k2T]Q/^o/;gYF*V8HYV7OI.-GQ<Yrm]X4oUlrf
%_^&_HnF^YpAS<@1IOSS#m'X4l.&,k:\/nZl0GOi];D7,Q9%b]i'[S<D3$pci)`!VMW8G/_47c*h/r.-go2_>]pB7ISLQD?'rUA14
%Jfp.hi0-3%bd;B_ar7]Mr[dso'!u!:,`O8_3A*):J]ki/cDsXQ6O_?&6aK)PoM#`AJ^WG+_`11`fA4FkM6D1&R6In"E7/B=`U5Uq
%g!F51b9UB[)8LrW=mE7Bn*sT82JAc.q\WX0p,u?G&i47["7oYeT?MY5KQLrh2i2MHgDPt#k%K%b3TO!i#8_Z8]d\!_UjeZQL<.p+
%*ak\tk89?p!qd^O5uJ\o#3kPO`,RU&aXue1*Y7<YZ)7;p"[!]d")_m3Y\/^09$d4>\p>`:opb/FFL?n9j_FE.\#7:Vq/%@_#8&\m
%1,9]ZIV6E'63Z3HbB_>%Lml>EDJ]qH_-O`=;_3$ndgRgNIcdnM=!:i6%7SSAFs]r;&o[UIX(1Z%.Q^i)qjADtH;!WS2;?/DG4e7P
%<.8B.K-\DMoTk*ZSj].00atpd1!$Bg.J''%;H!gIKu!QQ2:ZQW`\pS"ClWDL\m6ibH5PNXR*01ng4L["-B:>IU&)"i)'$=\C8ij3
%Sq+PU>=5g#*'\*CF6Mg*eu'+/$-5*F+5VIARKQ`!7e\jdmQAmJW[);/9J#n&+@=M,8*'cC-3h?0d+bBMUt<8MSo<KN-22bFki0=;
%c$f!</3op[1NV7=TRic+@bl>;mW!81[e>\q'WS[s6jZj?'FTlu,sp/ArE"&[1q"\RahB6n^/a(/FNHba8+aos`nJhoV[LX^1sc+#
%P[V%b'.D^e_dI_T[*t5U@^*!\/T58?b*Q-f60k"Qr;W3gU2@U^ks)R+/LIo-CV#fIr0)XaZH<W7!a/k&\R(DtWpg[^2n$G!VCHid
%O*@j#R*i^=aYtD&QqX>T?Ht)G->YCL<m:LQ(N:ha9K+"ML)]dDVtVO3?RGlGME=.GMD:#%OXa#bF\-88dcHQlX+hR:L=nV)m1*r;
%=Qu*N/4G)T\4NmZm)Omhcu9bVj%f,C&4U:B=48*WO$^[KhnP#5[`ps1&L>JMBWD3*'rcXf4UPm6$cX2f\AH/<NVdSj8d/Y#.H5Wj
%iR5Q=0c^JKd6[uW&mD.qE4Amj0ss10*F,-VXqGSjP*0T6LY]/B0A,I2]?SA=p>t9_%VCR\K3[KZ(esfSbCgdN&7#<Dd#EhJ<t7s/
%2!I4QIlo`4JR>KR1?r?`!$"e"p>&0:c.RVOHBT!k3nUsXT"ET:<ua6>de8ZJb/U'4X.,B,@'[e2)R;,d_&SG+^N-e*hj=E;/U*-Q
%rqZH[k#W1;Dp:-9HE[+mn"9XMGQ0Z%ooD?9q+i+3kL5dln"1-gnBW2*r:DXL55b;-I/<F4G<c*)iP.Riqs`'1qV"_pIK$-g5CWG#
%o7-c$bGTPKs4^o[>=\=Z`s7(giK+$2&)Vm2^EM1qrr~>
%AI9_PrivateDataEnd
